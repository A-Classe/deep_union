{
  "profile": "Default",
  "groups": [
    {
      "name": "Potential Code Quality Issues",
      "inspections": [
        {
          "shortName": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault",
          "displayName": "Some values of the enum are not processed inside 'switch' statement and are handled via default section",
          "enabled": true,
          "description": "Some values of the enum are not processed inside 'switch' statement and fall into default section. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementHandlesSomeKnownEnumValuesWithDefault.html)"
        },
        {
          "shortName": "UseConfigureAwaitFalseForAsyncDisposable",
          "displayName": "Missing '.ConfigureAwait(false)' for async disposable in library code",
          "enabled": false,
          "description": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await using' statements for missing 'ConfigureAwait(false)' calls."
        },
        {
          "shortName": "CoVariantArrayConversion",
          "displayName": "Co-variant array conversion",
          "enabled": true,
          "description": "Co-variant conversion of array could cause run-time exceptions [Learn more...](https://www.jetbrains.com/help/rider/CoVariantArrayConversion.html)"
        },
        {
          "shortName": "CollectionNeverUpdated.Global",
          "displayName": "Collection is never updated (non-private accessibility)",
          "enabled": true,
          "description": "New elements are never added to the collection [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverUpdated.Global.html)"
        },
        {
          "shortName": "CompareNonConstrainedGenericWithNull",
          "displayName": "Possible comparison of value type with 'null'",
          "enabled": false,
          "description": "Generic type has no value or class constraint, the condition could be always 'false' [Learn more...](https://www.jetbrains.com/help/rider/CompareNonConstrainedGenericWithNull.html)"
        },
        {
          "shortName": "EventUnsubscriptionViaAnonymousDelegate",
          "displayName": "Event unsubscription via anonymous delegate",
          "enabled": true,
          "description": "Event unsubscription via anonymous delegate is meaningless"
        },
        {
          "shortName": "UseNullableAnnotationInsteadOfAttribute",
          "displayName": "Use nullable annotation instead of an attribute",
          "enabled": true,
          "description": "An attribute is used to declare the nullability of a type. Nullable reference types' annotations might be used instead."
        },
        {
          "shortName": "CollectionNeverUpdated.Local",
          "displayName": "Collection is never updated (private accessibility)",
          "enabled": true,
          "description": "New elements are never added to the collection [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverUpdated.Local.html)"
        },
        {
          "shortName": "PatternIsRedundant",
          "displayName": "The pattern is redundant, it does not produce any runtime checks",
          "enabled": true,
          "description": "The pattern is redundant because it does not produce any actual checks at runtime. This usually indicates an error in the pattern matching condition. [Learn more...](https://www.jetbrains.com/help/rider/PatternIsRedundant.html)"
        },
        {
          "shortName": "BaseObjectGetHashCodeCallInGetHashCode",
          "displayName": "Overridden GetHashCode calls base 'Object.GetHashCode()'",
          "enabled": true,
          "description": "Overridden GetHashCode calls base 'Object.GetHashCode()'"
        },
        {
          "shortName": "ShiftExpressionResultEqualsZero",
          "displayName": "Constant shift expression with non-zero operands results in a zero value",
          "enabled": true,
          "description": "Constant shift expression with non-zero operands results in a zero value"
        },
        {
          "shortName": "PossibleInterfaceMemberAmbiguity",
          "displayName": "Possible ambiguity while accessing member by interface",
          "enabled": true,
          "description": "Possible ambiguity while accessing member by interface"
        },
        {
          "shortName": "ConvertTypeCheckToNullCheck",
          "displayName": "Use null check instead of a type check succeeding on any not-null value",
          "enabled": true,
          "description": "The expression of 'is' operator matches the provided type on any non-null value. Consider comparing with 'null' instead."
        },
        {
          "shortName": "NonReadonlyMemberInGetHashCode",
          "displayName": "Non-readonly type member referenced in 'GetHashCode()'",
          "enabled": true,
          "description": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)"
        },
        {
          "shortName": "LocalFunctionHidesMethod",
          "displayName": "Local function hides method",
          "enabled": true,
          "description": "Local function has the same name as a method and hides it"
        },
        {
          "shortName": "ReturnTypeCanBeNotNullable",
          "displayName": "Return type of a function can be non-nullable",
          "enabled": true,
          "description": "Function's return type is declared as nullable but it never returns nullable values"
        },
        {
          "shortName": "ReturnValueOfPureMethodIsNotUsed",
          "displayName": "Return value of pure method is not used",
          "enabled": true,
          "description": "Return value of pure method is not used [Learn more...](https://www.jetbrains.com/help/rider/ReturnValueOfPureMethodIsNotUsed.html)"
        },
        {
          "shortName": "NotAccessedPositionalProperty.Local",
          "displayName": "Non-accessed positional property (private accessibility)",
          "enabled": true,
          "description": "Positional property is never accessed for reading [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedPositionalProperty.Local.html)"
        },
        {
          "shortName": "PossibleInvalidCastExceptionInForeachLoop",
          "displayName": "Possible 'System.InvalidCastException' in foreach loop",
          "enabled": true,
          "description": "Possible cast expression of incompatible type [Learn more...](https://www.jetbrains.com/help/rider/PossibleInvalidCastExceptionInForeachLoop.html)"
        },
        {
          "shortName": "PossiblyImpureMethodCallOnReadonlyVariable",
          "displayName": "Possibly impure struct method is called on readonly variable: struct value always copied before invocation",
          "enabled": true,
          "description": "Possibly impure struct instance method or 'this ref' extension method is called on readonly field/in parameter/ref readonly return: struct value always copied before invocation"
        },
        {
          "shortName": "PossibleInvalidOperationException",
          "displayName": "Possible 'System.InvalidOperationException'",
          "enabled": true,
          "description": "Possible call to method is invalid for the object's current state [Learn more...](https://www.jetbrains.com/help/rider/PossibleInvalidOperationException.html)"
        },
        {
          "shortName": "UseCollectionCountProperty",
          "displayName": "Use collection's count property",
          "enabled": true,
          "description": "Usage of 'Enumerable.Count()' method can be replaced with direct collection count property access [Learn more...](https://www.jetbrains.com/help/rider/UseCollectionCountProperty.html)"
        },
        {
          "shortName": "OneWayOperationContractWithReturnType",
          "displayName": "One way operations must not return values",
          "enabled": true,
          "description": "Methods marked with OperationContract attribute as OneWay operations must not return values [Learn more...](https://www.jetbrains.com/help/rider/OneWayOperationContractWithReturnType.html)"
        },
        {
          "shortName": "SimplifyStringInterpolation",
          "displayName": "Use format specifier in interpolated strings",
          "enabled": true,
          "description": "'.ToString()' call could be replaced with a format specifier"
        },
        {
          "shortName": "ReferenceEqualsWithValueType",
          "displayName": "'Object.ReferenceEquals' is always false because it is called with value type",
          "enabled": true,
          "description": "'Object.ReferenceEquals' is always false because it is called with value type"
        },
        {
          "shortName": "IsExpressionAlwaysFalse",
          "displayName": "The expression of 'is' operator is never of the provided type",
          "enabled": true,
          "description": "The expression of 'is' operator is never of the provided type"
        },
        {
          "shortName": "ReadAccessInDoubleCheckLocking",
          "displayName": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field.",
          "enabled": true,
          "description": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field. [Learn more...](https://www.jetbrains.com/help/rider/ReadAccessInDoubleCheckLocking.html)"
        },
        {
          "shortName": "AssignmentInConditionalExpression",
          "displayName": "Assignment in conditional expression",
          "enabled": true,
          "description": "Assignment in conditional expression; did you mean to use '==' instead of '='? [Learn more...](https://www.jetbrains.com/help/rider/AssignmentInConditionalExpression.html)"
        },
        {
          "shortName": "VirtualMemberCallInConstructor",
          "displayName": "Virtual member call in constructor",
          "enabled": true,
          "description": "When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed. See <http://msdn2.microsoft.com/en-us/library/ms182331.aspx>. [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberCallInConstructor.html)"
        },
        {
          "shortName": "AddressOfMarshalByRefObject",
          "displayName": "Captured field reference of a marshal-by-reference class may cause a runtime exception",
          "enabled": true,
          "description": "Captured field reference of a marshal-by-reference class may cause a runtime exception"
        },
        {
          "shortName": "OperationContractWithoutServiceContract",
          "displayName": "Method is marked as OperationContract but containing type is not marked as ServiceContract",
          "enabled": true,
          "description": "Marking method as OperationContract without ServiceContract attribute on the containing type could cause runtime exception"
        },
        {
          "shortName": "UnreachableSwitchArmDueToIntegerAnalysis",
          "displayName": "Heuristically unreachable switch arm according to integer analysis",
          "enabled": true,
          "description": "Heuristically unreachable switch arm according to integer analysis [Learn more...](https://www.jetbrains.com/help/rider/UnreachableSwitchArmDueToIntegerAnalysis.html)"
        },
        {
          "shortName": "FunctionComplexityOverflow",
          "displayName": "Function body is too complex to analyze",
          "enabled": false,
          "description": "Function body is too complex to analyze, consider decomposing it or reducing number of variables"
        },
        {
          "shortName": "PolymorphicFieldLikeEventInvocation",
          "displayName": "Invocation of polymorphic field-like event",
          "enabled": true,
          "description": "Invocation of 'virtual' or 'override' field-like event leads to unpredictable result because the invocation list is not virtual [Learn more...](https://www.jetbrains.com/help/rider/PolymorphicFieldLikeEventInvocation.html)"
        },
        {
          "shortName": "RedundantWithExpression",
          "displayName": "Empty 'with' expression is redundant",
          "enabled": true,
          "description": "Empty 'with' expression applied to newly created object instance results in unnecessary clone creation"
        },
        {
          "shortName": "NonAtomicCompoundOperator",
          "displayName": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead.",
          "enabled": true,
          "description": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead."
        },
        {
          "shortName": "SwitchStatementMissingSomeEnumCasesNoDefault",
          "displayName": "Some values of the enum are not processed inside 'switch' statement",
          "enabled": true,
          "description": "Some values of the enum are not processed inside 'switch' statement [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementMissingSomeEnumCasesNoDefault.html)"
        },
        {
          "shortName": "StaticMemberInGenericType",
          "displayName": "Static field or auto-property in generic type",
          "enabled": true,
          "description": "Static field or auto-property in generic type may result in state duplication per each generic type instantiation [Learn more...](https://www.jetbrains.com/help/rider/StaticMemberInGenericType.html)"
        },
        {
          "shortName": "EventNeverInvoked",
          "displayName": "Event never invoked",
          "enabled": true,
          "description": "Event never invoked. Note that in C# this warning is the compiler warning CS0067 and is not configured here."
        },
        {
          "shortName": "IntDivisionByZero",
          "displayName": "Division by zero in at least one execution path",
          "enabled": true,
          "description": "Division by zero in at least one execution path"
        },
        {
          "shortName": "StaticProblemInText",
          "displayName": "Cannot access static symbol in text argument",
          "enabled": true,
          "description": "Cannot access static symbol in text argument"
        },
        {
          "shortName": "InterpolatedStringExpressionIsNotIFormattable",
          "displayName": "Formatting is specified, but interpolated string expression is not IFormattable",
          "enabled": true,
          "description": "Formatting is specified, but interpolated string expression is not IFormattable"
        },
        {
          "shortName": "ObjectCreationAsStatement",
          "displayName": "Possible unassigned object created by 'new' expression",
          "enabled": true,
          "description": "Object created by 'new' expression is possibly not assigned anywhere"
        },
        {
          "shortName": "IntVariableOverflowInUncheckedContext",
          "displayName": "Possible overflow in unchecked context",
          "enabled": true,
          "description": "Possible overflow in unchecked context"
        },
        {
          "shortName": "ConstructorInitializerLoop",
          "displayName": "Possible cyclic constructor call",
          "enabled": true,
          "description": "Possible cyclic constructor call [Learn more...](https://www.jetbrains.com/help/rider/ConstructorInitializerLoop.html)"
        },
        {
          "shortName": "AccessRightsInText",
          "displayName": "Cannot access symbol in text argument",
          "enabled": true,
          "description": "Cannot access symbol in text argument"
        },
        {
          "shortName": "WithExpressionInsteadOfInitializer",
          "displayName": "'with' expression is used instead of object initializer",
          "enabled": true,
          "description": "'with' expression applied to a newly created object instance results in unnecessary clone creation"
        },
        {
          "shortName": "UseFormatSpecifierInFormatString",
          "displayName": "Use format specifier in format strings",
          "enabled": true,
          "description": "'.ToString()' call can be replaced with format specifier"
        },
        {
          "shortName": "NotAccessedPositionalProperty.Global",
          "displayName": "Non-accessed positional property (non-private accessibility)",
          "enabled": true,
          "description": "Positional property is never accessed for reading [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedPositionalProperty.Global.html)"
        },
        {
          "shortName": "UnreachableSwitchCaseDueToIntegerAnalysis",
          "displayName": "Heuristically unreachable case according to integer analysis",
          "enabled": true,
          "description": "Heuristically unreachable case label according to integer analysis [Learn more...](https://www.jetbrains.com/help/rider/UnreachableSwitchCaseDueToIntegerAnalysis.html)"
        },
        {
          "shortName": "ReturnOfTaskProducedByUsingVariable",
          "displayName": "Return of a task produced by 'using'-captured object",
          "enabled": true,
          "description": "Do not return a task produced by a 'using'-captured object, because this task may not be able to complete after that object is disposed"
        },
        {
          "shortName": "InvalidXmlDocComment",
          "displayName": "Invalid XML documentation comment",
          "enabled": true,
          "description": "Invalid XML documentation comment"
        },
        {
          "shortName": "TailRecursiveCall",
          "displayName": "Tail recursive call can be replaced with loop",
          "enabled": true,
          "description": "Tail recursive calls can be replaced with loop for better performance and protection from possible stack overflows"
        },
        {
          "shortName": "OptionalParameterRefOut",
          "displayName": "'ref' or 'out' parameter with [Optional] attribute",
          "enabled": true,
          "description": "C# does not support 'ref' or 'out' optional parameters"
        },
        {
          "shortName": "FunctionNeverReturns",
          "displayName": "Function never returns",
          "enabled": true,
          "description": "Function does not reach its end or a 'return' statement by any of possible execution paths [Learn more...](https://www.jetbrains.com/help/rider/FunctionNeverReturns.html)"
        },
        {
          "shortName": "InconsistentlySynchronizedField",
          "displayName": "Inconsistent synchronization on field",
          "enabled": true,
          "description": "The field is sometimes used inside synchronized block and sometimes used without synchronization [Learn more...](https://www.jetbrains.com/help/rider/InconsistentlySynchronizedField.html)"
        },
        {
          "shortName": "UseConfigureAwaitFalse",
          "displayName": "Missing '.ConfigureAwait(false)' in library code",
          "enabled": true,
          "description": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await' expressions and statements for missing 'ConfigureAwait(false)' calls. [Learn more...](https://www.jetbrains.com/help/rider/UseConfigureAwaitFalse.html)"
        },
        {
          "shortName": "NullnessAnnotationConflictWithJetBrainsAnnotations",
          "displayName": "Nullability conflicts with annotations in hierarchy",
          "enabled": true,
          "description": "Nullability of a member conflicts with attribute annotations in its hierarchy. When using a base member, an unexpected value might be passed or returned, e.g. a null value might be passed to a non-nullable parameter because a parameter of a base member allows it, or the return value might not be checked for null because a base member indicates that it should never return null."
        },
        {
          "shortName": "ConfusingCharAsIntegerInConstructor",
          "displayName": "Char is possibly unintentionally used as integer",
          "enabled": true,
          "description": "Char is possibly unintentionally used as integer"
        },
        {
          "shortName": "PossibleUnintendedQueryableAsEnumerable",
          "displayName": "IQueryable is possibly unintentionally used as IEnumerable",
          "enabled": true,
          "description": "IQueryable is possibly unintentionally used as IEnumerable [Learn more...](https://www.jetbrains.com/help/rider/PossibleUnintendedQueryableAsEnumerable.html)"
        },
        {
          "shortName": "SimilarAnonymousTypeNearby",
          "displayName": "Similar anonymous type detected nearby",
          "enabled": true,
          "description": "Anonymous type that differs only in property order is detected nearby"
        },
        {
          "shortName": "NotAccessedField.Global",
          "displayName": "Non-accessed field (non-private accessibility)",
          "enabled": true,
          "description": "Field is assigned but its value is never used"
        },
        {
          "shortName": "ConditionalTernaryEqualBranch",
          "displayName": "'?:' expression has identical true and false branches",
          "enabled": true,
          "description": "'?:' expression has identical true and false branches [Learn more...](https://www.jetbrains.com/help/rider/ConditionalTernaryEqualBranch.html)"
        },
        {
          "shortName": "PossibleIntendedRethrow",
          "displayName": "Exception rethrow possibly intended",
          "enabled": true,
          "description": "A 'throw' statement inside a catch clause which throws the exception caught. In most of cases a 'throw' statement with no argument is to be used."
        },
        {
          "shortName": "InheritdocConsiderUsage",
          "displayName": "Use <inheritdoc /> on root level to inherit documentation from base candidate",
          "enabled": false,
          "description": "Use on root level to inherit documentation from base candidate"
        },
        {
          "shortName": "PropertyFieldKeywordIsNeverAssigned",
          "displayName": "Backing field is used but never assigned",
          "enabled": true,
          "description": "Backing field of property with 'field' keyword is used but never assigned"
        },
        {
          "shortName": "AccessToDisposedClosure",
          "displayName": "Access to disposed captured variable",
          "enabled": true,
          "description": "Access to captured variable from anonymous method when the variable is disposed [Learn more...](https://www.jetbrains.com/help/rider/AccessToDisposedClosure.html)"
        },
        {
          "shortName": "FormatStringProblem",
          "displayName": "String formatting method problems",
          "enabled": true,
          "description": "Format string syntax errors (unescaped braces, invalid indices/alignments, unused arguments etc.) and other formatting method invocation problems"
        },
        {
          "shortName": "EnumerableSumInExplicitUncheckedContext",
          "displayName": "'Enumerable.Sum' invocation in explicit unchecked context",
          "enabled": true,
          "description": "'Enumerable.Sum' invocation in explicit unchecked context"
        },
        {
          "shortName": "MathClampMinGreaterThanMax",
          "displayName": "Inconsistent arguments passed to 'Math.Clamp()' method",
          "enabled": true,
          "description": "Argument 'min' is always greater than argument 'max'"
        },
        {
          "shortName": "UnassignedField.Global",
          "displayName": "Unassigned field (non-private accessibility)",
          "enabled": true,
          "description": "Field is never assigned"
        },
        {
          "shortName": "EventNeverSubscribedTo.Local",
          "displayName": "Event is never subscribed to (private accessibility)",
          "enabled": true,
          "description": "Event is never subscribed to"
        },
        {
          "shortName": "PossiblyMissingIndexerInitializerComma",
          "displayName": "Possibly missing comma before indexer initializer",
          "enabled": true,
          "description": "Assignment expression inside member initializer value looks suspicious. Comma is probably missing."
        },
        {
          "shortName": "ServiceContractWithoutOperations",
          "displayName": "Interfaces marked as ServiceContract should declare at least one OperationContract",
          "enabled": true,
          "description": "Interfaces marked as ServiceContract should declare at least one OperationContract"
        },
        {
          "shortName": "PropertyNotResolved",
          "displayName": "Cannot resolve property",
          "enabled": true,
          "description": "Cannot resolve property"
        },
        {
          "shortName": "SafeCastIsUsedAsTypeCheck",
          "displayName": "Try cast and check for null can be replaced with a type check",
          "enabled": true,
          "description": "Try cast and check for null can be replaced with a type check"
        },
        {
          "shortName": "InconsistentOrderOfLocks",
          "displayName": "Inconsistent order of taken locks",
          "enabled": true,
          "description": "The expression is used in several lock statements with inconsistent execution order, forming a cycle. This might lead to a possible deadlock in a multi-threaded execution. [Learn more...](https://www.jetbrains.com/help/rider/InconsistentOrderOfLocks.html)"
        },
        {
          "shortName": "MemberHidesStaticFromOuterClass",
          "displayName": "Member hides static member from outer class",
          "enabled": true,
          "description": "Member hides static member from outer class [Learn more...](https://www.jetbrains.com/help/rider/MemberHidesStaticFromOuterClass.html)"
        },
        {
          "shortName": "UseSwitchCasePatternVariable",
          "displayName": "Type pattern and casts can be merged",
          "enabled": true,
          "description": "Type pattern in switch case label can be merged with direct cast(s) in switch section"
        },
        {
          "shortName": "NotAccessedField.Local",
          "displayName": "Non-accessed field (private accessibility)",
          "enabled": true,
          "description": "Field is assigned but its value is never used [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedField.Local.html)"
        },
        {
          "shortName": "EventNeverInvoked.Global",
          "displayName": "Abstract or virtual (overridable) event is never invoked",
          "enabled": true,
          "description": "An abstract or virtual (overridable) event is never invoked in its class or its inheritors"
        },
        {
          "shortName": "CollectionNeverQueried.Local",
          "displayName": "Collection content is never queried (private accessibility)",
          "enabled": true,
          "description": "Elements are only added to the collection but never used [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverQueried.Local.html)"
        },
        {
          "shortName": "SuspiciousTypeConversion.Global",
          "displayName": "Suspicious type conversion or check",
          "enabled": true,
          "description": "A type is converted into another one but there is no type in the solution which is inherited from both. This also applies to 'is' operator and '==' and '!=' comparisons."
        },
        {
          "shortName": "NullableWarningSuppressionIsUsed",
          "displayName": "A suppressed nullable warning might hide an underlying problem",
          "enabled": false,
          "description": "A suppressed nullable warning might hide an underlying problem such as a nullable value that was thought to be already handled. This might be a result of a refactoring introducing nullable values on execution paths where they were not allowed."
        },
        {
          "shortName": "FieldHidesInterfacePropertyWithDefaultImplementation",
          "displayName": "Field hides property with default implementation in interface",
          "enabled": true,
          "description": "Property with the same name and default implementation exists in an implemented interface"
        },
        {
          "shortName": "ResourceItemNotResolved",
          "displayName": "Cannot resolve resource item",
          "enabled": true,
          "description": "Cannot resolve resource item"
        },
        {
          "shortName": "InheritdocInvalidUsage",
          "displayName": "Usage of <inheritdoc /> is invalid",
          "enabled": true,
          "description": "Usage of is invalid"
        },
        {
          "shortName": "ExplicitCallerInfoArgument",
          "displayName": "Explicit argument passed to parameter with caller info attribute",
          "enabled": true,
          "description": "Compiler generates correct value for parameters marked with \\[CallerMemberName\\], \\[CallerFilePath\\], \\[CallerLineNumber\\], or \\[CallerArgumentExpression\\] attributes"
        },
        {
          "shortName": "SymbolFromNotCopiedLocallyReferenceUsedWarning",
          "displayName": "Symbol from module that might be missing at runtime",
          "enabled": true,
          "description": "Highlights symbols used from a referenced module that is not copied locally [Learn more...](https://www.jetbrains.com/help/rider/SymbolFromNotCopiedLocallyReferenceUsedWarning.html)"
        },
        {
          "shortName": "PossibleStructMemberModificationOfNonVariableStruct",
          "displayName": "Value assigned to a property of non-variable qualifier expression can be lost",
          "enabled": true,
          "description": "Value assigned to a property of non-variable qualifier expression can be lost if struct type will be substituted as generic type argument"
        },
        {
          "shortName": "IteratorMethodResultIsIgnored",
          "displayName": "Return value of iterator is not used",
          "enabled": true,
          "description": "Return value of iterator is not used"
        },
        {
          "shortName": "PossibleInfiniteInheritance",
          "displayName": "Possible infinite inheritance",
          "enabled": true,
          "description": "According to ECMA-335 part II (Metadata) paragraph 9.2: 'Generics and recursive inheritance graphs' [Learn more...](https://www.jetbrains.com/help/rider/PossibleInfiniteInheritance.html)"
        },
        {
          "shortName": "ShiftExpressionZeroLeftOperand",
          "displayName": "Shift expression with zero left operand equals zero",
          "enabled": true,
          "description": "Shift expression with zero left operand equals zero"
        },
        {
          "shortName": "AsyncIteratorInvocationWithoutAwaitForeach",
          "displayName": "Async iterator invocation without 'await foreach'",
          "enabled": true,
          "description": "Because the result of asynchronous iterator call is not being iterated, execution of the current method continues before the call is completed. Consider using the 'await foreach' over the result of the call."
        },
        {
          "shortName": "MustUseReturnValue",
          "displayName": "Return value of [MustUseReturnValue] annotated method is not used",
          "enabled": true,
          "description": "Return value of method annotated with \\[MustUseReturnValue\\] attribute is not used"
        },
        {
          "shortName": "BaseMethodCallWithDefaultParameter",
          "displayName": "Call to base member with implicit default parameters",
          "enabled": true,
          "description": "Call to base member with implicit default parameters"
        },
        {
          "shortName": "AsyncVoidLambda",
          "displayName": "Avoid using 'async' lambda when delegate type returns 'void'",
          "enabled": true,
          "description": "Check the usage of 'async' lambda expression: any exceptions unhandled by the lambda might lead to the process crash [Learn more...](https://www.jetbrains.com/help/rider/AsyncVoidLambda.html)"
        },
        {
          "shortName": "ThreadStaticAtInstanceField",
          "displayName": "[ThreadStatic] does not work with instance fields",
          "enabled": true,
          "description": "\\[ThreadStatic\\] does nothing with instance fields [Learn more...](https://www.jetbrains.com/help/rider/ThreadStaticAtInstanceField.html)"
        },
        {
          "shortName": "EventNeverSubscribedTo.Global",
          "displayName": "Event is never subscribed to (non-private accessibility)",
          "enabled": true,
          "description": "Event is never subscribed to"
        },
        {
          "shortName": "LoopVariableIsNeverChangedInsideLoop",
          "displayName": "Loop control variable is never changed inside loop",
          "enabled": true,
          "description": "Loop control variable is never changed inside loop [Learn more...](https://www.jetbrains.com/help/rider/LoopVariableIsNeverChangedInsideLoop.html)"
        },
        {
          "shortName": "ResourceNotResolved",
          "displayName": "Cannot resolve resource",
          "enabled": true,
          "description": "Cannot resolve resource"
        },
        {
          "shortName": "UselessBinaryOperation",
          "displayName": "Useless arithmetical operation",
          "enabled": true,
          "description": "Useless arithmetical operation"
        },
        {
          "shortName": "WithExpressionModifiesAllMembers",
          "displayName": "'with' expression modifies all accessible instance members",
          "enabled": true,
          "description": "'with' expression modifies all accessible instance members. Unless it is an unintentional mistake, it should make more sense to create an entirely new instance."
        },
        {
          "shortName": "VariableHidesOuterVariable",
          "displayName": "Variable in local function hides variable from outer scope",
          "enabled": true,
          "description": "Variable in local function hides variable from outer scope"
        },
        {
          "shortName": "SuspiciousParameterNameInArgumentNullException",
          "displayName": "Suspicious parameter name in ArgumentNullException",
          "enabled": true,
          "description": "Argument name does not match the parameter that was checked"
        },
        {
          "shortName": "ParameterHidesMember",
          "displayName": "Parameter hides member",
          "enabled": true,
          "description": "Method parameter has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/ParameterHidesMember.html)"
        },
        {
          "shortName": "UnassignedReadonlyField",
          "displayName": "Unassigned readonly field",
          "enabled": true,
          "description": "Readonly field is never assigned"
        },
        {
          "shortName": "IndexingByInvalidRange",
          "displayName": "Possible 'System.ArgumentOutOfRangeException'. Start index must be less than or equal to end index.",
          "enabled": true,
          "description": "Indexing by invalid range may cause exceptions"
        },
        {
          "shortName": "LocalVariableHidesMember",
          "displayName": "Local variable hides member",
          "enabled": true,
          "description": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)"
        },
        {
          "shortName": "PossibleNullReferenceException",
          "displayName": "Possible 'System.NullReferenceException'",
          "enabled": true,
          "description": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)"
        },
        {
          "shortName": "ZeroIndexFromEnd",
          "displayName": "Index from end must be greater than zero; use '^1' to refer to the last element",
          "enabled": true,
          "description": "Using '\\^0' in the index expression causes 'System.ArgumentOutOfRangeException'; use '\\^1' to refer to the last element [Learn more...](https://www.jetbrains.com/help/rider/ZeroIndexFromEnd.html)"
        },
        {
          "shortName": "ClassNeverInstantiated.Global",
          "displayName": "Class is never instantiated (non-private accessibility)",
          "enabled": true,
          "description": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)"
        },
        {
          "shortName": "PartialMethodParameterNameMismatch",
          "displayName": "Parameter name differs in partial method declaration",
          "enabled": true,
          "description": "Parameter name differs in partial method declaration [Learn more...](https://www.jetbrains.com/help/rider/PartialMethodParameterNameMismatch.html)"
        },
        {
          "shortName": "OperatorWithoutMatchedCheckedOperator",
          "displayName": "Operator without matching checked operator",
          "enabled": true,
          "description": "The operator does not have a matching checked operator while there are checked versions for other operators in this type"
        },
        {
          "shortName": "ValueParameterNotUsed",
          "displayName": "'value' parameter is not used",
          "enabled": true,
          "description": "The setter of a property or indexer does not use its 'value' parameter. This also applies to adders and removers of events. [Learn more...](https://www.jetbrains.com/help/rider/ValueParameterNotUsed.html)"
        },
        {
          "shortName": "BitwiseOperatorOnEnumWithoutFlags",
          "displayName": "Bitwise operation on enum is not marked by [Flags] attribute",
          "enabled": true,
          "description": "Bitwise operation on enum is not marked by \\[Flags\\] attribute"
        },
        {
          "shortName": "PatternAlwaysMatches",
          "displayName": "The source expression always matches the provided pattern",
          "enabled": true,
          "description": "The source expression of 'is' operator or 'switch' statement always matches the provided pattern"
        },
        {
          "shortName": "AllUnderscoreLocalParameterName",
          "displayName": "Potentially misleading parameter name in lambda or local function",
          "enabled": true,
          "description": "A name that consists of the '_' characters can be misleading for parameters that have usages, because such names are typically reserved for unused parameters"
        },
        {
          "shortName": "MergeCastWithTypeCheck",
          "displayName": "Type check and casts can be merged",
          "enabled": true,
          "description": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)"
        },
        {
          "shortName": "IntVariableOverflow",
          "displayName": "Possible overflow",
          "enabled": true,
          "description": "Possible overflow"
        },
        {
          "shortName": "SuspiciousLockOverSynchronizationPrimitive",
          "displayName": "Suspicious locking over synchronization primitive",
          "enabled": true,
          "description": "Avoid using synchronization primitives as 'lock' objects"
        },
        {
          "shortName": "MultipleResolveCandidatesInText",
          "displayName": "Ambiguous symbols in text argument",
          "enabled": true,
          "description": "Ambiguous symbols in text argument"
        },
        {
          "shortName": "AssignmentInsteadOfDiscard",
          "displayName": "Suspicious use of variable with discard-like name",
          "enabled": true,
          "description": "Reports expressions that look like discard patterns but actually assign a local variable with discard-like name '_'"
        },
        {
          "shortName": "ConvertTypeCheckPatternToNullCheck",
          "displayName": "Use null check pattern instead of a type check succeeding on any not-null value",
          "enabled": true,
          "description": "The source expression is always of pattern's type, matches on all non-null values"
        },
        {
          "shortName": "AsyncVoidMethod",
          "displayName": "Avoid using 'async' methods with the 'void' return type",
          "enabled": false,
          "description": "Prefer Task methods over methods returning 'void'"
        },
        {
          "shortName": "VoidMethodWithMustUseReturnValueAttribute",
          "displayName": "'void' method is annotated by [MustUseReturnValue] attribute",
          "enabled": true,
          "description": "'void' method is annotated by \\[MustUseReturnValue\\] attribute"
        },
        {
          "shortName": "MethodOverloadWithOptionalParameter",
          "displayName": "Method with optional or 'params' parameter is hidden by overload",
          "enabled": true,
          "description": "Method with optional or 'params' parameter is hidden by overload"
        },
        {
          "shortName": "ThreadStaticFieldHasInitializer",
          "displayName": "Thread static field has initializer",
          "enabled": true,
          "description": "Thread static field has an initializer, which is invoked only once on the thread that is running when the static constructor executes [Learn more...](https://www.jetbrains.com/help/rider/ThreadStaticFieldHasInitializer.html)"
        },
        {
          "shortName": "PossibleMultipleWriteAccessInDoubleCheckLocking",
          "displayName": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field.",
          "enabled": true,
          "description": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field. [Learn more...](https://www.jetbrains.com/help/rider/PossibleMultipleWriteAccessInDoubleCheckLocking.html)"
        },
        {
          "shortName": "UnusedAutoPropertyAccessor.Local",
          "displayName": "Auto-property accessor is never used (private accessibility)",
          "enabled": true,
          "description": "Accessor in auto-property is never used"
        },
        {
          "shortName": "ClassNeverInstantiated.Local",
          "displayName": "Class is never instantiated (private accessibility)",
          "enabled": true,
          "description": "Non-static class is never instantiated"
        },
        {
          "shortName": "GCSuppressFinalizeForTypeWithoutDestructor",
          "displayName": "'GC.SuppressFinalize' is invoked for type without destructor",
          "enabled": true,
          "description": "'GC.SuppressFinalize' is invoked for type without destructor [Learn more...](https://www.jetbrains.com/help/rider/GCSuppressFinalizeForTypeWithoutDestructor.html)"
        },
        {
          "shortName": "PropertyFieldKeywordIsNeverUsed",
          "displayName": "Backing field is assigned but never used",
          "enabled": true,
          "description": "Backing field of property with 'field' keyword is assigned but never used"
        },
        {
          "shortName": "PossibleUnintendedReferenceComparison",
          "displayName": "Possible unintended reference comparison",
          "enabled": true,
          "description": "Possible unintended reference comparison [Learn more...](https://www.jetbrains.com/help/rider/PossibleUnintendedReferenceComparison.html)"
        },
        {
          "shortName": "SpinLockInReadonlyField",
          "displayName": "Do not store SpinLock in readonly field",
          "enabled": true,
          "description": "SpinLock should not be stored in readonly field because it is a struct and is copied when an instance method is called on it [Learn more...](https://www.jetbrains.com/help/rider/SpinLockInReadonlyField.html)"
        },
        {
          "shortName": "MemberHidesInterfaceMemberWithDefaultImplementation",
          "displayName": "Non-public member in implementation  class hides default implementation in interface",
          "enabled": true,
          "description": "Member with the same signature and default implementation exists in an implemented interface"
        },
        {
          "shortName": "VariableCanBeNotNullable",
          "displayName": "Variable can be declared as non-nullable",
          "enabled": true,
          "description": "Variable is declared as nullable but only never contains a nullable value"
        },
        {
          "shortName": "ShiftExpressionRealShiftCountIsZero",
          "displayName": "Actual shift count equals zero",
          "enabled": true,
          "description": "Actual shift count equals zero. Left operand will remain unchanged."
        },
        {
          "shortName": "UsingStatementResourceInitializationExpression",
          "displayName": "Do not use object initializer for 'using' variable (object initializer expression may throw exception while initializing 'using' variable)",
          "enabled": true,
          "description": "Calculate object properties before the 'using' statement to ensure that no exception is thrown during initialization, which leaves the object not disposed"
        },
        {
          "shortName": "OptionalParameterHierarchyMismatch",
          "displayName": "Mismatch of optional parameter value in overridden method",
          "enabled": true,
          "description": "Mismatch of optional parameter value in overridden method"
        },
        {
          "shortName": "UsingStatementResourceInitialization",
          "displayName": "Do not use object initializer for 'using' variable",
          "enabled": true,
          "description": "Initialize object properties inside the 'using' statement to ensure that the object is disposed if an exception is thrown during initialization"
        },
        {
          "shortName": "StackAllocInsideLoop",
          "displayName": "Using stackalloc inside loop",
          "enabled": true,
          "description": "Memory stack allocation inside a loop can cause a temporary memory leak because the allocated memory is freed only when the method returns"
        },
        {
          "shortName": "MultipleOrderBy",
          "displayName": "Multiple sequential 'OrderBy' invocation",
          "enabled": true,
          "description": "Multiple sequential 'OrderBy' invocation is meaningless, probably 'ThenBy' is implied"
        },
        {
          "shortName": "StaticMemberInitializerReferesToMemberBelow",
          "displayName": "Static member initializer refers to static member below or in other part",
          "enabled": true,
          "description": "Static field/auto-property/event initializer refers to a static field/auto-property/event below or in another part"
        },
        {
          "shortName": "EqualExpressionComparison",
          "displayName": "Similar expressions comparison",
          "enabled": true,
          "description": "Comparing similar expressions for equality is usually redundant"
        },
        {
          "shortName": "IntVariableOverflowInCheckedContext",
          "displayName": "Possible overflow in checked context",
          "enabled": true,
          "description": "Possible overflow in checked context"
        },
        {
          "shortName": "FunctionRecursiveOnAllPaths",
          "displayName": "Function is recursive on all execution paths",
          "enabled": true,
          "description": "Function or type initialization is recursive on all execution paths"
        },
        {
          "shortName": "CompareOfFloatsByEqualityOperator",
          "displayName": "Equality comparison of floating point numbers",
          "enabled": true,
          "description": "Equality comparison of floating point numbers [Learn more...](https://www.jetbrains.com/help/rider/CompareOfFloatsByEqualityOperator.html)"
        },
        {
          "shortName": "MemberInitializerValueIgnored",
          "displayName": "Member initialized value ignored",
          "enabled": true,
          "description": "Member initializer value is ignored because the member is always initialized in all constructors [Learn more...](https://www.jetbrains.com/help/rider/MemberInitializerValueIgnored.html)"
        },
        {
          "shortName": "EmptyGeneralCatchClause",
          "displayName": "Empty general catch clause",
          "enabled": true,
          "description": "A catch clause that catches System.Exception and has an empty body [Learn more...](https://www.jetbrains.com/help/rider/EmptyGeneralCatchClause.html)"
        },
        {
          "shortName": "PossibleMultipleEnumeration",
          "displayName": "Possible multiple enumeration",
          "enabled": true,
          "description": "Possible multiple enumeration of IEnumerable or IAsyncEnumerable [Learn more...](https://www.jetbrains.com/help/rider/PossibleMultipleEnumeration.html)"
        },
        {
          "shortName": "OperatorIsCanBeUsed",
          "displayName": "Operator 'is'/'Type Of ... Is ...' can be used",
          "enabled": true,
          "description": "Operator 'is'/'Type Of ... Is ...' can be used instead of comparing objects GetType() and instance of System.Type object"
        },
        {
          "shortName": "SuppressNullableWarningExpressionAsInvertedIsExpression",
          "displayName": "Nullable warning suppression operator might be confused with inverted 'is' expression",
          "enabled": true,
          "description": "'!is' looks like an inverted 'is' expression but instead applies nullable warning suppression operator to its operand"
        },
        {
          "shortName": "CollectionNeverQueried.Global",
          "displayName": "Collection content is never queried (non-private accessibility)",
          "enabled": true,
          "description": "Elements are only added to the collection but never used [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverQueried.Global.html)"
        },
        {
          "shortName": "AnnotationConflictInHierarchy",
          "displayName": "Annotation conflict in hierarchy",
          "enabled": true,
          "description": "There is base member that has conflicting nullness annotation"
        },
        {
          "shortName": "IsExpressionAlwaysTrue",
          "displayName": "The given expression of 'is' operator is always of the provided type",
          "enabled": true,
          "description": "The expression of 'is' operator is always of the provided type [Learn more...](https://www.jetbrains.com/help/rider/IsExpressionAlwaysTrue.html)"
        },
        {
          "shortName": "AccessToModifiedClosure",
          "displayName": "Access to modified captured variable",
          "enabled": true,
          "description": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)"
        },
        {
          "shortName": "PossibleUnintendedLinearSearchInSet",
          "displayName": "Possibly unintended linear search in set",
          "enabled": true,
          "description": "Usage of 'Enumerable.Contains' extension method will perform a linear search. Consider providing equality comparer to the set's constructor and using its own '.Contains' method."
        },
        {
          "shortName": "DefaultValueAttributeForOptionalParameter",
          "displayName": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value",
          "enabled": true,
          "description": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value. 'DefaultParameterValueAttribute' must be used instead."
        },
        {
          "shortName": "UnusedAutoPropertyAccessor.Global",
          "displayName": "Auto-property accessor is never used (non-private accessibility)",
          "enabled": true,
          "description": "Accessor in auto-property is never used"
        },
        {
          "shortName": "StructuredMessageTemplateProblem",
          "displayName": "Structured message template problems",
          "enabled": true,
          "description": "Structured message template syntax errors (unescaped braces, unused arguments, etc.)"
        },
        {
          "shortName": "NegativeIndex",
          "displayName": "Possible 'System.ArgumentOutOfRangeException'. Index must be a non-negative integer.",
          "enabled": true,
          "description": "'System.Index' requires a non-negative argument"
        },
        {
          "shortName": "NotResolvedInText",
          "displayName": "Cannot resolve symbol in text argument",
          "enabled": true,
          "description": "Cannot resolve symbol in text argument [Learn more...](https://www.jetbrains.com/help/rider/NotResolvedInText.html)"
        },
        {
          "shortName": "ByRefArgumentIsVolatileField",
          "displayName": "Captured reference to 'volatile' field will not be treated as 'volatile'",
          "enabled": true,
          "description": "Captured reference to 'volatile' field will not be treated as 'volatile'"
        },
        {
          "shortName": "TryCastAlwaysSucceeds",
          "displayName": "Safe cast expression always succeeds",
          "enabled": true,
          "description": "Safe cast expression always succeeds and can be replaced with a direct cast [Learn more...](https://www.jetbrains.com/help/rider/TryCastAlwaysSucceeds.html)"
        },
        {
          "shortName": "GenericEnumeratorNotDisposed",
          "displayName": "Instance of IEnumerator is never disposed",
          "enabled": true,
          "description": "Instance of IEnumerator is never disposed"
        },
        {
          "shortName": "PossibleInvalidCastException",
          "displayName": "Possible 'System.InvalidCastException'",
          "enabled": true,
          "description": "Possible cast expression of incompatible type"
        },
        {
          "shortName": "IteratorNeverReturns",
          "displayName": "Iterator never returns",
          "enabled": true,
          "description": "Iterator function does not reach its end or a 'return' statement by any of possible execution paths"
        },
        {
          "shortName": "PossiblyMistakenUseOfInterpolatedStringInsert",
          "displayName": "Possibly unintended string interpolation instead of format string template",
          "enabled": true,
          "description": "Interpolated string that could be a valid format string detected. Possibly intended to be a format string template literal. [Learn more...](https://www.jetbrains.com/help/rider/PossiblyMistakenUseOfInterpolatedStringInsert.html)"
        },
        {
          "shortName": "BaseObjectEqualsIsObjectEquals",
          "displayName": "Call to 'base.Equals(...)' is reference equality",
          "enabled": true,
          "description": "Call to base 'Equals(...)' method is resolved to 'Object.Equals', which is reference equality"
        },
        {
          "shortName": "ReturnOfUsingVariable",
          "displayName": "Return of a variable captured by 'using' statement",
          "enabled": true,
          "description": "Do not return a variable captured by 'using' statement because it will be disposed before returning"
        },
        {
          "shortName": "SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault",
          "displayName": "Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm",
          "enabled": true,
          "description": "Some values of the enum are not processed inside switch expression and fall into default arm. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly [Learn more...](https://www.jetbrains.com/help/rider/SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault.html)"
        },
        {
          "shortName": "AccessToForEachVariableInClosure",
          "displayName": "Access to foreach variable in closure",
          "enabled": true,
          "description": "This code can have different behavior when compiled with different versions of compiler. See changes for 'foreach' loop in C# 5.0 and Visual Basic 11. [Learn more...](https://www.jetbrains.com/help/rider/AccessToForEachVariableInClosure.html)"
        },
        {
          "shortName": "PossibleLossOfFraction",
          "displayName": "Possible loss of fraction",
          "enabled": true,
          "description": "Possible loss of fraction when dividing integral values and assigning the result to float or decimal"
        },
        {
          "shortName": "ShiftExpressionRightOperandNotEqualRealCount",
          "displayName": "Suspicious shift count for this type of left operand",
          "enabled": true,
          "description": "Suspicious shift count for this type of left operand (different from actual shift count that will be used by compiler)"
        },
        {
          "shortName": "UnassignedField.Local",
          "displayName": "Unassigned field (private accessibility)",
          "enabled": true,
          "description": "Field is never assigned"
        },
        {
          "shortName": "NonConstantEqualityExpressionHasConstantResult",
          "displayName": "According to values of the bit masks, expression result will always be the same",
          "enabled": true,
          "description": "According to values of the bit masks, expression result will always be the same"
        },
        {
          "shortName": "PureAttributeOnVoidMethod",
          "displayName": "'void' method is annotated by [Pure] attribute",
          "enabled": true,
          "description": "'void' method is annotated by \\[Pure\\] attribute"
        },
        {
          "shortName": "PatternNeverMatches",
          "displayName": "The source expression never matches the provided pattern",
          "enabled": true,
          "description": "The source expression of 'is' operator or 'switch' statement never matches the provided pattern"
        },
        {
          "shortName": "CppAssignedValueIsNeverUsed",
          "displayName": "Assigned value is never used",
          "enabled": true,
          "description": "Assigned value is never used"
        },
        {
          "shortName": "CppCVQualifierCanNotBeAppliedToReference",
          "displayName": "Adding cv-qualifiers to references has no effect",
          "enabled": true,
          "description": "Adding cv-qualifiers to references has no effect"
        },
        {
          "shortName": "CppClassNeedsConstructorBecauseOfUninitializedMember",
          "displayName": "Class should have a user-defined constructor because of an uninitialized data member",
          "enabled": true,
          "description": "Class should have a user-defined constructor because of an uninitialized data member"
        },
        {
          "shortName": "CppFunctionDoesntReturnValue",
          "displayName": "No return statement in a function or a lambda returning non-void",
          "enabled": true,
          "description": "No return statement in a function or a lambda with non-void return type"
        },
        {
          "shortName": "CppFunctionResultShouldBeUsed",
          "displayName": "Function result should be used",
          "enabled": true,
          "description": "Function returns a value of a type that should be handled at the call site"
        },
        {
          "shortName": "CppDoxygenUndocumentedParameter",
          "displayName": "Missing function parameter description in a documentation comment",
          "enabled": true,
          "description": "Missing function parameter description in a documentation comment"
        },
        {
          "shortName": "CppMissingIncludeGuard",
          "displayName": "Missing include guard",
          "enabled": true,
          "description": "Include guard is not found at the beginning of a header file"
        },
        {
          "shortName": "CppDeprecatedRegisterStorageClassSpecifier",
          "displayName": "Deprecated 'register' storage class specifier",
          "enabled": true,
          "description": "The 'register' storage class specifier is deprecated in C++11 and removed in C++17"
        },
        {
          "shortName": "CppDeletingVoidPointer",
          "displayName": "Deleting a void pointer",
          "enabled": true,
          "description": "Deleting a void pointer is undefined behavior"
        },
        {
          "shortName": "CppRangeBasedForIncompatibleReference",
          "displayName": "Possibly unintended incompatible reference type in range declaration",
          "enabled": true,
          "description": "Using an incompatible reference type in the range declaration is likely to cause unwanted object copying"
        },
        {
          "shortName": "CppPrintfExtraArg",
          "displayName": "Too many arguments in a call to printf",
          "enabled": true,
          "description": "Too many arguments in a call to printf. Some of the arguments are not used."
        },
        {
          "shortName": "CppIdenticalOperandsInBinaryExpression",
          "displayName": "Binary operator acts on identical operands",
          "enabled": true,
          "description": "Binary operator acts on identical operands"
        },
        {
          "shortName": "CppAbstractClassWithoutSpecifier",
          "displayName": "Class is abstract but not explicitly declared as such",
          "enabled": true,
          "description": "The class is abstract but not explicitly declared as such"
        },
        {
          "shortName": "CppBoostFormatBadCode",
          "displayName": "Incorrect format directive in boost::format",
          "enabled": true,
          "description": "A format string of boost::format contains an erroneous format directive"
        },
        {
          "shortName": "CppPrivateSpecialMemberFunctionIsNotImplemented",
          "displayName": "Private special member function is not implemented",
          "enabled": true,
          "description": "A private special member function must be defined or deleted"
        },
        {
          "shortName": "CppIntegralToPointerConversion",
          "displayName": "Implicit integer to pointer conversion",
          "enabled": true,
          "description": "Implicit integer to pointer conversion"
        },
        {
          "shortName": "CppDefaultCaseNotHandledInSwitchStatement",
          "displayName": "Default case is not handled in a switch statement",
          "enabled": true,
          "description": "Default case is not handled in a switch statement"
        },
        {
          "shortName": "CppDeclarationSpecifierWithoutDeclarators",
          "displayName": "Declaration specifier with no declarators",
          "enabled": true,
          "description": "A declaration specifier is ignored when there are no declarators"
        },
        {
          "shortName": "CppEmptyDeclaration",
          "displayName": "Declaration does not declare anything",
          "enabled": true,
          "description": "A declaration does not declare anything"
        },
        {
          "shortName": "CppIncompatiblePointerConversion",
          "displayName": "Implicit conversion to incompatible pointer type",
          "enabled": true,
          "description": "Implicit conversion to incompatible pointer type"
        },
        {
          "shortName": "CppDefaultIsUsedAsIdentifier",
          "displayName": "Keyword 'default' is used as identifier",
          "enabled": true,
          "description": "'default' is a keyword in the C++ standard and cannot be used as an identifier"
        },
        {
          "shortName": "CppIncompleteSwitchStatement",
          "displayName": "Possibly erroneous incomplete switch-statement",
          "enabled": true,
          "description": "The switch statement doesn't cover the whole range of the enumeration used"
        },
        {
          "shortName": "CppConceptNeverUsed",
          "displayName": "Concept is never used",
          "enabled": true,
          "description": "Concept is never used"
        },
        {
          "shortName": "CppMissingKeywordThrow",
          "displayName": "May be missing keyword 'throw'",
          "enabled": true,
          "description": "Object of exception type is created, but is not thrown"
        },
        {
          "shortName": "CppNonInlineFunctionDefinitionInHeaderFile",
          "displayName": "Non-inline function definition in a header file",
          "enabled": true,
          "description": "A function definition in a header file that will cause multiple definition linkage error"
        },
        {
          "shortName": "CppPrintfRiskyFormat",
          "displayName": "Possibly invalid printf format specifier",
          "enabled": true,
          "description": "Format string contains a potential error"
        },
        {
          "shortName": "CppTypeAliasNeverUsed",
          "displayName": "Type alias is never used",
          "enabled": true,
          "description": "A type alias is never used"
        },
        {
          "shortName": "CppDoxygenSyntaxError",
          "displayName": "Syntax error in doxygen comment",
          "enabled": true,
          "description": "Syntax error in a doxygen comment"
        },
        {
          "shortName": "CppRedundantComplexityInComparison",
          "displayName": "Expression can be simplified",
          "enabled": true,
          "description": "Expression can be simplified"
        },
        {
          "shortName": "CppBoostFormatMixedArgs",
          "displayName": "Positional and non-positional arguments in the same boost::format call",
          "enabled": true,
          "description": "An argument of boost::format should contain either positional (%N%, %\\|N$...\\|) or serial (%\\|...\\|, %s) arguments, not both"
        },
        {
          "shortName": "CppMsExtReinterpretCastFromNullptr",
          "displayName": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension",
          "enabled": true,
          "description": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension"
        },
        {
          "shortName": "CppUninitializedNonStaticDataMember",
          "displayName": "Non-static data member is uninitialized",
          "enabled": true,
          "description": "Non-static data member is uninitialized"
        },
        {
          "shortName": "CppUnusedIncludeDirective",
          "displayName": "Possibly unused #include directive",
          "enabled": true,
          "description": "Possibly unused #include directive"
        },
        {
          "shortName": "CppBooleanIncrementExpression",
          "displayName": "Incrementing expression of type bool",
          "enabled": true,
          "description": "Incrementing expression of type bool is deprecated in C++11 and removed in C++17"
        },
        {
          "shortName": "CppParameterNeverUsed",
          "displayName": "Parameter is never used",
          "enabled": true,
          "description": "Function parameter is never used"
        },
        {
          "shortName": "CppLocalVariableMightNotBeInitialized",
          "displayName": "Local variable might not be initialized",
          "enabled": true,
          "description": "A local variable might not be initialized"
        },
        {
          "shortName": "CppInvalidLineContinuation",
          "displayName": "Backslash and newline are separated by space",
          "enabled": true,
          "description": "Backslash is not a line continuator because there is a space between it and the end of the line"
        },
        {
          "shortName": "CppMsExtBindingRValueToLvalueReference",
          "displayName": "Binding r-value to l-value reference is non-standard Microsoft C++ extension",
          "enabled": true,
          "description": "Binding r-value to l-value reference is non-standard Microsoft C++ extension"
        },
        {
          "shortName": "CppImplicitDefaultConstructorNotAvailable",
          "displayName": "Implicit default constructor is not available",
          "enabled": true,
          "description": "Implicit default constructor is not available because a base class or a class member does not have an accessible default constructor"
        },
        {
          "shortName": "CppMustBePublicVirtualToImplementInterface",
          "displayName": "Method must be public and virtual to implement a C++/CLI interface member",
          "enabled": true,
          "description": "Method must be public and virtual to implement a C++/CLI interface member"
        },
        {
          "shortName": "CppDeclaratorNeverUsed",
          "displayName": "Declarator is never used",
          "enabled": true,
          "description": "A declarator is never used"
        },
        {
          "shortName": "CppPossiblyErroneousEmptyStatements",
          "displayName": "Possibly erroneous empty statement",
          "enabled": true,
          "description": "Possibly erroneous empty statement used in a control statement"
        },
        {
          "shortName": "CppDeprecatedEntity",
          "displayName": "Entity is deprecated",
          "enabled": true,
          "description": "Entity is deprecated"
        },
        {
          "shortName": "CppFunctionIsNotImplemented",
          "displayName": "Function is not implemented",
          "enabled": true,
          "description": "A function is not implemented"
        },
        {
          "shortName": "CppDeclarationHidesLocal",
          "displayName": "Hiding local declaration",
          "enabled": true,
          "description": "A local declaration hides another local declaration"
        },
        {
          "shortName": "CppMismatchedClassTags",
          "displayName": "Mismatched class tags",
          "enabled": true,
          "description": "Tags of the declared class do not match previous declarations"
        },
        {
          "shortName": "CppDeclaratorUsedBeforeInitialization",
          "displayName": "Local variable is used without being initialized",
          "enabled": true,
          "description": "Local variable is used without being initialized"
        },
        {
          "shortName": "CppEnumeratorNeverUsed",
          "displayName": "Enumerator is never used",
          "enabled": true,
          "description": "An enumerator is never used"
        },
        {
          "shortName": "CppSomeObjectMembersMightNotBeInitialized",
          "displayName": "Some object members might not be initialized",
          "enabled": true,
          "description": "Some object members might not be initialized"
        },
        {
          "shortName": "CppHiddenFunction",
          "displayName": "Non-virtual class member function hidden in a derived class",
          "enabled": true,
          "description": "Non-virtual class member function is hidden in a derived class"
        },
        {
          "shortName": "CppDoxygenUnresolvedReference",
          "displayName": "Unresolved reference in doxygen comment",
          "enabled": true,
          "description": "Unresolved reference in a doxygen comment"
        },
        {
          "shortName": "CppParameterValueIsReassigned",
          "displayName": "Parameter is always rewritten in function body before being read",
          "enabled": true,
          "description": "A parameter is always rewritten in function body before being read"
        },
        {
          "shortName": "CppZeroValuedExpressionUsedAsNullPointer",
          "displayName": "Expression that evaluates to zero is used as a null pointer constant",
          "enabled": true,
          "description": "Expression that evaluates to zero is used as a null pointer constant"
        },
        {
          "shortName": "CppObjectMemberMightNotBeInitialized",
          "displayName": "Object member might not be initialized",
          "enabled": true,
          "description": "An object member might not be initialized"
        },
        {
          "shortName": "CppBoostFormatTooFewArgs",
          "displayName": "Not enough arguments in a call to boost::format",
          "enabled": true,
          "description": "Not enough arguments in a call to boost::format"
        },
        {
          "shortName": "CppDependentTemplateWithoutTemplateKeyword",
          "displayName": "Dependent template without 'template' keyword",
          "enabled": true,
          "description": "Dependent template without 'template' keyword"
        },
        {
          "shortName": "CppHidingFunction",
          "displayName": "Class member function hiding a non-virtual function from a base class",
          "enabled": true,
          "description": "Class member function hides a non-virtual function from a base class"
        },
        {
          "shortName": "CppVirtualFunctionCallInsideCtor",
          "displayName": "Call to a virtual function inside a constructor/destructor is resolved at compile time",
          "enabled": true,
          "description": "Call to a virtual function inside a constructor/destructor is resolved at compile time"
        },
        {
          "shortName": "CppNonExceptionSafeResourceAcquisition",
          "displayName": "Non-safe resource acquisition",
          "enabled": true,
          "description": "Detects leak-prone resource acquisition/freeing constructs"
        },
        {
          "shortName": "CppMsExtDoubleUserConversionInCopyInit",
          "displayName": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension.",
          "enabled": true,
          "description": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension."
        },
        {
          "shortName": "CppPointerConversionDropsQualifiers",
          "displayName": "Implicit conversion to pointer type with loss of qualifiers",
          "enabled": true,
          "description": "Implicit conversion to pointer type with loss of qualifiers"
        },
        {
          "shortName": "CppBoostFormatTooManyArgs",
          "displayName": "Too many arguments in a call to boost::format",
          "enabled": true,
          "description": "Too many arguments in a call to boost::format. Some of the arguments are not used."
        },
        {
          "shortName": "CppTemplateParameterNeverUsed",
          "displayName": "Template parameter is never used",
          "enabled": true,
          "description": "A template parameter is never used"
        },
        {
          "shortName": "CppNonInlineVariableDefinitionInHeaderFile",
          "displayName": "Non-inline variable definition in a header file",
          "enabled": true,
          "description": "A variable definition in a header file that will cause multiple definition linkage error"
        },
        {
          "shortName": "CppMsExtCopyElisionInCopyInitDeclarator",
          "displayName": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension.",
          "enabled": true,
          "description": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension."
        },
        {
          "shortName": "CppRedefinitionOfDefaultArgumentInOverrideFunction",
          "displayName": "Override function redefines a default parameter argument",
          "enabled": true,
          "description": "An override function redefines a default parameter argument, previously defined in a base function"
        },
        {
          "shortName": "CppBoostFormatLegacyCode",
          "displayName": "Outdated format directive in boost::format",
          "enabled": true,
          "description": "A format string of boost::format contains a legacy printf-like code; type specifier is not taken into account"
        },
        {
          "shortName": "CppPrintfBadFormat",
          "displayName": "Invalid printf format specifier",
          "enabled": true,
          "description": "Format string contains an invalid printf format specifier"
        },
        {
          "shortName": "CppUnnamedNamespaceInHeaderFile",
          "displayName": "Unnamed namespace in a header file",
          "enabled": true,
          "description": "Unnamed namespaces should not be used in header files"
        },
        {
          "shortName": "CppMsExtNotInitializedStaticConstLocalVar",
          "displayName": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension.",
          "enabled": true,
          "description": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension."
        },
        {
          "shortName": "CppVirtualFunctionInFinalClass",
          "displayName": "Declaration of a non-overriding virtual function in a final or sealed class",
          "enabled": true,
          "description": "A non-overriding virtual function in a final or sealed class cannot be overridden, so the 'virtual' specifier is redundant"
        },
        {
          "shortName": "CppInitializedValueIsAlwaysRewritten",
          "displayName": "Declarator is reassigned in all paths before being read",
          "enabled": true,
          "description": "A declarator is reassigned in all paths before being read"
        },
        {
          "shortName": "CppSpecialFunctionWithoutNoexceptSpecification",
          "displayName": "Special function without noexcept specification",
          "enabled": true,
          "description": "Special function does not have any noexcept specification"
        },
        {
          "shortName": "CppStaticDataMemberInUnnamedStruct",
          "displayName": "Static data member in an anonymous class is not allowed by the C++ standard",
          "enabled": true,
          "description": "Static data members are not allowed in anonymous classes"
        },
        {
          "shortName": "CppLambdaCaptureNeverUsed",
          "displayName": "Lambda capture is never used",
          "enabled": true,
          "description": "A lambda capture is never used"
        },
        {
          "shortName": "CppMsExtAddressOfClassRValue",
          "displayName": "Taking an address of class r-value is non-standard Microsoft C++ extension",
          "enabled": true,
          "description": "Taking an address of class r-value is non-standard Microsoft C++ extension"
        },
        {
          "shortName": "CppDeclarationHidesUncapturedLocal",
          "displayName": "Hiding an uncaptured local declaration",
          "enabled": true,
          "description": "A local declaration inside a lambda hides an uncaptured local declaration"
        },
        {
          "shortName": "CppForwardEnumDeclarationWithoutUnderlyingType",
          "displayName": "Forward enum declaration without underlying type",
          "enabled": true,
          "description": "ISO C++ forbids forward declarations of an enum without an underlying type"
        },
        {
          "shortName": "CppEqualOperandsInBinaryExpression",
          "displayName": "Binary operator acts on equal operands",
          "enabled": true,
          "description": "Binary operator acts on equal operands"
        },
        {
          "shortName": "CppParameterNamesMismatch",
          "displayName": "Parameter names do not match",
          "enabled": true,
          "description": "Parameter names differ in different declarations of the same function"
        },
        {
          "shortName": "CppPolymorphicClassWithNonVirtualPublicDestructor",
          "displayName": "Polymorphic class with non-virtual public destructor",
          "enabled": true,
          "description": "A polymorphic class with a non-virtual public destructor"
        },
        {
          "shortName": "CppClassNeverUsed",
          "displayName": "Class is never used",
          "enabled": true,
          "description": "A class is never used"
        },
        {
          "shortName": "CppDeclaratorDisambiguatedAsFunction",
          "displayName": "Declarator disambiguated as a function declaration",
          "enabled": true,
          "description": "Declarator is disambiguated as a function declaration. Make sure a variable definition is not intended instead."
        },
        {
          "shortName": "CppLongFloat",
          "displayName": "'long' floats are not allowed by the C++ standard",
          "enabled": true,
          "description": "Declaration specifier 'long' cannot be combined with 'float'"
        },
        {
          "shortName": "CppPossiblyUninitializedMember",
          "displayName": "Possibly uninitialized class member",
          "enabled": true,
          "description": "Class constructor does not initialize a field explicitly or implicitly"
        },
        {
          "shortName": "CppPointerToIntegralConversion",
          "displayName": "Implicit pointer to integer conversion",
          "enabled": true,
          "description": "Implicit pointer to integer conversion"
        },
        {
          "shortName": "CDeclarationWithImplicitIntType",
          "displayName": "Type-specifier missing, defaults to int",
          "enabled": true,
          "description": "No type-specifier found in a declaration. Defaults to 'int'."
        },
        {
          "shortName": "CppStringLiteralToCharPointerConversion",
          "displayName": "String literal to char pointer conversion",
          "enabled": true,
          "description": "String literal to char pointer conversion"
        },
        {
          "shortName": "CppNotAllPathsReturnValue",
          "displayName": "Not all control paths return a value",
          "enabled": true,
          "description": "Not all control paths inside a function or a lambda return a value"
        },
        {
          "shortName": "CppReturnNoValueInNonVoidFunction",
          "displayName": "A function or a lambda with non-void return type should return a value",
          "enabled": true,
          "description": "A function or a lambda with non-void return type should return a value"
        },
        {
          "shortName": "CppLocalVariableWithNonTrivialDtorIsNeverUsed",
          "displayName": "Local variable is never used, but may have side-effects in its destructor",
          "enabled": false,
          "description": "Local variable is never used, but may have side-effects in its destructor"
        },
        {
          "shortName": "CppAbstractFinalClass",
          "displayName": "Abstract final class",
          "enabled": true,
          "description": "An abstract final class is marked as 'final' or 'sealed'"
        },
        {
          "shortName": "CppUsingResultOfAssignmentAsCondition",
          "displayName": "Result of assignment is used as condition",
          "enabled": true,
          "description": "Result of assignment is used as condition"
        },
        {
          "shortName": "CppNoDiscardExpression",
          "displayName": "Result of nodiscard function is not used",
          "enabled": true,
          "description": "Result of nodiscard function is not used"
        },
        {
          "shortName": "CppNodiscardFunctionWithoutReturnValue",
          "displayName": "[[nodiscard]] cannot be applied to functions without a return value",
          "enabled": true,
          "description": "The \\[\\[nodiscard\\]\\] attribute cannot be applied to functions without a return value"
        },
        {
          "shortName": "CppEntityUsedOnlyInUnevaluatedContext",
          "displayName": "Declarator is used only in unevaluated context",
          "enabled": true,
          "description": "A declarator is used only in unevaluated context"
        },
        {
          "shortName": "CppPrintfMissedArg",
          "displayName": "Not enough arguments in a call to printf",
          "enabled": true,
          "description": "Not enough arguments in a call to printf. Some format directives do not have matching arguments."
        },
        {
          "shortName": "CppEntityAssignedButNoRead",
          "displayName": "Declarator is only assigned but never accessed",
          "enabled": true,
          "description": "A declarator is only assigned but never accessed"
        },
        {
          "shortName": "CppAbstractVirtualFunctionCallInCtor",
          "displayName": "Call to a virtual function inside a constructor/destructor will result in a pure virtual function call",
          "enabled": true,
          "description": "Calls to pure virtual functions inside constructors and destructors will result in runtime errors"
        },
        {
          "shortName": "CppDereferenceOperatorLimitExceeded",
          "displayName": "Dereference operator limit is exceeded",
          "enabled": true,
          "description": "Dereference operator limit is exceeded"
        },
        {
          "shortName": "CppDefaultedSpecialMemberFunctionIsImplicitlyDeleted",
          "displayName": "Defaulted special member function is implicitly deleted",
          "enabled": true,
          "description": "Explicitly defaulted special member function is implicitly deleted"
        },
        {
          "shortName": "CppPossiblyUnintendedObjectSlicing",
          "displayName": "Possibly unintended object slicing",
          "enabled": true,
          "description": "Possibly unintended object slicing"
        },
        {
          "shortName": "CppUnsignedZeroComparison",
          "displayName": "Comparison of unsigned expression with 0",
          "enabled": true,
          "description": "Comparison of unsigned expression with 0"
        },
        {
          "shortName": "CppExpressionWithoutSideEffects",
          "displayName": "Possibly erroneous expression without side-effects",
          "enabled": true,
          "description": "Possibly erroneous expression without side-effects"
        },
        {
          "shortName": "CppDependentTypeWithoutTypenameKeyword",
          "displayName": "Dependent type without 'typename' keyword",
          "enabled": true,
          "description": "Dependent type without 'typename' keyword"
        },
        {
          "shortName": "Blazor.EditorRequired",
          "displayName": "Missed value for required attribute",
          "enabled": true,
          "description": "Missed value for required attribute"
        },
        {
          "shortName": "Xaml.XKeyAttributeDisallowed",
          "displayName": "x:Key is allowed for resources and dictionary elements only",
          "enabled": true,
          "description": "x:Key is allowed for resources and dictionary elements only"
        },
        {
          "shortName": "Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting",
          "displayName": "DeviceFamily-specific view type name does not match generic type name",
          "enabled": true,
          "description": "DeviceFamily-specific view type name does not match generic type name"
        },
        {
          "shortName": "Xaml.XamlRelativeSourceDefaultModeWarningHighlighting",
          "displayName": "RelativeSourceMode is not set explicitly",
          "enabled": true,
          "description": "Default RelativeSourceMode value is platform-specific, explicit specification is required to process RelativeSource usage unambiguously"
        },
        {
          "shortName": "Xaml.RedundantXamarinFormsClassDeclaration",
          "displayName": "Resource cannot be accessed by class name because of x:Key attribute",
          "enabled": true,
          "description": "Resource cannot be accessed by class name because of x:Key attribute"
        },
        {
          "shortName": "Xaml.PathError",
          "displayName": "Path error",
          "enabled": true,
          "description": "Path error"
        },
        {
          "shortName": "Xaml.IndexOutOfGridDefinition",
          "displayName": "Grid element column/row index is out of grid definition range",
          "enabled": true,
          "description": "Grid element column/row index is out of grid definition range"
        },
        {
          "shortName": "Xaml.StyleInvalidTargetType",
          "displayName": "Style target type is not convertible to base type",
          "enabled": true,
          "description": "Style declaration target type is not convertible to style base type"
        },
        {
          "shortName": "Xaml.MissingGridIndex",
          "displayName": "Missing grid column/row setter for non-first child",
          "enabled": true,
          "description": "Missing grid column/row setter for non-first child inside non-trivial grid"
        },
        {
          "shortName": "Xaml.XamlUnknownDeviceFamilyTypeHighlighting",
          "displayName": "Unknown DeviceFamily",
          "enabled": true,
          "description": "Unknown DeviceFamily"
        },
        {
          "shortName": "Xaml.UnexpectedElement",
          "displayName": "Unexpected element error",
          "enabled": true,
          "description": "Unexpected element error"
        },
        {
          "shortName": "Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting",
          "displayName": "Duplicate device family view",
          "enabled": true,
          "description": "Duplicate device family view"
        },
        {
          "shortName": "Xaml.DuplicateStyleSetter",
          "displayName": "Duplicate style property/event setter",
          "enabled": true,
          "description": "Duplicate style property/event setter"
        },
        {
          "shortName": "Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting",
          "displayName": "Types in x:DataType and BindingContext mismatch",
          "enabled": true,
          "description": "Types in x:DataType and BindingContext are different"
        },
        {
          "shortName": "Xaml.PossibleNullReferenceException",
          "displayName": "Possible 'null' value in the path of binding without fallback value",
          "enabled": true,
          "description": "Dereferencing an expression which can have 'null' value in binding without specified fallback value"
        },
        {
          "shortName": "Xaml.UnexpectedTextToken",
          "displayName": "Unexpected text token error",
          "enabled": true,
          "description": "Unexpected text token error"
        },
        {
          "shortName": "Xaml.LanguageLevel",
          "displayName": "XAML language level error",
          "enabled": true,
          "description": "XAML 2009 language construct is not allowed here"
        },
        {
          "shortName": "Html.AttributeValueNotResolved",
          "displayName": "Unknown attribute value",
          "enabled": false,
          "description": "Unknown attribute value in HTML and related technologies"
        },
        {
          "shortName": "Html.TagShouldNotBeSelfClosed",
          "displayName": "Wrong self-closed tag",
          "enabled": false,
          "description": "Wrong self-closed tag in HTML and related technologies"
        },
        {
          "shortName": "Html.EventNotResolved",
          "displayName": "Unknown event",
          "enabled": false,
          "description": "Unknown event in HTML and related technologies"
        },
        {
          "shortName": "OtherTagsInsideScript1",
          "displayName": "Script tag errors (other tags inside <script> - possibly unclosed <script>)",
          "enabled": false,
          "description": "\\<(\\[)script(\\]) $a1$\\>$c1$"
        },
        {
          "shortName": "OtherTagsInsideScript2",
          "displayName": "Script tag errors (other tags inside <script> - possibly unclosed <script>)",
          "enabled": false,
          "description": "\\<(\\[)script(\\]) type=\"$v1$\" $a1$\\>$c1$"
        },
        {
          "shortName": "Html.TagShouldBeSelfClosed",
          "displayName": "Wrong closed tag",
          "enabled": false,
          "description": "Wrong closed tag in HTML and related technologies"
        },
        {
          "shortName": "Html.TagNotResolved",
          "displayName": "Unknown tag",
          "enabled": false,
          "description": "Unknown tag in HTML and related technologies"
        },
        {
          "shortName": "Html.IdDuplication",
          "displayName": "Ids duplication",
          "enabled": false,
          "description": "Duplication of id on page"
        },
        {
          "shortName": "Html.PathError",
          "displayName": "Path error",
          "enabled": false,
          "description": "Path error"
        },
        {
          "shortName": "Html.DeadCode",
          "displayName": "HTML Dead Code",
          "enabled": false,
          "description": "HTML Dead Code"
        },
        {
          "shortName": "Html.TagNotClosed",
          "displayName": "Unclosed tag",
          "enabled": false,
          "description": "Unclosed tag in HTML and related technologies"
        },
        {
          "shortName": "Html.AttributesQuotes",
          "displayName": "Wrong attribute quotes",
          "enabled": false,
          "description": "Attribute quotes are missing or differ from settings"
        },
        {
          "shortName": "ScriptTagHasBothSrcAndContentAttributes",
          "displayName": "Script tag errors (<script> with both src and content)",
          "enabled": false,
          "description": "\\<(\\[)script(\\]) src=\"...\" ...\\>$content$"
        },
        {
          "shortName": "Html.IdNotResolved",
          "displayName": "Unknown ID",
          "enabled": false,
          "description": "Link to unknown anchor (no element with such ID or name)"
        },
        {
          "shortName": "Html.Obsolete",
          "displayName": "Obsolete or nonstandard element",
          "enabled": false,
          "description": "Obsolete or nonstandard element"
        },
        {
          "shortName": "Html.Warning",
          "displayName": "HTML Warning",
          "enabled": false,
          "description": "HTML Warning"
        },
        {
          "shortName": "OtherTagsInsideUnclosedScript",
          "displayName": "Script tag errors (unclosed <script> with other tags inside)",
          "enabled": false,
          "description": "\\<(\\[)script(\\]) $a1$\\>$c1$"
        },
        {
          "shortName": "Html.AttributeNotResolved",
          "displayName": "Unknown attribute",
          "enabled": false,
          "description": "Unknown attribute in HTML and related technologies"
        },
        {
          "shortName": "Asp.Entity",
          "displayName": "Unknown HTML entity",
          "enabled": false,
          "description": "Unknown HTML entity"
        },
        {
          "shortName": "UnclosedScript",
          "displayName": "Script tag errors (unclosed <script>)",
          "enabled": false,
          "description": "\\<(\\[)script(\\]) $a1$\\>$c1$"
        },
        {
          "shortName": "NotAssignedOutParameter",
          "displayName": "'out' parameter is not assigned upon exit",
          "enabled": true,
          "description": "'out' parameter is not assigned upon exit"
        },
        {
          "shortName": "PossibleWriteToMe",
          "displayName": "Possible write to 'Me'",
          "enabled": true,
          "description": "Possible write to 'Me'."
        },
        {
          "shortName": "LongLiteralEndingLowerL",
          "displayName": "The 'l' suffix is easily confused with the digit '1'",
          "enabled": true,
          "description": "The 'l' suffix is easily confused with the digit '1', use 'L' for clarity"
        },
        {
          "shortName": "Asp.Warning",
          "displayName": "ASP.NET Warning",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Mvc.AreaNotResolved",
          "displayName": "MVC (unknown area)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC Area"
        },
        {
          "shortName": "Asp.ResolveWarning",
          "displayName": "ASP.NET Resolve Warning",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "AspOdsMethodReferenceResolveError",
          "displayName": "Object data source method resolve problem",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Asp.NotResolved",
          "displayName": "Unknown symbol",
          "enabled": true,
          "description": "Unknown symbol in ASP.NET and related technologies"
        },
        {
          "shortName": "Mvc.ViewNotResolved",
          "displayName": "MVC (unknown view)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC View [Learn more...](https://www.jetbrains.com/help/rider/Mvc.ViewNotResolved.html)"
        },
        {
          "shortName": "Asp.SkinNotResolved",
          "displayName": "Unknown skin",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Asp.InvalidControlType",
          "displayName": "Invalid control type",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Mvc.TemplateNotResolved",
          "displayName": "MVC (unknown template)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC Template"
        },
        {
          "shortName": "Mvc.MasterpageNotResolved",
          "displayName": "MVC (unknown masterpage)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC Masterpage"
        },
        {
          "shortName": "Asp.Image",
          "displayName": "Wrong image size",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Asp.ThemeNotResolved",
          "displayName": "Unknown theme",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Mvc.PartialViewNotResolved",
          "displayName": "MVC (unknown partial view)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC Partial View"
        },
        {
          "shortName": "Asp.ContentPlaceholderNotResolved",
          "displayName": "Unknown content placeholder",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "Mvc.ActionNotResolved",
          "displayName": "MVC (unknown action)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC Action"
        },
        {
          "shortName": "Asp.DeadCode",
          "displayName": "ASP.NET Dead Code",
          "enabled": true,
          "description": "[Learn more...](https://www.jetbrains.com/help/rider/Asp.DeadCode.html)"
        },
        {
          "shortName": "Mvc.InvalidModelType",
          "displayName": "MVC (mismatch Model Type)",
          "enabled": true,
          "description": "Mismatch ASP.NET MVC Model Type"
        },
        {
          "shortName": "Mvc.ViewComponentNotResolved",
          "displayName": "MVC (unknown view component)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC View Component"
        },
        {
          "shortName": "Mvc.ControllerNotResolved",
          "displayName": "MVC (unknown controller)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC Controller"
        },
        {
          "shortName": "Asp.CustomPageParserFilterType",
          "displayName": "Unsupported pageParserFilterType",
          "enabled": true,
          "description": "ReSharper does not support pageParserFilterType specified in web.config"
        },
        {
          "shortName": "Mvc.ViewComponentViewNotResolved",
          "displayName": "MVC (unknown view component view)",
          "enabled": true,
          "description": "Unknown ASP.NET MVC View Component View"
        },
        {
          "shortName": "NotOverriddenInSpecificCulture",
          "displayName": "Resource is not overridden in specific culture",
          "enabled": true,
          "description": "Resource is not overridden in one or more specific cultures [Learn more...](https://www.jetbrains.com/help/rider/NotOverriddenInSpecificCulture.html)"
        },
        {
          "shortName": "DuplicateResource",
          "displayName": "Duplicate resource name",
          "enabled": true,
          "description": "Resource file contains two or more items with identical names [Learn more...](https://www.jetbrains.com/help/rider/DuplicateResource.html)"
        },
        {
          "shortName": "OverriddenWithEmptyValue",
          "displayName": "Resource overrides base resource with empty value",
          "enabled": true,
          "description": "Base resource contains a non-empty value while this resource is empty"
        },
        {
          "shortName": "NotDeclaredInParentCulture",
          "displayName": "Resource is not declared in base culture",
          "enabled": true,
          "description": "Resource is not declared in base culture [Learn more...](https://www.jetbrains.com/help/rider/NotDeclaredInParentCulture.html)"
        },
        {
          "shortName": "FormatStringPlaceholdersMismatch",
          "displayName": "Format string placeholders mismatch",
          "enabled": true,
          "description": "Format string placeholders do not match between cultures"
        },
        {
          "shortName": "ResxNotResolved",
          "displayName": "Cannot resolve symbol",
          "enabled": true,
          "description": "Cannot resolve symbol."
        },
        {
          "shortName": "LocalizableElement",
          "displayName": "Element is localizable",
          "enabled": true,
          "description": "You can move this element to a resource [Learn more...](https://www.jetbrains.com/help/rider/LocalizableElement.html)"
        },
        {
          "shortName": "InvalidValueType",
          "displayName": "Resource value type is invalid",
          "enabled": true,
          "description": "Resource in base culture has another value type"
        },
        {
          "shortName": "WebConfig.ModuleQualificationResolve",
          "displayName": "Module qualification required",
          "enabled": true,
          "description": "Module qualification required for type resolution"
        },
        {
          "shortName": "WebConfig.TypeNotResolved",
          "displayName": "Cannot resolve symbol",
          "enabled": true,
          "description": "Cannot resolve symbol"
        },
        {
          "shortName": "WebConfig.ModuleNotResolved",
          "displayName": "Cannot resolve module",
          "enabled": true,
          "description": "Cannot resolve module"
        },
        {
          "shortName": "WebConfig.WrongModule",
          "displayName": "Wrong module",
          "enabled": true,
          "description": "Wrong module"
        },
        {
          "shortName": "WebConfig.WebConfigPathWarning",
          "displayName": "Referenced path cannot be found in the website",
          "enabled": true,
          "description": "Referenced path cannot be found in the website"
        },
        {
          "shortName": "Asxx.PathError",
          "displayName": "Path error",
          "enabled": true,
          "description": "Path error"
        },
        {
          "shortName": "AngularHtml.Banana",
          "displayName": "'Banana in a box' [()] violation in Angular 2 binding",
          "enabled": false,
          "description": "Angular 2 requires parentheses inside brackets for two-direction bindings"
        },
        {
          "shortName": "Razor.LayoutNotResolved",
          "displayName": "Unknown Razor layout",
          "enabled": true,
          "description": "Unknown Razor layout"
        },
        {
          "shortName": "Razor.SectionNotResolved",
          "displayName": "Unknown Razor section",
          "enabled": true,
          "description": "Unknown Razor section"
        }
      ]
    },
    {
      "name": "Clang Diagnostics",
      "inspections": [
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14CompatPedantic",
          "displayName": "c++98-c++11-c++14-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-c++14-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumConversion",
          "displayName": "enum-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wenum-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompareDistinctPointerTypes",
          "displayName": "compare-distinct-pointer-types clang diagnostic",
          "enabled": true,
          "description": "-Wcompare-distinct-pointer-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreOpenmp51Compat",
          "displayName": "pre-openmp-51-compat clang diagnostic",
          "enabled": false,
          "description": "-Wpre-openmp-51-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-openmp-51-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatiblePointerTypes",
          "displayName": "incompatible-pointer-types clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-pointer-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInitializerOverrides",
          "displayName": "initializer-overrides clang diagnostic",
          "enabled": true,
          "description": "-Winitializer-overrides clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winitializer-overrides)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStdlibcxxNotFound",
          "displayName": "stdlibcxx-not-found clang diagnostic",
          "enabled": false,
          "description": "-Wstdlibcxx-not-found clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstdlibcxx-not-found)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare",
          "displayName": "tautological-unsigned-enum-zero-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-unsigned-enum-zero-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-enum-zero-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTargetClonesMixedSpecifiers",
          "displayName": "target-clones-mixed-specifiers clang diagnostic",
          "enabled": false,
          "description": "-Wtarget-clones-mixed-specifiers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtarget-clones-mixed-specifiers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExists",
          "displayName": "microsoft-exists clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-exists clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exists)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11CompatPedantic",
          "displayName": "c++98-c++11-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic",
          "displayName": "ignored-pragma-intrinsic clang diagnostic",
          "enabled": true,
          "description": "-Wignored-pragma-intrinsic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-intrinsic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVarargs",
          "displayName": "varargs clang diagnostic",
          "enabled": true,
          "description": "-Wvarargs clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvarargs)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerArith",
          "displayName": "pointer-arith clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-arith clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-arith)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMaxUnsignedZero",
          "displayName": "max-unsigned-zero clang diagnostic",
          "enabled": true,
          "description": "-Wmax-unsigned-zero clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-unsigned-zero)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSpirvCompat",
          "displayName": "spirv-compat clang diagnostic",
          "enabled": false,
          "description": "-Wspirv-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wspirv-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitConstIntFloatConversion",
          "displayName": "implicit-const-int-float-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-const-int-float-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-const-int-float-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowUncapturedLocal",
          "displayName": "shadow-uncaptured-local clang diagnostic",
          "enabled": false,
          "description": "-Wshadow-uncaptured-local clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-uncaptured-local)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuComplexInteger",
          "displayName": "gnu-complex-integer clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-complex-integer clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-complex-integer)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeallocInCategory",
          "displayName": "dealloc-in-category clang diagnostic",
          "enabled": true,
          "description": "-Wdealloc-in-category clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdealloc-in-category)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20Compat",
          "displayName": "c++20-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++20-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteIncomplete",
          "displayName": "delete-incomplete clang diagnostic",
          "enabled": true,
          "description": "-Wdelete-incomplete clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-incomplete)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyAnalysis",
          "displayName": "thread-safety-analysis clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-analysis clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-analysis)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14CompatPedantic",
          "displayName": "c++14-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++14-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMacroRedefined",
          "displayName": "macro-redefined clang diagnostic",
          "enabled": true,
          "description": "-Wmacro-redefined clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmacro-redefined)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRetainedLanguageLinkage",
          "displayName": "retained-language-linkage clang diagnostic",
          "enabled": true,
          "description": "-Wretained-language-linkage clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wretained-language-linkage)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticKeywordMacro",
          "displayName": "keyword-macro clang diagnostic",
          "enabled": true,
          "description": "-Wkeyword-macro clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-macro)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReadonlyIboutletProperty",
          "displayName": "readonly-iboutlet-property clang diagnostic",
          "enabled": true,
          "description": "-Wreadonly-iboutlet-property clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreadonly-iboutlet-property)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGccCompat",
          "displayName": "gcc-compat clang diagnostic",
          "enabled": false,
          "description": "-Wgcc-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgcc-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMemsizeComparison",
          "displayName": "memsize-comparison clang diagnostic",
          "enabled": true,
          "description": "-Wmemsize-comparison clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmemsize-comparison)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBackslashNewlineEscape",
          "displayName": "backslash-newline-escape clang diagnostic",
          "enabled": true,
          "description": "-Wbackslash-newline-escape clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbackslash-newline-escape)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmp51Extensions",
          "displayName": "openmp-51-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wopenmp-51-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-51-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrictPrototypes",
          "displayName": "strict-prototypes clang diagnostic",
          "enabled": true,
          "description": "-Wstrict-prototypes clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-prototypes)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSingleBitBitfieldConstantConversion",
          "displayName": "single-bit-bitfield-constant-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wsingle-bit-bitfield-constant-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsingle-bit-bitfield-constant-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReceiverExpr",
          "displayName": "receiver-expr clang diagnostic",
          "enabled": true,
          "description": "-Wreceiver-expr clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreceiver-expr)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsafeBufferUsage",
          "displayName": "unsafe-buffer-usage clang diagnostic",
          "enabled": false,
          "description": "-Wunsafe-buffer-usage clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsafe-buffer-usage)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrictSelectorMatch",
          "displayName": "strict-selector-match clang diagnostic",
          "enabled": true,
          "description": "-Wstrict-selector-match clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-selector-match)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullableToNonnullConversion",
          "displayName": "nullable-to-nonnull-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wnullable-to-nonnull-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullable-to-nonnull-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCommentPaste",
          "displayName": "microsoft-comment-paste clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-comment-paste clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-comment-paste)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Compat",
          "displayName": "c++98-c++11-c++14-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-c++14-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp14CompatPedantic",
          "displayName": "pre-c++14-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++14-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedCopy",
          "displayName": "deprecated-copy-with-user-provided-copy clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-copy-with-user-provided-copy clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-copy)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicAccess",
          "displayName": "atomic-access clang diagnostic",
          "enabled": true,
          "description": "-Watomic-access clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-access)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalTypeLimitCompare",
          "displayName": "tautological-type-limit-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-type-limit-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-type-limit-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftUnionMemberReference",
          "displayName": "microsoft-union-member-reference clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-union-member-reference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-union-member-reference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonModularIncludeInModule",
          "displayName": "non-modular-include-in-module clang diagnostic",
          "enabled": true,
          "description": "-Wnon-modular-include-in-module clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-modular-include-in-module)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleMsStruct",
          "displayName": "incompatible-ms-struct clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-ms-struct clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-ms-struct)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerIntegerCompare",
          "displayName": "pointer-integer-compare clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-integer-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-integer-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypesStrict",
          "displayName": "incompatible-function-pointer-types-strict clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-function-pointer-types-strict clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-function-pointer-types-strict)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaClangAttribute",
          "displayName": "pragma-clang-attribute clang diagnostic",
          "enabled": true,
          "description": "-Wpragma-clang-attribute clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-clang-attribute)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExternInitializer",
          "displayName": "extern-initializer clang diagnostic",
          "enabled": true,
          "description": "-Wextern-initializer clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-initializer)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDirectIvarAccess",
          "displayName": "direct-ivar-access clang diagnostic",
          "enabled": true,
          "description": "-Wdirect-ivar-access clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdirect-ivar-access)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedRegister",
          "displayName": "deprecated-register clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-register clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-register)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedNewDelete",
          "displayName": "mismatched-new-delete clang diagnostic",
          "enabled": true,
          "description": "-Wmismatched-new-delete clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-new-delete)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedTargetOpt",
          "displayName": "unsupported-target-opt clang diagnostic",
          "enabled": false,
          "description": "-Wunsupported-target-opt clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-target-opt)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalConstantInRangeCompare",
          "displayName": "tautological-constant-in-range-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-constant-in-range-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-in-range-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownEscapeSequence",
          "displayName": "unknown-escape-sequence clang diagnostic",
          "enabled": true,
          "description": "-Wunknown-escape-sequence clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-escape-sequence)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatSecurity",
          "displayName": "format-security clang diagnostic",
          "enabled": true,
          "description": "-Wformat-security clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-security)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPessimizingMove",
          "displayName": "pessimizing-move clang diagnostic",
          "enabled": true,
          "description": "-Wpessimizing-move clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpessimizing-move)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes",
          "displayName": "incompatible-function-pointer-types clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-function-pointer-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-function-pointer-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteNonAbstractNonVirtualDtor",
          "displayName": "delete-non-abstract-non-virtual-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wdelete-non-abstract-non-virtual-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-abstract-non-virtual-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefPrefix",
          "displayName": "undef-prefix clang diagnostic",
          "enabled": true,
          "description": "-Wundef-prefix clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundef-prefix)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl",
          "displayName": "dllexport-explicit-instantiation-decl clang diagnostic",
          "enabled": true,
          "description": "-Wdllexport-explicit-instantiation-decl clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdllexport-explicit-instantiation-decl)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFourCharConstants",
          "displayName": "four-char-constants clang diagnostic",
          "enabled": true,
          "description": "-Wfour-char-constants clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfour-char-constants)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuPointerArith",
          "displayName": "gnu-pointer-arith clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-pointer-arith clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-pointer-arith)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidPpToken",
          "displayName": "invalid-pp-token clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-pp-token clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-pp-token)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuBinaryLiteral",
          "displayName": "gnu-binary-literal clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-binary-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-binary-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnneededInternalDeclaration",
          "displayName": "unneeded-internal-declaration clang diagnostic",
          "enabled": true,
          "description": "-Wunneeded-internal-declaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-internal-declaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDangling",
          "displayName": "dangling clang diagnostic",
          "enabled": true,
          "description": "-Wdangling clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWeakVtables",
          "displayName": "weak-vtables clang diagnostic",
          "enabled": true,
          "description": "-Wweak-vtables clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wweak-vtables)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingNoreturn",
          "displayName": "missing-noreturn clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-noreturn clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noreturn)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedButSetParameter",
          "displayName": "unused-but-set-parameter clang diagnostic",
          "enabled": false,
          "description": "-Wunused-but-set-parameter clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-parameter)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowFieldInConstructorModified",
          "displayName": "shadow-field-in-constructor-modified clang diagnostic",
          "enabled": false,
          "description": "-Wshadow-field-in-constructor-modified clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor-modified)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonportableSystemIncludePath",
          "displayName": "nonportable-system-include-path clang diagnostic",
          "enabled": false,
          "description": "-Wnonportable-system-include-path clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-system-include-path)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaOnceOutsideHeader",
          "displayName": "pragma-once-outside-header clang diagnostic",
          "enabled": true,
          "description": "-Wpragma-once-outside-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-once-outside-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCoroNonAlignedAllocationFunciton",
          "displayName": "coro-non-aligned-allocation-funciton clang diagnostic",
          "enabled": true,
          "description": "-Wcoro-non-aligned-allocation-funciton clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcoro-non-aligned-allocation-funciton)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicAlignment",
          "displayName": "atomic-alignment clang diagnostic",
          "enabled": true,
          "description": "-Watomic-alignment clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-alignment)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingExceptionSpec",
          "displayName": "missing-exception-spec clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-exception-spec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-exception-spec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPoisonSystemDirectories",
          "displayName": "poison-system-directories clang diagnostic",
          "enabled": true,
          "description": "-Wpoison-system-directories clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpoison-system-directories)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedLambdaCapture",
          "displayName": "unused-lambda-capture clang diagnostic",
          "enabled": false,
          "description": "-Wunused-lambda-capture clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-lambda-capture)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormat",
          "displayName": "format clang diagnostic",
          "enabled": true,
          "description": "-Wformat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredReferenceQualifiers",
          "displayName": "ignored-reference-qualifiers clang diagnostic",
          "enabled": true,
          "description": "-Wignored-reference-qualifiers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-reference-qualifiers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUsedButMarkedUnused",
          "displayName": "used-but-marked-unused clang diagnostic",
          "enabled": true,
          "description": "-Wused-but-marked-unused clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wused-but-marked-unused)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverloadedShiftOpParentheses",
          "displayName": "overloaded-shift-op-parentheses clang diagnostic",
          "enabled": true,
          "description": "-Woverloaded-shift-op-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule",
          "displayName": "non-modular-include-in-framework-module clang diagnostic",
          "enabled": true,
          "description": "-Wnon-modular-include-in-framework-module clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-modular-include-in-framework-module)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDefaultedFunctionDeleted",
          "displayName": "defaulted-function-deleted clang diagnostic",
          "enabled": false,
          "description": "-Wdefaulted-function-deleted clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdefaulted-function-deleted)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOutOfScopeFunction",
          "displayName": "out-of-scope-function clang diagnostic",
          "enabled": true,
          "description": "-Wout-of-scope-function clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-scope-function)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleConflict",
          "displayName": "module-conflict clang diagnostic",
          "enabled": true,
          "description": "-Wmodule-conflict clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-conflict)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConfigMacros",
          "displayName": "config-macros clang diagnostic",
          "enabled": true,
          "description": "-Wconfig-macros clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconfig-macros)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationUnknownCommand",
          "displayName": "documentation-unknown-command clang diagnostic",
          "enabled": false,
          "description": "-Wdocumentation-unknown-command clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-unknown-command)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateMethodArg",
          "displayName": "duplicate-method-arg clang diagnostic",
          "enabled": true,
          "description": "-Wduplicate-method-arg clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-arg)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRegister",
          "displayName": "register clang diagnostic",
          "enabled": true,
          "description": "-Wregister clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wregister)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuConditionalOmittedOperand",
          "displayName": "gnu-conditional-omitted-operand clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-conditional-omitted-operand clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-conditional-omitted-operand)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticClassVarargs",
          "displayName": "class-varargs clang diagnostic",
          "enabled": true,
          "description": "-Wclass-varargs clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-varargs)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastFunctionType",
          "displayName": "cast-function-type clang diagnostic",
          "enabled": true,
          "description": "-Wcast-function-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingPrototypes",
          "displayName": "missing-prototypes clang diagnostic",
          "enabled": false,
          "description": "-Wmissing-prototypes clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototypes)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftTemplate",
          "displayName": "microsoft-template clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsequenced",
          "displayName": "unsequenced clang diagnostic",
          "enabled": true,
          "description": "-Wunsequenced clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsequenced)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateDeclSpecifier",
          "displayName": "duplicate-decl-specifier clang diagnostic",
          "enabled": true,
          "description": "-Wduplicate-decl-specifier clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-decl-specifier)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIndependentClassAttribute",
          "displayName": "IndependentClass-attribute clang diagnostic",
          "enabled": true,
          "description": "-WIndependentClass-attribute clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wIndependentClass-attribute)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignedEnumBitfield",
          "displayName": "signed-enum-bitfield clang diagnostic",
          "enabled": true,
          "description": "-Wsigned-enum-bitfield clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsigned-enum-bitfield)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftSignOverflow",
          "displayName": "shift-sign-overflow clang diagnostic",
          "enabled": true,
          "description": "-Wshift-sign-overflow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-sign-overflow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowFieldInConstructor",
          "displayName": "shadow-field-in-constructor clang diagnostic",
          "enabled": false,
          "description": "-Wshadow-field-in-constructor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaPack",
          "displayName": "pragma-pack clang diagnostic",
          "enabled": true,
          "description": "-Wpragma-pack clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedType",
          "displayName": "deprecated-type clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringConversion",
          "displayName": "string-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wstring-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedDeclarations",
          "displayName": "deprecated-declarations clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-declarations clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-declarations)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement",
          "displayName": "unreachable-code-loop-increment clang diagnostic",
          "enabled": true,
          "description": "-Wunreachable-code-loop-increment clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-loop-increment)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuIncludeNext",
          "displayName": "gnu-include-next clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-include-next clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-include-next)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmbeddedDirective",
          "displayName": "embedded-directive clang diagnostic",
          "enabled": true,
          "description": "-Wembedded-directive clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wembedded-directive)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMalformedWarningCheck",
          "displayName": "malformed-warning-check clang diagnostic",
          "enabled": true,
          "description": "-Wmalformed-warning-check clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmalformed-warning-check)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedAltivecSrcCompat",
          "displayName": "deprecated-altivec-src-compat clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-altivec-src-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-altivec-src-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraSemiStmt",
          "displayName": "extra-semi-stmt clang diagnostic",
          "enabled": true,
          "description": "-Wextra-semi-stmt clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi-stmt)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedConstVariable",
          "displayName": "unused-const-variable clang diagnostic",
          "enabled": true,
          "description": "-Wunused-const-variable clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-const-variable)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDllAttributeOnRedeclaration",
          "displayName": "dll-attribute-on-redeclaration clang diagnostic",
          "enabled": true,
          "description": "-Wdll-attribute-on-redeclaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdll-attribute-on-redeclaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcPerformSelectorLeaks",
          "displayName": "arc-performSelector-leaks clang diagnostic",
          "enabled": true,
          "description": "-Warc-performSelector-leaks clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-performSelector-leaks)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAnonEnumEnumConversion",
          "displayName": "anon-enum-enum-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wanon-enum-enum-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wanon-enum-enum-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteUmbrella",
          "displayName": "incomplete-umbrella clang diagnostic",
          "enabled": true,
          "description": "-Wincomplete-umbrella clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-umbrella)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopy",
          "displayName": "deprecated-copy clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-copy clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDelegatingCtorCycles",
          "displayName": "delegating-ctor-cycles clang diagnostic",
          "enabled": true,
          "description": "-Wdelegating-ctor-cycles clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelegating-ctor-cycles)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompoundTokenSplitBySpace",
          "displayName": "compound-token-split-by-space clang diagnostic",
          "enabled": true,
          "description": "-Wcompound-token-split-by-space clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-space)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAbstractFinalClass",
          "displayName": "abstract-final-class clang diagnostic",
          "enabled": false,
          "description": "-Wabstract-final-class clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wabstract-final-class)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLiteralRange",
          "displayName": "literal-range clang diagnostic",
          "enabled": true,
          "description": "-Wliteral-range clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-range)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticQualifiedVoidReturnType",
          "displayName": "qualified-void-return-type clang diagnostic",
          "enabled": true,
          "description": "-Wqualified-void-return-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wqualified-void-return-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticFloatInit",
          "displayName": "static-float-init clang diagnostic",
          "enabled": true,
          "description": "-Wstatic-float-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-float-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftMutableReference",
          "displayName": "microsoft-mutable-reference clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-mutable-reference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-mutable-reference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRewriteNotBool",
          "displayName": "rewrite-not-bool clang diagnostic",
          "enabled": true,
          "description": "-Wrewrite-not-bool clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrewrite-not-bool)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticKeywordCompat",
          "displayName": "keyword-compat clang diagnostic",
          "enabled": false,
          "description": "-Wkeyword-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntegerOverflow",
          "displayName": "integer-overflow clang diagnostic",
          "enabled": true,
          "description": "-Winteger-overflow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winteger-overflow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationDeprecatedSync",
          "displayName": "documentation-deprecated-sync clang diagnostic",
          "enabled": false,
          "description": "-Wdocumentation-deprecated-sync clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-deprecated-sync)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExpansionToDefined",
          "displayName": "expansion-to-defined clang diagnostic",
          "enabled": true,
          "description": "-Wexpansion-to-defined clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexpansion-to-defined)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDllimportStaticFieldDef",
          "displayName": "dllimport-static-field-def clang diagnostic",
          "enabled": true,
          "description": "-Wdllimport-static-field-def clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdllimport-static-field-def)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExportUsingDirective",
          "displayName": "export-using-directive clang diagnostic",
          "enabled": true,
          "description": "-Wexport-using-directive clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexport-using-directive)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Compat",
          "displayName": "c++98-c++11-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeBreak",
          "displayName": "unreachable-code-break clang diagnostic",
          "enabled": true,
          "description": "-Wunreachable-code-break clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-break)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidConstexpr",
          "displayName": "invalid-constexpr clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-constexpr clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-constexpr)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp2bCompat",
          "displayName": "pre-c++2b-compat clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++2b-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2b-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingDeclarations",
          "displayName": "missing-declarations clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-declarations clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-declarations)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCtadMaybeUnsupported",
          "displayName": "ctad-maybe-unsupported clang diagnostic",
          "enabled": false,
          "description": "-Wctad-maybe-unsupported clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wctad-maybe-unsupported)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInlineAsm",
          "displayName": "inline-asm clang diagnostic",
          "enabled": true,
          "description": "-Winline-asm clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-asm)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcRetainCycles",
          "displayName": "arc-retain-cycles clang diagnostic",
          "enabled": true,
          "description": "-Warc-retain-cycles clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-retain-cycles)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticXorUsedAsPow",
          "displayName": "xor-used-as-pow clang diagnostic",
          "enabled": true,
          "description": "-Wxor-used-as-pow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wxor-used-as-pow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftRedeclareStatic",
          "displayName": "microsoft-redeclare-static clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-redeclare-static clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-redeclare-static)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonPowerOfTwoAlignment",
          "displayName": "non-power-of-two-alignment clang diagnostic",
          "enabled": true,
          "description": "-Wnon-power-of-two-alignment clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-power-of-two-alignment)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDoublePromotion",
          "displayName": "double-promotion clang diagnostic",
          "enabled": false,
          "description": "-Wdouble-promotion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdouble-promotion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReorderCtor",
          "displayName": "reorder-ctor clang diagnostic",
          "enabled": true,
          "description": "-Wreorder-ctor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-ctor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedStaticAnalyzerFlag",
          "displayName": "deprecated-static-analyzer-flag clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-static-analyzer-flag clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-static-analyzer-flag)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowField",
          "displayName": "shadow-field clang diagnostic",
          "enabled": true,
          "description": "-Wshadow-field clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraQualification",
          "displayName": "extra-qualification clang diagnostic",
          "enabled": true,
          "description": "-Wextra-qualification clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-qualification)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoStorageClass",
          "displayName": "auto-storage-class clang diagnostic",
          "enabled": true,
          "description": "-Wauto-storage-class clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-storage-class)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteModule",
          "displayName": "incomplete-module clang diagnostic",
          "enabled": true,
          "description": "-Wincomplete-module clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-module)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStaticFloatInit",
          "displayName": "gnu-static-float-init clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-static-float-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-static-float-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAssume",
          "displayName": "assume clang diagnostic",
          "enabled": true,
          "description": "-Wassume clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wassume)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatUnnamedTypeTemplateArgs",
          "displayName": "c++98-compat-unnamed-type-template-args clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-compat-unnamed-type-template-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-unnamed-type-template-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20CompatPedantic",
          "displayName": "c++20-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++20-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPadded",
          "displayName": "padded clang diagnostic",
          "enabled": true,
          "description": "-Wpadded clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpadded)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLanguageExtensionToken",
          "displayName": "language-extension-token clang diagnostic",
          "enabled": true,
          "description": "-Wlanguage-extension-token clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlanguage-extension-token)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedButSetVariable",
          "displayName": "unused-but-set-variable clang diagnostic",
          "enabled": false,
          "description": "-Wunused-but-set-variable clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-variable)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalObjcBoolCompare",
          "displayName": "tautological-objc-bool-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-objc-bool-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-objc-bool-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMisspelledAssumption",
          "displayName": "misspelled-assumption clang diagnostic",
          "enabled": true,
          "description": "-Wmisspelled-assumption clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmisspelled-assumption)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftStaticAssert",
          "displayName": "microsoft-static-assert clang diagnostic",
          "enabled": false,
          "description": "-Wmicrosoft-static-assert clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-static-assert)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastQual",
          "displayName": "cast-qual clang diagnostic",
          "enabled": true,
          "description": "-Wcast-qual clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11Compat",
          "displayName": "c++11-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++11-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftEnumValue",
          "displayName": "microsoft-enum-value clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-enum-value clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-value)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShorten64To32",
          "displayName": "shorten-64-to-32 clang diagnostic",
          "enabled": true,
          "description": "-Wshorten-64-to-32 clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshorten-64-to-32)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticParenthesesEquality",
          "displayName": "parentheses-equality clang diagnostic",
          "enabled": false,
          "description": "-Wparentheses-equality clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses-equality)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfAssignField",
          "displayName": "self-assign-field clang diagnostic",
          "enabled": true,
          "description": "-Wself-assign-field clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-field)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConditionalTypeMismatch",
          "displayName": "conditional-type-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wconditional-type-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-type-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGlobalConstructors",
          "displayName": "global-constructors clang diagnostic",
          "enabled": false,
          "description": "-Wglobal-constructors clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wglobal-constructors)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPackedNonPod",
          "displayName": "packed-non-pod clang diagnostic",
          "enabled": true,
          "description": "-Wpacked-non-pod clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpacked-non-pod)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedMacroIdentifier",
          "displayName": "reserved-macro-identifier clang diagnostic",
          "enabled": true,
          "description": "-Wreserved-macro-identifier clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-macro-identifier)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumFloatConversion",
          "displayName": "deprecated-enum-float-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-enum-float-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-float-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRangeLoopBindReference",
          "displayName": "range-loop-bind-reference clang diagnostic",
          "enabled": true,
          "description": "-Wrange-loop-bind-reference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-bind-reference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverridingMethodMismatch",
          "displayName": "overriding-method-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Woverriding-method-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverriding-method-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedFriend",
          "displayName": "unsupported-friend clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-friend clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-friend)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumTooLarge",
          "displayName": "enum-too-large clang diagnostic",
          "enabled": true,
          "description": "-Wenum-too-large clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-too-large)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProfileInstrUnprofiled",
          "displayName": "profile-instr-unprofiled clang diagnostic",
          "enabled": true,
          "description": "-Wprofile-instr-unprofiled clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-unprofiled)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoVarId",
          "displayName": "auto-var-id clang diagnostic",
          "enabled": true,
          "description": "-Wauto-var-id clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-var-id)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleFileExtension",
          "displayName": "module-file-extension clang diagnostic",
          "enabled": true,
          "description": "-Wmodule-file-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedMemberFunction",
          "displayName": "unused-member-function clang diagnostic",
          "enabled": true,
          "description": "-Wunused-member-function clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-member-function)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraTokens",
          "displayName": "extra-tokens clang diagnostic",
          "enabled": true,
          "description": "-Wextra-tokens clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-tokens)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAixCompat",
          "displayName": "aix-compat clang diagnostic",
          "enabled": false,
          "description": "-Waix-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waix-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverridingTOption",
          "displayName": "overriding-t-option clang diagnostic",
          "enabled": true,
          "description": "-Woverriding-t-option clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverriding-t-option)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastOfSelType",
          "displayName": "cast-of-sel-type clang diagnostic",
          "enabled": true,
          "description": "-Wcast-of-sel-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-of-sel-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC2xCompat",
          "displayName": "c2x-compat clang diagnostic",
          "enabled": true,
          "description": "-Wc2x-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc2x-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringPlusInt",
          "displayName": "string-plus-int clang diagnostic",
          "enabled": true,
          "description": "-Wstring-plus-int clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-int)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMultichar",
          "displayName": "multichar clang diagnostic",
          "enabled": true,
          "description": "-Wmultichar clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmultichar)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidOffsetof",
          "displayName": "invalid-offsetof clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-offsetof clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-offsetof)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPrivateExtern",
          "displayName": "private-extern clang diagnostic",
          "enabled": true,
          "description": "-Wprivate-extern clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-extern)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticLocalInInline",
          "displayName": "static-local-in-inline clang diagnostic",
          "enabled": true,
          "description": "-Wstatic-local-in-inline clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-local-in-inline)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcNonPodMemaccess",
          "displayName": "arc-non-pod-memaccess clang diagnostic",
          "enabled": true,
          "description": "-Warc-non-pod-memaccess clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-non-pod-memaccess)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11InlineNamespace",
          "displayName": "c++11-inline-namespace clang diagnostic",
          "enabled": true,
          "description": "-Wc++11-inline-namespace clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-inline-namespace)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalBitwiseCompare",
          "displayName": "tautological-bitwise-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-bitwise-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-bitwise-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullPointerSubtraction",
          "displayName": "null-pointer-subtraction clang diagnostic",
          "enabled": true,
          "description": "-Wnull-pointer-subtraction clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-subtraction)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownPragmas",
          "displayName": "unknown-pragmas clang diagnostic",
          "enabled": false,
          "description": "-Wunknown-pragmas clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-pragmas)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDisabledMacroExpansion",
          "displayName": "disabled-macro-expansion clang diagnostic",
          "enabled": true,
          "description": "-Wdisabled-macro-expansion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdisabled-macro-expansion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatiblePropertyType",
          "displayName": "incompatible-property-type clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-property-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-property-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullConversion",
          "displayName": "null-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wnull-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPedanticCoreFeatures",
          "displayName": "pedantic-core-features clang diagnostic",
          "enabled": true,
          "description": "-Wpedantic-core-features clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-core-features)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVexingParse",
          "displayName": "vexing-parse clang diagnostic",
          "enabled": true,
          "description": "-Wvexing-parse clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvexing-parse)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuOffsetofExtensions",
          "displayName": "gnu-offsetof-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-offsetof-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-offsetof-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRangeLoopConstruct",
          "displayName": "range-loop-construct clang diagnostic",
          "enabled": true,
          "description": "-Wrange-loop-construct clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-construct)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage",
          "displayName": "deprecated-objc-isa-usage clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-objc-isa-usage clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-isa-usage)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArgumentOutsideRange",
          "displayName": "argument-outside-range clang diagnostic",
          "enabled": true,
          "description": "-Wargument-outside-range clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wargument-outside-range)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSentinel",
          "displayName": "sentinel clang diagnostic",
          "enabled": true,
          "description": "-Wsentinel clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsentinel)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfAssign",
          "displayName": "self-assign clang diagnostic",
          "enabled": true,
          "description": "-Wself-assign clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStatementExpression",
          "displayName": "gnu-statement-expression clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-statement-expression clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuperClassMethodMismatch",
          "displayName": "super-class-method-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wsuper-class-method-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuper-class-method-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingField",
          "displayName": "dangling-field clang diagnostic",
          "enabled": true,
          "description": "-Wdangling-field clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-field)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAvailability",
          "displayName": "availability clang diagnostic",
          "enabled": true,
          "description": "-Wavailability clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wavailability)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConversion",
          "displayName": "conversion clang diagnostic",
          "enabled": true,
          "description": "-Wconversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationPedantic",
          "displayName": "documentation-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wdocumentation-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntConversion",
          "displayName": "int-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wint-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuDesignator",
          "displayName": "gnu-designator clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-designator clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-designator)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalOverlapCompare",
          "displayName": "tautological-overlap-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-overlap-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-overlap-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity",
          "displayName": "protocol-property-synthesis-ambiguity clang diagnostic",
          "enabled": true,
          "description": "-Wprotocol-property-synthesis-ambiguity clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprotocol-property-synthesis-ambiguity)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownAttributes",
          "displayName": "unknown-attributes clang diagnostic",
          "enabled": false,
          "description": "-Wunknown-attributes clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-attributes)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFortifySource",
          "displayName": "fortify-source clang diagnostic",
          "enabled": true,
          "description": "-Wfortify-source clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfortify-source)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncrementBool",
          "displayName": "increment-bool clang diagnostic",
          "enabled": true,
          "description": "-Wincrement-bool clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincrement-bool)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedComparison",
          "displayName": "unused-comparison clang diagnostic",
          "enabled": true,
          "description": "-Wunused-comparison clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-comparison)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnStdMove",
          "displayName": "return-std-move clang diagnostic",
          "enabled": true,
          "description": "-Wreturn-std-move clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-std-move)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUserDefinedWarnings",
          "displayName": "user-defined-warnings clang diagnostic",
          "enabled": true,
          "description": "-Wuser-defined-warnings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-warnings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17Extensions",
          "displayName": "c++17-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++17-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnTypeCLinkage",
          "displayName": "return-type-c-linkage clang diagnostic",
          "enabled": true,
          "description": "-Wreturn-type-c-linkage clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type-c-linkage)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17Compat",
          "displayName": "c++17-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++17-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreC2xCompatPedantic",
          "displayName": "pre-c2x-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c2x-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWeakTemplateVtables",
          "displayName": "weak-template-vtables clang diagnostic",
          "enabled": true,
          "description": "-Wweak-template-vtables clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wweak-template-vtables)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCallToPureVirtualFromCtorDtor",
          "displayName": "call-to-pure-virtual-from-ctor-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wcall-to-pure-virtual-from-ctor-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14AttributeExtensions",
          "displayName": "c++14-attribute-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++14-attribute-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-attribute-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowIvar",
          "displayName": "shadow-ivar clang diagnostic",
          "enabled": true,
          "description": "-Wshadow-ivar clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-ivar)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatPedantic",
          "displayName": "format-pedantic clang diagnostic",
          "enabled": true,
          "description": "-Wformat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride",
          "displayName": "inconsistent-missing-destructor-override clang diagnostic",
          "enabled": true,
          "description": "-Winconsistent-missing-destructor-override clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-destructor-override)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmas",
          "displayName": "pragmas clang diagnostic",
          "enabled": true,
          "description": "-Wpragmas clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragmas)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTypenameMissing",
          "displayName": "typename-missing clang diagnostic",
          "enabled": true,
          "description": "-Wtypename-missing clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtypename-missing)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyVerbose",
          "displayName": "thread-safety-verbose clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-verbose clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-verbose)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndeclaredSelector",
          "displayName": "undeclared-selector clang diagnostic",
          "enabled": true,
          "description": "-Wundeclared-selector clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundeclared-selector)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringCompare",
          "displayName": "string-compare clang diagnostic",
          "enabled": true,
          "description": "-Wstring-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerBoolConversion",
          "displayName": "pointer-bool-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-bool-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-bool-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcRepeatedUseOfWeak",
          "displayName": "arc-repeated-use-of-weak clang diagnostic",
          "enabled": true,
          "description": "-Warc-repeated-use-of-weak clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-repeated-use-of-weak)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArrayParameter",
          "displayName": "array-parameter clang diagnostic",
          "enabled": true,
          "description": "-Warray-parameter clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-parameter)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullPointerArithmetic",
          "displayName": "null-pointer-arithmetic clang diagnostic",
          "enabled": true,
          "description": "-Wnull-pointer-arithmetic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-arithmetic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType",
          "displayName": "tentative-definition-incomplete-type clang diagnostic",
          "enabled": true,
          "description": "-Wtentative-definition-incomplete-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers",
          "displayName": "incompatible-pointer-types-discards-qualifiers clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-pointer-types-discards-qualifiers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFloatConversion",
          "displayName": "implicit-float-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-float-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-float-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftCountNegative",
          "displayName": "shift-count-negative clang diagnostic",
          "enabled": true,
          "description": "-Wshift-count-negative clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-negative)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyPrecise",
          "displayName": "thread-safety-precise clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-precise clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-precise)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedVolatile",
          "displayName": "deprecated-volatile clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-volatile clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-volatile)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatLocalTypeTemplateArgs",
          "displayName": "c++98-compat-local-type-template-args clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-compat-local-type-template-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-local-type-template-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftPureDefinition",
          "displayName": "microsoft-pure-definition clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-pure-definition clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-pure-definition)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProfileInstrMissing",
          "displayName": "profile-instr-missing clang diagnostic",
          "enabled": true,
          "description": "-Wprofile-instr-missing clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-missing)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitAtomicProperties",
          "displayName": "implicit-atomic-properties clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-atomic-properties clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-atomic-properties)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRequiresSuperAttribute",
          "displayName": "requires-super-attribute clang diagnostic",
          "enabled": true,
          "description": "-Wrequires-super-attribute clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrequires-super-attribute)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedundantParens",
          "displayName": "redundant-parens clang diagnostic",
          "enabled": true,
          "description": "-Wredundant-parens clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-parens)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHeaderGuard",
          "displayName": "header-guard clang diagnostic",
          "enabled": true,
          "description": "-Wheader-guard clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-guard)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedParameter",
          "displayName": "unused-parameter clang diagnostic",
          "enabled": false,
          "description": "-Wunused-parameter clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-parameter)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCoroutine",
          "displayName": "deprecated-coroutine clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-coroutine clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-coroutine)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBlockCaptureAutoreleasing",
          "displayName": "block-capture-autoreleasing clang diagnostic",
          "enabled": true,
          "description": "-Wblock-capture-autoreleasing clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wblock-capture-autoreleasing)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection",
          "displayName": "deprecated-objc-pointer-introspection clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-objc-pointer-introspection clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSemicolonBeforeMethodBody",
          "displayName": "semicolon-before-method-body clang diagnostic",
          "enabled": true,
          "description": "-Wsemicolon-before-method-body clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsemicolon-before-method-body)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumCompareSwitch",
          "displayName": "enum-compare-switch clang diagnostic",
          "enabled": true,
          "description": "-Wenum-compare-switch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-switch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedPrivateField",
          "displayName": "unused-private-field clang diagnostic",
          "enabled": true,
          "description": "-Wunused-private-field clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-private-field)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicodeWhitespace",
          "displayName": "unicode-whitespace clang diagnostic",
          "enabled": true,
          "description": "-Wunicode-whitespace clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-whitespace)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude",
          "displayName": "pragma-pack-suspicious-include clang diagnostic",
          "enabled": true,
          "description": "-Wpragma-pack-suspicious-include clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack-suspicious-include)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Compat",
          "displayName": "c++98-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuCaseRange",
          "displayName": "gnu-case-range clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-case-range clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-case-range)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtimportInFrameworkHeader",
          "displayName": "atimport-in-framework-header clang diagnostic",
          "enabled": true,
          "description": "-Watimport-in-framework-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watimport-in-framework-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingBraces",
          "displayName": "missing-braces clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-braces clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-braces)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedBoolConversion",
          "displayName": "undefined-bool-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-bool-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-bool-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticParentheses",
          "displayName": "parentheses clang diagnostic",
          "enabled": true,
          "description": "-Wparentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinMacroRedefined",
          "displayName": "builtin-macro-redefined clang diagnostic",
          "enabled": true,
          "description": "-Wbuiltin-macro-redefined clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-macro-redefined)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSpirCompat",
          "displayName": "spir-compat clang diagnostic",
          "enabled": false,
          "description": "-Wspir-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wspir-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMathematicalNotationIdentifierExtension",
          "displayName": "mathematical-notation-identifier-extension clang diagnostic",
          "enabled": true,
          "description": "-Wmathematical-notation-identifier-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmathematical-notation-identifier-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSlhAsmGoto",
          "displayName": "slh-asm-goto clang diagnostic",
          "enabled": false,
          "description": "-Wslh-asm-goto clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wslh-asm-goto)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteFrameworkModuleDeclaration",
          "displayName": "incomplete-framework-module-declaration clang diagnostic",
          "enabled": true,
          "description": "-Wincomplete-framework-module-declaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-framework-module-declaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnqualifiedStdCastCall",
          "displayName": "unqualified-std-cast-call clang diagnostic",
          "enabled": true,
          "description": "-Wunqualified-std-cast-call clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunqualified-std-cast-call)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVoidPointerToEnumCast",
          "displayName": "void-pointer-to-enum-cast clang diagnostic",
          "enabled": true,
          "description": "-Wvoid-pointer-to-enum-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-enum-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastCallingConvention",
          "displayName": "cast-calling-convention clang diagnostic",
          "enabled": true,
          "description": "-Wcast-calling-convention clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-calling-convention)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTrigraphs",
          "displayName": "trigraphs clang diagnostic",
          "enabled": true,
          "description": "-Wtrigraphs clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtrigraphs)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedFuncTemplate",
          "displayName": "undefined-func-template clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-func-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-func-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFrameLargerThan",
          "displayName": "frame-larger-than clang diagnostic",
          "enabled": true,
          "description": "-Wframe-larger-than clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wframe-larger-than)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftEndOfFile",
          "displayName": "microsoft-end-of-file clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-end-of-file clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-end-of-file)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpLoopForm",
          "displayName": "openmp-loop-form clang diagnostic",
          "enabled": true,
          "description": "-Wopenmp-loop-form clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-loop-form)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPrivateModule",
          "displayName": "private-module clang diagnostic",
          "enabled": true,
          "description": "-Wprivate-module clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-module)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLocalTypeTemplateArgs",
          "displayName": "local-type-template-args clang diagnostic",
          "enabled": true,
          "description": "-Wlocal-type-template-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlocal-type-template-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuAlignofExpression",
          "displayName": "gnu-alignof-expression clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-alignof-expression clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-alignof-expression)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCast",
          "displayName": "microsoft-cast clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNsreturnsMismatch",
          "displayName": "nsreturns-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wnsreturns-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnsreturns-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicMemoryOrdering",
          "displayName": "atomic-memory-ordering clang diagnostic",
          "enabled": true,
          "description": "-Watomic-memory-ordering clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-memory-ordering)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecated",
          "displayName": "deprecated clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftGoto",
          "displayName": "microsoft-goto clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-goto clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-goto)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticComplexComponentInit",
          "displayName": "complex-component-init clang diagnostic",
          "enabled": true,
          "description": "-Wcomplex-component-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcomplex-component-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrlcpyStrlcatSize",
          "displayName": "strlcpy-strlcat-size clang diagnostic",
          "enabled": true,
          "description": "-Wstrlcpy-strlcat-size clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSometimesUninitialized",
          "displayName": "sometimes-uninitialized clang diagnostic",
          "enabled": true,
          "description": "-Wsometimes-uninitialized clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsometimes-uninitialized)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMsvcNotFound",
          "displayName": "msvc-not-found clang diagnostic",
          "enabled": true,
          "description": "-Wmsvc-not-found clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmsvc-not-found)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedTemplate",
          "displayName": "unused-template clang diagnostic",
          "enabled": false,
          "description": "-Wunused-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticError",
          "displayName": "Clang compiler error",
          "enabled": false,
          "description": "Clang compiler error"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModulesImportNestedRedundant",
          "displayName": "modules-import-nested-redundant clang diagnostic",
          "enabled": true,
          "description": "-Wmodules-import-nested-redundant clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodules-import-nested-redundant)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAttributePackedForBitfield",
          "displayName": "attribute-packed-for-bitfield clang diagnostic",
          "enabled": true,
          "description": "-Wattribute-packed-for-bitfield clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wattribute-packed-for-bitfield)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedLocalTypedef",
          "displayName": "unused-local-typedef clang diagnostic",
          "enabled": false,
          "description": "-Wunused-local-typedef clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-local-typedef)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11CompatReservedUserDefinedLiteral",
          "displayName": "c++11-compat-reserved-user-defined-literal clang diagnostic",
          "enabled": false,
          "description": "-Wc++11-compat-reserved-user-defined-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-reserved-user-defined-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProtocol",
          "displayName": "protocol clang diagnostic",
          "enabled": true,
          "description": "-Wprotocol clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprotocol)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPchDateTime",
          "displayName": "pch-date-time clang diagnostic",
          "enabled": true,
          "description": "-Wpch-date-time clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpch-date-time)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedundantConstevalIf",
          "displayName": "redundant-consteval-if clang diagnostic",
          "enabled": true,
          "description": "-Wredundant-consteval-if clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-consteval-if)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonCTypedefForLinkage",
          "displayName": "non-c-typedef-for-linkage clang diagnostic",
          "enabled": true,
          "description": "-Wnon-c-typedef-for-linkage clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-c-typedef-for-linkage)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuRedeclaredEnum",
          "displayName": "gnu-redeclared-enum clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-redeclared-enum clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-redeclared-enum)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCxxAttributeExtension",
          "displayName": "cxx-attribute-extension clang diagnostic",
          "enabled": true,
          "description": "-Wcxx-attribute-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcxx-attribute-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumEnumConversion",
          "displayName": "deprecated-enum-enum-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-enum-enum-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-enum-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedundantMove",
          "displayName": "redundant-move clang diagnostic",
          "enabled": true,
          "description": "-Wredundant-move clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-move)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNestedAnonTypes",
          "displayName": "nested-anon-types clang diagnostic",
          "enabled": true,
          "description": "-Wnested-anon-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnested-anon-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatPedantic",
          "displayName": "c++98-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitIntConversion",
          "displayName": "implicit-int-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-int-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuAnonymousStruct",
          "displayName": "gnu-anonymous-struct clang diagnostic",
          "enabled": false,
          "description": "-Wgnu-anonymous-struct clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-anonymous-struct)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftConstInit",
          "displayName": "microsoft-const-init clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-const-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-const-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVoidPointerToIntCast",
          "displayName": "void-pointer-to-int-cast clang diagnostic",
          "enabled": true,
          "description": "-Wvoid-pointer-to-int-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-int-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelectorTypeMismatch",
          "displayName": "selector-type-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wselector-type-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wselector-type-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuEmptyInitializer",
          "displayName": "gnu-empty-initializer clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-empty-initializer clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-initializer)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftEnumForwardReference",
          "displayName": "microsoft-enum-forward-reference clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-enum-forward-reference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-forward-reference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBadFunctionCast",
          "displayName": "bad-function-cast clang diagnostic",
          "enabled": true,
          "description": "-Wbad-function-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbad-function-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidSourceEncoding",
          "displayName": "invalid-source-encoding clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-source-encoding clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-source-encoding)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGpuMaybeWrongSide",
          "displayName": "gpu-maybe-wrong-side clang diagnostic",
          "enabled": true,
          "description": "-Wgpu-maybe-wrong-side clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgpu-maybe-wrong-side)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticClassConversion",
          "displayName": "class-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wclass-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSlashUFilename",
          "displayName": "slash-u-filename clang diagnostic",
          "enabled": true,
          "description": "-Wslash-u-filename clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wslash-u-filename)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSection",
          "displayName": "section clang diagnostic",
          "enabled": true,
          "description": "-Wsection clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsection)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp20Compat",
          "displayName": "pre-c++20-compat clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++20-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp17Compat",
          "displayName": "pre-c++17-compat clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++17-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition",
          "displayName": "microsoft-default-arg-redefinition clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-default-arg-redefinition clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-default-arg-redefinition)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedeclaredClassMember",
          "displayName": "redeclared-class-member clang diagnostic",
          "enabled": true,
          "description": "-Wredeclared-class-member clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredeclared-class-member)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReinterpretBaseClass",
          "displayName": "reinterpret-base-class clang diagnostic",
          "enabled": true,
          "description": "-Wreinterpret-base-class clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreinterpret-base-class)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidIosDeploymentTarget",
          "displayName": "invalid-ios-deployment-target clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-ios-deployment-target clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-ios-deployment-target)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpMapping",
          "displayName": "openmp-mapping clang diagnostic",
          "enabled": true,
          "description": "-Wopenmp-mapping clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-mapping)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInconsistentDllimport",
          "displayName": "inconsistent-dllimport clang diagnostic",
          "enabled": true,
          "description": "-Winconsistent-dllimport clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-dllimport)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCharSubscripts",
          "displayName": "char-subscripts clang diagnostic",
          "enabled": true,
          "description": "-Wchar-subscripts clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wchar-subscripts)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedInline",
          "displayName": "undefined-inline clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-inline clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-inline)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonportableIncludePath",
          "displayName": "nonportable-include-path clang diagnostic",
          "enabled": false,
          "description": "-Wnonportable-include-path clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-include-path)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverrideInit",
          "displayName": "override-init clang diagnostic",
          "enabled": true,
          "description": "-Woverride-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverride-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAllocaWithAlignAlignof",
          "displayName": "alloca-with-align-alignof clang diagnostic",
          "enabled": true,
          "description": "-Walloca-with-align-alignof clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walloca-with-align-alignof)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuInlineCppWithoutExtern",
          "displayName": "gnu-inline-cpp-without-extern clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-inline-cpp-without-extern clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-inline-cpp-without-extern)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnalignedQualifierImplicitCast",
          "displayName": "unaligned-qualifier-implicit-cast clang diagnostic",
          "enabled": true,
          "description": "-Wunaligned-qualifier-implicit-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-qualifier-implicit-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVariadicMacros",
          "displayName": "variadic-macros clang diagnostic",
          "enabled": true,
          "description": "-Wvariadic-macros clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvariadic-macros)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAlloca",
          "displayName": "alloca clang diagnostic",
          "enabled": true,
          "description": "-Walloca clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walloca)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedNan",
          "displayName": "unsupported-nan clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-nan clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-nan)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticQuotedIncludeInFrameworkHeader",
          "displayName": "quoted-include-in-framework-header clang diagnostic",
          "enabled": true,
          "description": "-Wquoted-include-in-framework-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wquoted-include-in-framework-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuLabelAsValue",
          "displayName": "gnu-label-as-value clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-label-as-value clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-label-as-value)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonPodVarargs",
          "displayName": "non-pod-varargs clang diagnostic",
          "enabled": true,
          "description": "-Wnon-pod-varargs clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-pod-varargs)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticManyBracesAroundScalarInit",
          "displayName": "many-braces-around-scalar-init clang diagnostic",
          "enabled": true,
          "description": "-Wmany-braces-around-scalar-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedDtor",
          "displayName": "deprecated-copy-with-user-provided-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-copy-with-user-provided-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuEmptyStruct",
          "displayName": "gnu-empty-struct clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-empty-struct clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-struct)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare",
          "displayName": "tautological-constant-out-of-range-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-constant-out-of-range-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncludeNextAbsolutePath",
          "displayName": "include-next-absolute-path clang diagnostic",
          "enabled": true,
          "description": "-Winclude-next-absolute-path clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-absolute-path)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17CompatPedantic",
          "displayName": "c++98-c++11-c++14-c++17-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-c++14-c++17-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaMessages",
          "displayName": "#pragma-messages clang diagnostic",
          "enabled": true,
          "description": "-W#pragma-messages clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#w-pragma-messages)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredAvailabilityWithoutSdkSettings",
          "displayName": "ignored-availability-without-sdk-settings clang diagnostic",
          "enabled": false,
          "description": "-Wignored-availability-without-sdk-settings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-availability-without-sdk-settings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnLocalAddr",
          "displayName": "return-local-addr clang diagnostic",
          "enabled": true,
          "description": "-Wreturn-local-addr clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-local-addr)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNoderef",
          "displayName": "noderef clang diagnostic",
          "enabled": true,
          "description": "-Wnoderef clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnoderef)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20Designator",
          "displayName": "c++20-designator clang diagnostic",
          "enabled": true,
          "description": "-Wc++20-designator clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-designator)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor",
          "displayName": "atomic-property-with-user-defined-accessor clang diagnostic",
          "enabled": true,
          "description": "-Watomic-property-with-user-defined-accessor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-property-with-user-defined-accessor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntInBoolContext",
          "displayName": "int-in-bool-context clang diagnostic",
          "enabled": true,
          "description": "-Wint-in-bool-context clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-in-bool-context)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWritableStrings",
          "displayName": "writable-strings clang diagnostic",
          "enabled": true,
          "description": "-Wwritable-strings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wwritable-strings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConditionalUninitialized",
          "displayName": "conditional-uninitialized clang diagnostic",
          "enabled": true,
          "description": "-Wconditional-uninitialized clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-uninitialized)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCommaSubscript",
          "displayName": "deprecated-comma-subscript clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-comma-subscript clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-comma-subscript)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticInInline",
          "displayName": "static-in-inline clang diagnostic",
          "enabled": true,
          "description": "-Wstatic-in-inline clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-in-inline)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidNoBuiltinNames",
          "displayName": "invalid-no-builtin-names clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-no-builtin-names clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-no-builtin-names)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatTypeConfusion",
          "displayName": "format-type-confusion clang diagnostic",
          "enabled": true,
          "description": "-Wformat-type-confusion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-type-confusion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitfieldWidth",
          "displayName": "bitfield-width clang diagnostic",
          "enabled": true,
          "description": "-Wbitfield-width clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-width)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleSysroot",
          "displayName": "incompatible-sysroot clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-sysroot clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-sysroot)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftOpParentheses",
          "displayName": "shift-op-parentheses clang diagnostic",
          "enabled": true,
          "description": "-Wshift-op-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-op-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11LongLong",
          "displayName": "c++11-long-long clang diagnostic",
          "enabled": true,
          "description": "-Wc++11-long-long clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-long-long)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInconsistentMissingOverride",
          "displayName": "inconsistent-missing-override clang diagnostic",
          "enabled": true,
          "description": "-Winconsistent-missing-override clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-override)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateProtocol",
          "displayName": "duplicate-protocol clang diagnostic",
          "enabled": true,
          "description": "-Wduplicate-protocol clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-protocol)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedTags",
          "displayName": "mismatched-tags clang diagnostic",
          "enabled": true,
          "description": "-Wmismatched-tags clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-tags)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidPartialSpecialization",
          "displayName": "invalid-partial-specialization clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-partial-specialization clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-partial-specialization)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedIdentifier",
          "displayName": "reserved-identifier clang diagnostic",
          "enabled": true,
          "description": "-Wreserved-identifier clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-identifier)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFrameAddress",
          "displayName": "frame-address clang diagnostic",
          "enabled": true,
          "description": "-Wframe-address clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wframe-address)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProfileInstrOutOfDate",
          "displayName": "profile-instr-out-of-date clang diagnostic",
          "enabled": true,
          "description": "-Wprofile-instr-out-of-date clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-out-of-date)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftInaccessibleBase",
          "displayName": "microsoft-inaccessible-base clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-inaccessible-base clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-inaccessible-base)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBracedScalarInit",
          "displayName": "braced-scalar-init clang diagnostic",
          "enabled": true,
          "description": "-Wbraced-scalar-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbraced-scalar-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingElse",
          "displayName": "dangling-else clang diagnostic",
          "enabled": true,
          "description": "-Wdangling-else clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-else)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUnsignedCharZeroCompare",
          "displayName": "tautological-unsigned-char-zero-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-unsigned-char-zero-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-char-zero-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtProtocol",
          "displayName": "at-protocol clang diagnostic",
          "enabled": true,
          "description": "-Wat-protocol clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wat-protocol)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOutOfLineDeclaration",
          "displayName": "out-of-line-declaration clang diagnostic",
          "enabled": true,
          "description": "-Wout-of-line-declaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-line-declaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17AttributeExtensions",
          "displayName": "c++17-attribute-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++17-attribute-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-attribute-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyBeta",
          "displayName": "thread-safety-beta clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-beta clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-beta)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatInvalidSpecifier",
          "displayName": "format-invalid-specifier clang diagnostic",
          "enabled": true,
          "description": "-Wformat-invalid-specifier clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-invalid-specifier)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverlengthStrings",
          "displayName": "overlength-strings clang diagnostic",
          "enabled": true,
          "description": "-Woverlength-strings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverlength-strings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic",
          "displayName": "array-bounds-pointer-arithmetic clang diagnostic",
          "enabled": true,
          "description": "-Warray-bounds-pointer-arithmetic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds-pointer-arithmetic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember",
          "displayName": "gnu-flexible-array-union-member clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-flexible-array-union-member clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-union-member)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingMethodReturnType",
          "displayName": "missing-method-return-type clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-method-return-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-method-return-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFlagEnum",
          "displayName": "flag-enum clang diagnostic",
          "enabled": true,
          "description": "-Wflag-enum clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wflag-enum)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityDeclspec",
          "displayName": "nullability-declspec clang diagnostic",
          "enabled": true,
          "description": "-Wnullability-declspec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-declspec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall",
          "displayName": "microsoft-explicit-constructor-call clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-explicit-constructor-call clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-explicit-constructor-call)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOldStyleCast",
          "displayName": "old-style-cast clang diagnostic",
          "enabled": false,
          "description": "-Wold-style-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wold-style-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUserDefinedLiterals",
          "displayName": "user-defined-literals clang diagnostic",
          "enabled": false,
          "description": "-Wuser-defined-literals clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-literals)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate",
          "displayName": "unsupported-dll-base-class-template clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-dll-base-class-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-dll-base-class-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedReinterpretCast",
          "displayName": "undefined-reinterpret-cast clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-reinterpret-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-reinterpret-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicodeHomoglyph",
          "displayName": "unicode-homoglyph clang diagnostic",
          "enabled": true,
          "description": "-Wunicode-homoglyph clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-homoglyph)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticComma",
          "displayName": "comma clang diagnostic",
          "enabled": true,
          "description": "-Wcomma clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcomma)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousMacro",
          "displayName": "ambiguous-macro clang diagnostic",
          "enabled": true,
          "description": "-Wambiguous-macro clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-macro)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC99Compat",
          "displayName": "c99-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc99-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftUsingDecl",
          "displayName": "microsoft-using-decl clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-using-decl clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-using-decl)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUninitialized",
          "displayName": "uninitialized clang diagnostic",
          "enabled": true,
          "description": "-Wuninitialized clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPacked",
          "displayName": "packed clang diagnostic",
          "enabled": true,
          "description": "-Wpacked clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpacked)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDelimitedEscapeSequenceExtension",
          "displayName": "delimited-escape-sequence-extension clang diagnostic",
          "enabled": true,
          "description": "-Wdelimited-escape-sequence-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelimited-escape-sequence-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMaxTokens",
          "displayName": "max-tokens clang diagnostic",
          "enabled": false,
          "description": "-Wmax-tokens clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-tokens)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleFileConfigMismatch",
          "displayName": "module-file-config-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wmodule-file-config-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-config-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVoidPtrDereference",
          "displayName": "void-ptr-dereference clang diagnostic",
          "enabled": true,
          "description": "-Wvoid-ptr-dereference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-ptr-dereference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInlineNewDelete",
          "displayName": "inline-new-delete clang diagnostic",
          "enabled": true,
          "description": "-Winline-new-delete clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-new-delete)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInaccessibleBase",
          "displayName": "inaccessible-base clang diagnostic",
          "enabled": true,
          "description": "-Winaccessible-base clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winaccessible-base)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityCompleteness",
          "displayName": "nullability-completeness clang diagnostic",
          "enabled": true,
          "description": "-Wnullability-completeness clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-completeness)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak",
          "displayName": "arc-maybe-repeated-use-of-weak clang diagnostic",
          "enabled": true,
          "description": "-Warc-maybe-repeated-use-of-weak clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-maybe-repeated-use-of-weak)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnneededMemberFunction",
          "displayName": "unneeded-member-function clang diagnostic",
          "enabled": true,
          "description": "-Wunneeded-member-function clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-member-function)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExplicitOwnershipType",
          "displayName": "explicit-ownership-type clang diagnostic",
          "enabled": true,
          "description": "-Wexplicit-ownership-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-ownership-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuArrayMemberParenInit",
          "displayName": "gnu-array-member-paren-init clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-array-member-paren-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-array-member-paren-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompoundTokenSplit",
          "displayName": "compound-token-split clang diagnostic",
          "enabled": true,
          "description": "-Wcompound-token-split clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousMemberTemplate",
          "displayName": "ambiguous-member-template clang diagnostic",
          "enabled": true,
          "description": "-Wambiguous-member-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-member-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage",
          "displayName": "modules-ambiguous-internal-linkage clang diagnostic",
          "enabled": true,
          "description": "-Wmodules-ambiguous-internal-linkage clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodules-ambiguous-internal-linkage)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullArithmetic",
          "displayName": "null-arithmetic clang diagnostic",
          "enabled": true,
          "description": "-Wnull-arithmetic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-arithmetic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftAbstract",
          "displayName": "microsoft-abstract clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-abstract clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-abstract)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExtraQualification",
          "displayName": "microsoft-extra-qualification clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-extra-qualification clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-extra-qualification)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumCompare",
          "displayName": "enum-compare clang diagnostic",
          "enabled": true,
          "description": "-Wenum-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFreeNonheapObject",
          "displayName": "free-nonheap-object clang diagnostic",
          "enabled": true,
          "description": "-Wfree-nonheap-object clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfree-nonheap-object)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp17CompatPedantic",
          "displayName": "pre-c++17-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++17-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExitTimeDestructors",
          "displayName": "exit-time-destructors clang diagnostic",
          "enabled": false,
          "description": "-Wexit-time-destructors clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexit-time-destructors)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDebugCompressionUnavailable",
          "displayName": "debug-compression-unavailable clang diagnostic",
          "enabled": true,
          "description": "-Wdebug-compression-unavailable clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdebug-compression-unavailable)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEncodeType",
          "displayName": "encode-type clang diagnostic",
          "enabled": true,
          "description": "-Wencode-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wencode-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate",
          "displayName": "gnu-string-literal-operator-template clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-string-literal-operator-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-string-literal-operator-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuUnionCast",
          "displayName": "gnu-union-cast clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-union-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-union-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyInitStmt",
          "displayName": "empty-init-stmt clang diagnostic",
          "enabled": true,
          "description": "-Wempty-init-stmt clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-init-stmt)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnguardedAvailability",
          "displayName": "unguarded-availability clang diagnostic",
          "enabled": true,
          "description": "-Wunguarded-availability clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNewlineEof",
          "displayName": "newline-eof clang diagnostic",
          "enabled": true,
          "description": "-Wnewline-eof clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnewline-eof)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUndefinedCompare",
          "displayName": "tautological-undefined-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-undefined-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-undefined-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare",
          "displayName": "tautological-unsigned-zero-compare clang diagnostic",
          "enabled": false,
          "description": "-Wtautological-unsigned-zero-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-zero-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAttributeWarning",
          "displayName": "attribute-warning clang diagnostic",
          "enabled": true,
          "description": "-Wattribute-warning clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wattribute-warning)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFunctionDefInObjcContainer",
          "displayName": "function-def-in-objc-container clang diagnostic",
          "enabled": true,
          "description": "-Wfunction-def-in-objc-container clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfunction-def-in-objc-container)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCtu",
          "displayName": "ctu clang diagnostic",
          "enabled": false,
          "description": "-Wctu clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wctu)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUninitializedConstReference",
          "displayName": "uninitialized-const-reference clang diagnostic",
          "enabled": true,
          "description": "-Wuninitialized-const-reference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized-const-reference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLinkerWarnings",
          "displayName": "linker-warnings clang diagnostic",
          "enabled": true,
          "description": "-Wlinker-warnings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlinker-warnings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction",
          "displayName": "predefined-identifier-outside-function clang diagnostic",
          "enabled": true,
          "description": "-Wpredefined-identifier-outside-function clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpredefined-identifier-outside-function)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcUnsafeRetainedAssign",
          "displayName": "arc-unsafe-retained-assign clang diagnostic",
          "enabled": true,
          "description": "-Warc-unsafe-retained-assign clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-unsafe-retained-assign)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC11Extensions",
          "displayName": "c11-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc11-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc11-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullCharacter",
          "displayName": "null-character clang diagnostic",
          "enabled": true,
          "description": "-Wnull-character clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-character)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalCompare",
          "displayName": "tautological-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleImportInExternC",
          "displayName": "module-import-in-extern-c clang diagnostic",
          "enabled": true,
          "description": "-Wmodule-import-in-extern-c clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-import-in-extern-c)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCFStringLiteral",
          "displayName": "CFString-literal clang diagnostic",
          "enabled": true,
          "description": "-WCFString-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wCFString-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticZeroLengthArray",
          "displayName": "zero-length-array clang diagnostic",
          "enabled": true,
          "description": "-Wzero-length-array clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-length-array)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedReturnTypes",
          "displayName": "mismatched-return-types clang diagnostic",
          "enabled": true,
          "description": "-Wmismatched-return-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-return-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIdiomaticParentheses",
          "displayName": "idiomatic-parentheses clang diagnostic",
          "enabled": true,
          "description": "-Widiomatic-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#widiomatic-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLargeByValueCopy",
          "displayName": "large-by-value-copy clang diagnostic",
          "enabled": true,
          "description": "-Wlarge-by-value-copy clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlarge-by-value-copy)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnevaluatedExpression",
          "displayName": "unevaluated-expression clang diagnostic",
          "enabled": true,
          "description": "-Wunevaluated-expression clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunevaluated-expression)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin",
          "displayName": "analyzer-incompatible-plugin clang diagnostic",
          "enabled": true,
          "description": "-Wanalyzer-incompatible-plugin clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wanalyzer-incompatible-plugin)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPropertyAccessDotSyntax",
          "displayName": "property-access-dot-syntax clang diagnostic",
          "enabled": true,
          "description": "-Wproperty-access-dot-syntax clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wproperty-access-dot-syntax)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHipOnly",
          "displayName": "hip-only clang diagnostic",
          "enabled": true,
          "description": "-Whip-only clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#whip-only)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSwitchBool",
          "displayName": "switch-bool clang diagnostic",
          "enabled": true,
          "description": "-Wswitch-bool clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-bool)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitwiseInsteadOfLogical",
          "displayName": "bitwise-instead-of-logical clang diagnostic",
          "enabled": true,
          "description": "-Wbitwise-instead-of-logical clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-instead-of-logical)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPedanticMacros",
          "displayName": "pedantic-macros clang diagnostic",
          "enabled": true,
          "description": "-Wpedantic-macros clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-macros)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidUtf8",
          "displayName": "invalid-utf8 clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-utf8 clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-utf8)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedLabel",
          "displayName": "unused-label clang diagnostic",
          "enabled": true,
          "description": "-Wunused-label clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-label)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic",
          "displayName": "import-preprocessor-directive-pedantic clang diagnostic",
          "enabled": true,
          "description": "-Wimport-preprocessor-directive-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimport-preprocessor-directive-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstantConversion",
          "displayName": "constant-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wconstant-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExternCCompat",
          "displayName": "extern-c-compat clang diagnostic",
          "enabled": false,
          "description": "-Wextern-c-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-c-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnguardedAvailabilityNew",
          "displayName": "unguarded-availability-new clang diagnostic",
          "enabled": true,
          "description": "-Wunguarded-availability-new clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability-new)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedInternalType",
          "displayName": "undefined-internal-type clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-internal-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredAttributes",
          "displayName": "ignored-attributes clang diagnostic",
          "enabled": false,
          "description": "-Wignored-attributes clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-attributes)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonVirtualDtor",
          "displayName": "non-virtual-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wnon-virtual-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-virtual-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFixedPointOverflow",
          "displayName": "fixed-point-overflow clang diagnostic",
          "enabled": true,
          "description": "-Wfixed-point-overflow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-point-overflow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingSysroot",
          "displayName": "missing-sysroot clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-sysroot clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-sysroot)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedExperimentalCoroutine",
          "displayName": "deprecated-experimental-coroutine clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-experimental-coroutine clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-experimental-coroutine)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11CompatPedantic",
          "displayName": "c++11-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++11-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedUserDefinedLiteral",
          "displayName": "reserved-user-defined-literal clang diagnostic",
          "enabled": true,
          "description": "-Wreserved-user-defined-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-user-defined-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitwiseOpParentheses",
          "displayName": "bitwise-op-parentheses clang diagnostic",
          "enabled": true,
          "description": "-Wbitwise-op-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-op-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWasmExceptionSpec",
          "displayName": "wasm-exception-spec clang diagnostic",
          "enabled": true,
          "description": "-Wwasm-exception-spec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wwasm-exception-spec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraSemi",
          "displayName": "extra-semi clang diagnostic",
          "enabled": true,
          "description": "-Wextra-semi clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedParameterTypes",
          "displayName": "mismatched-parameter-types clang diagnostic",
          "enabled": true,
          "description": "-Wmismatched-parameter-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-parameter-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverloadedVirtual",
          "displayName": "overloaded-virtual clang diagnostic",
          "enabled": true,
          "description": "-Woverloaded-virtual clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-virtual)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticSelfInit",
          "displayName": "static-self-init clang diagnostic",
          "enabled": true,
          "description": "-Wstatic-self-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-self-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMemsetTransposedArgs",
          "displayName": "memset-transposed-args clang diagnostic",
          "enabled": true,
          "description": "-Wmemset-transposed-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmemset-transposed-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofArrayDiv",
          "displayName": "sizeof-array-div clang diagnostic",
          "enabled": true,
          "description": "-Wsizeof-array-div clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-div)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfAssignOverloaded",
          "displayName": "self-assign-overloaded clang diagnostic",
          "enabled": true,
          "description": "-Wself-assign-overloaded clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-overloaded)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteSetjmpDeclaration",
          "displayName": "incomplete-setjmp-declaration clang diagnostic",
          "enabled": true,
          "description": "-Wincomplete-setjmp-declaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-setjmp-declaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignConversion",
          "displayName": "sign-conversion clang diagnostic",
          "enabled": false,
          "description": "-Wsign-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsign-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitRetainSelf",
          "displayName": "implicit-retain-self clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-retain-self clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-retain-self)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeFallthrough",
          "displayName": "unreachable-code-fallthrough clang diagnostic",
          "enabled": true,
          "description": "-Wunreachable-code-fallthrough clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-fallthrough)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFixedPointConversion",
          "displayName": "implicit-fixed-point-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-fixed-point-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityInferredOnNestedType",
          "displayName": "nullability-inferred-on-nested-type clang diagnostic",
          "enabled": true,
          "description": "-Wnullability-inferred-on-nested-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-inferred-on-nested-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments",
          "displayName": "gnu-zero-variadic-macro-arguments clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-zero-variadic-macro-arguments clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-zero-variadic-macro-arguments)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedIdMacro",
          "displayName": "reserved-id-macro clang diagnostic",
          "enabled": true,
          "description": "-Wreserved-id-macro clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-id-macro)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17CompatPedantic",
          "displayName": "c++17-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++17-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalConstantCompare",
          "displayName": "tautological-constant-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-constant-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAddressOfTemporary",
          "displayName": "address-of-temporary clang diagnostic",
          "enabled": true,
          "description": "-Waddress-of-temporary clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-temporary)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateMethodMatch",
          "displayName": "duplicate-method-match clang diagnostic",
          "enabled": true,
          "description": "-Wduplicate-method-match clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-match)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFrameworkIncludePrivateFromPublic",
          "displayName": "framework-include-private-from-public clang diagnostic",
          "enabled": true,
          "description": "-Wframework-include-private-from-public clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wframework-include-private-from-public)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuggestDestructorOverride",
          "displayName": "suggest-destructor-override clang diagnostic",
          "enabled": false,
          "description": "-Wsuggest-destructor-override clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-destructor-override)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastQualUnrelated",
          "displayName": "cast-qual-unrelated clang diagnostic",
          "enabled": true,
          "description": "-Wcast-qual-unrelated clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual-unrelated)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReceiverForwardClass",
          "displayName": "receiver-forward-class clang diagnostic",
          "enabled": true,
          "description": "-Wreceiver-forward-class clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreceiver-forward-class)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerSign",
          "displayName": "pointer-sign clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-sign clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-sign)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedMacros",
          "displayName": "unused-macros clang diagnostic",
          "enabled": true,
          "description": "-Wunused-macros clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-macros)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitIntExtension",
          "displayName": "bit-int-extension clang diagnostic",
          "enabled": true,
          "description": "-Wbit-int-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbit-int-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitfieldEnumConversion",
          "displayName": "bitfield-enum-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wbitfield-enum-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-enum-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFunctionDeclaration",
          "displayName": "implicit-function-declaration clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-function-declaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-function-declaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCudaCompat",
          "displayName": "cuda-compat clang diagnostic",
          "enabled": false,
          "description": "-Wcuda-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcuda-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyBody",
          "displayName": "empty-body clang diagnostic",
          "enabled": true,
          "description": "-Wempty-body clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-body)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreC2xCompat",
          "displayName": "pre-c2x-compat clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c2x-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidNoreturn",
          "displayName": "invalid-noreturn clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-noreturn clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-noreturn)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicodeZeroWidth",
          "displayName": "unicode-zero-width clang diagnostic",
          "enabled": true,
          "description": "-Wunicode-zero-width clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-zero-width)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAnonymousPackParens",
          "displayName": "anonymous-pack-parens clang diagnostic",
          "enabled": true,
          "description": "-Wanonymous-pack-parens clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wanonymous-pack-parens)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeReturn",
          "displayName": "unreachable-code-return clang diagnostic",
          "enabled": true,
          "description": "-Wunreachable-code-return clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-return)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoDisableVptrSanitizer",
          "displayName": "auto-disable-vptr-sanitizer clang diagnostic",
          "enabled": true,
          "description": "-Wauto-disable-vptr-sanitizer clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-disable-vptr-sanitizer)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignedUnsignedWchar",
          "displayName": "signed-unsigned-wchar clang diagnostic",
          "enabled": true,
          "description": "-Wsigned-unsigned-wchar clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsigned-unsigned-wchar)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedVarTemplate",
          "displayName": "undefined-var-template clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-var-template clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-var-template)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMethodSignatures",
          "displayName": "method-signatures clang diagnostic",
          "enabled": true,
          "description": "-Wmethod-signatures clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmethod-signatures)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFutureAttributeExtensions",
          "displayName": "future-attribute-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wfuture-attribute-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfuture-attribute-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyTranslationUnit",
          "displayName": "empty-translation-unit clang diagnostic",
          "enabled": true,
          "description": "-Wempty-translation-unit clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-translation-unit)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArrayBounds",
          "displayName": "array-bounds clang diagnostic",
          "enabled": true,
          "description": "-Warray-bounds clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor",
          "displayName": "microsoft-void-pseudo-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-void-pseudo-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-void-pseudo-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDollarInIdentifierExtension",
          "displayName": "dollar-in-identifier-extension clang diagnostic",
          "enabled": true,
          "description": "-Wdollar-in-identifier-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdollar-in-identifier-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuImaginaryConstant",
          "displayName": "gnu-imaginary-constant clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-imaginary-constant clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-imaginary-constant)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedGpopt",
          "displayName": "unsupported-gpopt clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-gpopt clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-gpopt)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedPropertyIvar",
          "displayName": "unused-property-ivar clang diagnostic",
          "enabled": true,
          "description": "-Wunused-property-ivar clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-property-ivar)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftOverflow",
          "displayName": "shift-overflow clang diagnostic",
          "enabled": true,
          "description": "-Wshift-overflow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-overflow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedResult",
          "displayName": "unused-result clang diagnostic",
          "enabled": false,
          "description": "-Wunused-result clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-result)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentation",
          "displayName": "documentation clang diagnostic",
          "enabled": false,
          "description": "-Wdocumentation clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14Compat",
          "displayName": "c++14-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++14-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftFixedEnum",
          "displayName": "microsoft-fixed-enum clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-fixed-enum clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-fixed-enum)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitfieldConstantConversion",
          "displayName": "bitfield-constant-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wbitfield-constant-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArgumentUndefinedBehaviour",
          "displayName": "argument-undefined-behaviour clang diagnostic",
          "enabled": true,
          "description": "-Wargument-undefined-behaviour clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wargument-undefined-behaviour)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalValueRangeCompare",
          "displayName": "tautological-value-range-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-value-range-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-value-range-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSarifFormatUnstable",
          "displayName": "sarif-format-unstable clang diagnostic",
          "enabled": true,
          "description": "-Wsarif-format-unstable clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsarif-format-unstable)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicImplicitSeqCst",
          "displayName": "atomic-implicit-seq-cst clang diagnostic",
          "enabled": true,
          "description": "-Watomic-implicit-seq-cst clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-implicit-seq-cst)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20Extensions",
          "displayName": "c++20-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++20-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCustomAtomicProperties",
          "displayName": "custom-atomic-properties clang diagnostic",
          "enabled": true,
          "description": "-Wcustom-atomic-properties clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcustom-atomic-properties)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAlignMismatch",
          "displayName": "align-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Walign-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walign-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerToIntCast",
          "displayName": "pointer-to-int-cast clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-to-int-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-int-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMainReturnType",
          "displayName": "main-return-type clang diagnostic",
          "enabled": true,
          "description": "-Wmain-return-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmain-return-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFixedEnumExtension",
          "displayName": "fixed-enum-extension clang diagnostic",
          "enabled": false,
          "description": "-Wfixed-enum-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-enum-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNSObjectAttribute",
          "displayName": "NSObject-attribute clang diagnostic",
          "enabled": true,
          "description": "-WNSObject-attribute clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wNSObject-attribute)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBoolOperation",
          "displayName": "bool-operation clang diagnostic",
          "enabled": true,
          "description": "-Wbool-operation clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-operation)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncludeNextOutsideHeader",
          "displayName": "include-next-outside-header clang diagnostic",
          "enabled": true,
          "description": "-Winclude-next-outside-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-outside-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateEnum",
          "displayName": "duplicate-enum clang diagnostic",
          "enabled": true,
          "description": "-Wduplicate-enum clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-enum)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11CompatDeprecatedWritableStrings",
          "displayName": "c++11-compat-deprecated-writable-strings clang diagnostic",
          "enabled": false,
          "description": "-Wc++11-compat-deprecated-writable-strings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged",
          "displayName": "sync-fetch-and-nand-semantics-changed clang diagnostic",
          "enabled": true,
          "description": "-Wsync-fetch-and-nand-semantics-changed clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsync-fetch-and-nand-semantics-changed)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedFunction",
          "displayName": "unused-function clang diagnostic",
          "enabled": true,
          "description": "-Wunused-function clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-function)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReadOnlyTypes",
          "displayName": "read-only-types clang diagnostic",
          "enabled": true,
          "description": "-Wread-only-types clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wread-only-types)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingPrototypeForCc",
          "displayName": "missing-prototype-for-cc clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-prototype-for-cc clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototype-for-cc)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatZeroLength",
          "displayName": "format-zero-length clang diagnostic",
          "enabled": true,
          "description": "-Wformat-zero-length clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-zero-length)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAvrRtlibLinkingQuirks",
          "displayName": "avr-rtlib-linking-quirks clang diagnostic",
          "enabled": false,
          "description": "-Wavr-rtlib-linking-quirks clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wavr-rtlib-linking-quirks)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRestrictExpansion",
          "displayName": "restrict-expansion clang diagnostic",
          "enabled": true,
          "description": "-Wrestrict-expansion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrestrict-expansion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteAbstractNonVirtualDtor",
          "displayName": "delete-abstract-non-virtual-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wdelete-abstract-non-virtual-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11CompatBinaryLiteral",
          "displayName": "c++98-c++11-compat-binary-literal clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-compat-binary-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-binary-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastAlign",
          "displayName": "cast-align clang diagnostic",
          "enabled": true,
          "description": "-Wcast-align clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-align)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedVariable",
          "displayName": "unused-variable clang diagnostic",
          "enabled": false,
          "description": "-Wunused-variable clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-variable)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospectionPerformSelector",
          "displayName": "deprecated-objc-pointer-introspection-performSelector clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-objc-pointer-introspection-performSelector clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection-performSelector)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatBindToTemporaryCopy",
          "displayName": "c++98-compat-bind-to-temporary-copy clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-compat-bind-to-temporary-copy clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-bind-to-temporary-copy)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofArrayArgument",
          "displayName": "sizeof-array-argument clang diagnostic",
          "enabled": true,
          "description": "-Wsizeof-array-argument clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-argument)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerTypeMismatch",
          "displayName": "pointer-type-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-type-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-type-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExportUnnamed",
          "displayName": "export-unnamed clang diagnostic",
          "enabled": true,
          "description": "-Wexport-unnamed clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexport-unnamed)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeclarationAfterStatement",
          "displayName": "declaration-after-statement clang diagnostic",
          "enabled": false,
          "description": "-Wdeclaration-after-statement clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeclaration-after-statement)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedNonPrototype",
          "displayName": "deprecated-non-prototype clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-non-prototype clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-non-prototype)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftNegativeValue",
          "displayName": "shift-negative-value clang diagnostic",
          "enabled": true,
          "description": "-Wshift-negative-value clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-negative-value)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBridgeCast",
          "displayName": "bridge-cast clang diagnostic",
          "enabled": true,
          "description": "-Wbridge-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbridge-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays",
          "displayName": "nullability-completeness-on-arrays clang diagnostic",
          "enabled": true,
          "description": "-Wnullability-completeness-on-arrays clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-completeness-on-arrays)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrncatSize",
          "displayName": "strncat-size clang diagnostic",
          "enabled": true,
          "description": "-Wstrncat-size clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrncat-size)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticKnrPromotedParameter",
          "displayName": "knr-promoted-parameter clang diagnostic",
          "enabled": true,
          "description": "-Wknr-promoted-parameter clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wknr-promoted-parameter)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInjectedClassName",
          "displayName": "injected-class-name clang diagnostic",
          "enabled": true,
          "description": "-Winjected-class-name clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winjected-class-name)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFunctionMultiversion",
          "displayName": "function-multiversion clang diagnostic",
          "enabled": true,
          "description": "-Wfunction-multiversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfunction-multiversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11Narrowing",
          "displayName": "c++11-narrowing clang diagnostic",
          "enabled": true,
          "description": "-Wc++11-narrowing clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-narrowing)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp2bCompatPedantic",
          "displayName": "pre-c++2b-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++2b-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2b-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVectorConversion",
          "displayName": "vector-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wvector-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvector-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidIboutlet",
          "displayName": "invalid-iboutlet clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-iboutlet clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-iboutlet)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs",
          "displayName": "unnamed-type-template-args clang diagnostic",
          "enabled": true,
          "description": "-Wunnamed-type-template-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunnamed-type-template-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPedantic",
          "displayName": "pedantic clang diagnostic",
          "enabled": true,
          "description": "-Wpedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCmseUnionLeak",
          "displayName": "cmse-union-leak clang diagnostic",
          "enabled": true,
          "description": "-Wcmse-union-leak clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcmse-union-leak)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNsconsumedMismatch",
          "displayName": "nsconsumed-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wnsconsumed-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnsconsumed-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17CompatMangling",
          "displayName": "c++17-compat-mangling clang diagnostic",
          "enabled": false,
          "description": "-Wc++17-compat-mangling clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-mangling)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch",
          "displayName": "implicit-exception-spec-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-exception-spec-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd",
          "displayName": "gnu-variable-sized-type-not-at-end clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-variable-sized-type-not-at-end clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-variable-sized-type-not-at-end)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticForLoopAnalysis",
          "displayName": "for-loop-analysis clang diagnostic",
          "enabled": true,
          "description": "-Wfor-loop-analysis clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfor-loop-analysis)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBoolConversion",
          "displayName": "bool-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wbool-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastFunctionTypeStrict",
          "displayName": "cast-function-type-strict clang diagnostic",
          "enabled": true,
          "description": "-Wcast-function-type-strict clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type-strict)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAlwaysInlineCoroutine",
          "displayName": "always-inline-coroutine clang diagnostic",
          "enabled": false,
          "description": "-Walways-inline-coroutine clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walways-inline-coroutine)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownCudaVersion",
          "displayName": "unknown-cuda-version clang diagnostic",
          "enabled": false,
          "description": "-Wunknown-cuda-version clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-cuda-version)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicode",
          "displayName": "unicode clang diagnostic",
          "enabled": true,
          "description": "-Wunicode clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMultipleMoveVbase",
          "displayName": "multiple-move-vbase clang diagnostic",
          "enabled": true,
          "description": "-Wmultiple-move-vbase clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmultiple-move-vbase)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCstringFormatDirective",
          "displayName": "cstring-format-directive clang diagnostic",
          "enabled": true,
          "description": "-Wcstring-format-directive clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcstring-format-directive)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyAttributes",
          "displayName": "thread-safety-attributes clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-attributes clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-attributes)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExceptions",
          "displayName": "exceptions clang diagnostic",
          "enabled": true,
          "description": "-Wexceptions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexceptions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDivisionByZero",
          "displayName": "division-by-zero clang diagnostic",
          "enabled": true,
          "description": "-Wdivision-by-zero clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdivision-by-zero)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInterruptServiceRoutine",
          "displayName": "interrupt-service-routine clang diagnostic",
          "enabled": true,
          "description": "-Winterrupt-service-routine clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winterrupt-service-routine)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingSelectorName",
          "displayName": "missing-selector-name clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-selector-name clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-selector-name)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumConstexprConversion",
          "displayName": "enum-constexpr-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wenum-constexpr-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-constexpr-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFlexibleArrayExtensions",
          "displayName": "flexible-array-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wflexible-array-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wflexible-array-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDynamicExceptionSpec",
          "displayName": "dynamic-exception-spec clang diagnostic",
          "enabled": true,
          "description": "-Wdynamic-exception-spec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-exception-spec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofArrayDecay",
          "displayName": "sizeof-array-decay clang diagnostic",
          "enabled": true,
          "description": "-Wsizeof-array-decay clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-decay)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14Extensions",
          "displayName": "c++14-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++14-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool",
          "displayName": "implicit-conversion-floating-point-to-bool clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-conversion-floating-point-to-bool clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDateTime",
          "displayName": "date-time clang diagnostic",
          "enabled": true,
          "description": "-Wdate-time clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdate-time)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumCompare",
          "displayName": "deprecated-enum-compare clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-enum-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnStackAddress",
          "displayName": "return-stack-address clang diagnostic",
          "enabled": true,
          "description": "-Wreturn-stack-address clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-stack-address)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInstantiationAfterSpecialization",
          "displayName": "instantiation-after-specialization clang diagnostic",
          "enabled": true,
          "description": "-Winstantiation-after-specialization clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winstantiation-after-specialization)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC99Extensions",
          "displayName": "c99-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc99-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPassFailed",
          "displayName": "pass-failed clang diagnostic",
          "enabled": true,
          "description": "-Wpass-failed clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpass-failed)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumEnumConversion",
          "displayName": "enum-enum-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wenum-enum-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-enum-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuggestOverride",
          "displayName": "suggest-override clang diagnostic",
          "enabled": false,
          "description": "-Wsuggest-override clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-override)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCoroutineMissingUnhandledException",
          "displayName": "coroutine-missing-unhandled-exception clang diagnostic",
          "enabled": true,
          "description": "-Wcoroutine-missing-unhandled-exception clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcoroutine-missing-unhandled-exception)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSwitchEnum",
          "displayName": "switch-enum clang diagnostic",
          "enabled": true,
          "description": "-Wswitch-enum clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-enum)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullDereference",
          "displayName": "null-dereference clang diagnostic",
          "enabled": true,
          "description": "-Wnull-dereference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-dereference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticJumpSehFinally",
          "displayName": "jump-seh-finally clang diagnostic",
          "enabled": true,
          "description": "-Wjump-seh-finally clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wjump-seh-finally)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownWarningOption",
          "displayName": "unknown-warning-option clang diagnostic",
          "enabled": true,
          "description": "-Wunknown-warning-option clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-warning-option)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSourceUsesOpenmp",
          "displayName": "source-uses-openmp clang diagnostic",
          "enabled": true,
          "description": "-Wsource-uses-openmp clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsource-uses-openmp)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitwiseConditionalParentheses",
          "displayName": "bitwise-conditional-parentheses clang diagnostic",
          "enabled": true,
          "description": "-Wbitwise-conditional-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-conditional-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofPointerDiv",
          "displayName": "sizeof-pointer-div clang diagnostic",
          "enabled": true,
          "description": "-Wsizeof-pointer-div clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-div)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatNonliteral",
          "displayName": "format-nonliteral clang diagnostic",
          "enabled": true,
          "description": "-Wformat-nonliteral clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-nonliteral)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelector",
          "displayName": "selector clang diagnostic",
          "enabled": true,
          "description": "-Wselector clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wselector)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringPlusChar",
          "displayName": "string-plus-char clang diagnostic",
          "enabled": true,
          "description": "-Wstring-plus-char clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-char)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftCountOverflow",
          "displayName": "shift-count-overflow clang diagnostic",
          "enabled": true,
          "description": "-Wshift-count-overflow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-overflow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCppCompat",
          "displayName": "c++-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc--compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidTokenPaste",
          "displayName": "invalid-token-paste clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-token-paste clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-token-paste)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11ExtraSemi",
          "displayName": "c++11-extra-semi clang diagnostic",
          "enabled": true,
          "description": "-Wc++11-extra-semi clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extra-semi)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonportableVectorInitialization",
          "displayName": "nonportable-vector-initialization clang diagnostic",
          "enabled": true,
          "description": "-Wnonportable-vector-initialization clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-vector-initialization)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftDrectveSection",
          "displayName": "microsoft-drectve-section clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-drectve-section clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-drectve-section)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationHtml",
          "displayName": "documentation-html clang diagnostic",
          "enabled": false,
          "description": "-Wdocumentation-html clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-html)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuspiciousBzero",
          "displayName": "suspicious-bzero clang diagnostic",
          "enabled": true,
          "description": "-Wsuspicious-bzero clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuspicious-bzero)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVla",
          "displayName": "vla clang diagnostic",
          "enabled": true,
          "description": "-Wvla clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvla)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinRequiresHeader",
          "displayName": "builtin-requires-header clang diagnostic",
          "enabled": true,
          "description": "-Wbuiltin-requires-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-requires-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFallthroughPerFunction",
          "displayName": "implicit-fallthrough-per-function clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-fallthrough-per-function clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough-per-function)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDynamicClassMemaccess",
          "displayName": "dynamic-class-memaccess clang diagnostic",
          "enabled": true,
          "description": "-Wdynamic-class-memaccess clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-class-memaccess)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompoundTokenSplitByMacro",
          "displayName": "compound-token-split-by-macro clang diagnostic",
          "enabled": true,
          "description": "-Wcompound-token-split-by-macro clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-macro)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNewReturnsNull",
          "displayName": "new-returns-null clang diagnostic",
          "enabled": true,
          "description": "-Wnew-returns-null clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnew-returns-null)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedVolatileLvalue",
          "displayName": "unused-volatile-lvalue clang diagnostic",
          "enabled": true,
          "description": "-Wunused-volatile-lvalue clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-volatile-lvalue)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard",
          "displayName": "unsupported-availability-guard clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-availability-guard clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-availability-guard)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedCb",
          "displayName": "unsupported-cb clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-cb clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-cb)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinMemcpyChkSize",
          "displayName": "builtin-memcpy-chk-size clang diagnostic",
          "enabled": true,
          "description": "-Wbuiltin-memcpy-chk-size clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExplicitInitializeCall",
          "displayName": "explicit-initialize-call clang diagnostic",
          "enabled": true,
          "description": "-Wexplicit-initialize-call clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-initialize-call)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer",
          "displayName": "gnu-flexible-array-initializer clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-flexible-array-initializer clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-initializer)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedInternal",
          "displayName": "undefined-internal clang diagnostic",
          "enabled": true,
          "description": "-Wundefined-internal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPropertyAttributeMismatch",
          "displayName": "property-attribute-mismatch clang diagnostic",
          "enabled": true,
          "description": "-Wproperty-attribute-mismatch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wproperty-attribute-mismatch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC2xExtensions",
          "displayName": "c2x-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc2x-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc2x-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadow",
          "displayName": "shadow clang diagnostic",
          "enabled": true,
          "description": "-Wshadow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverAligned",
          "displayName": "over-aligned clang diagnostic",
          "enabled": true,
          "description": "-Wover-aligned clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wover-aligned)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnderalignedExceptionObject",
          "displayName": "underaligned-exception-object clang diagnostic",
          "enabled": true,
          "description": "-Wunderaligned-exception-object clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunderaligned-exception-object)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatZeroConversion",
          "displayName": "float-zero-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wfloat-zero-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-zero-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofPointerMemaccess",
          "displayName": "sizeof-pointer-memaccess clang diagnostic",
          "enabled": true,
          "description": "-Wsizeof-pointer-memaccess clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPsabi",
          "displayName": "psabi clang diagnostic",
          "enabled": true,
          "description": "-Wpsabi clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpsabi)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownArgument",
          "displayName": "unknown-argument clang diagnostic",
          "enabled": true,
          "description": "-Wunknown-argument clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-argument)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp20CompatPedantic",
          "displayName": "pre-c++20-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++20-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringConcatenation",
          "displayName": "string-concatenation clang diagnostic",
          "enabled": true,
          "description": "-Wstring-concatenation clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-concatenation)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStatementExpressionFromMacroExpansion",
          "displayName": "gnu-statement-expression-from-macro-expansion clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-statement-expression-from-macro-expansion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression-from-macro-expansion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVlaExtension",
          "displayName": "vla-extension clang diagnostic",
          "enabled": true,
          "description": "-Wvla-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvla-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeGenericAssoc",
          "displayName": "unreachable-code-generic-assoc clang diagnostic",
          "enabled": true,
          "description": "-Wunreachable-code-generic-assoc clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-generic-assoc)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingFieldInitializers",
          "displayName": "missing-field-initializers clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-field-initializers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-field-initializers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstantLogicalOperand",
          "displayName": "constant-logical-operand clang diagnostic",
          "enabled": true,
          "description": "-Wconstant-logical-operand clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-logical-operand)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp14Compat",
          "displayName": "pre-c++14-compat clang diagnostic",
          "enabled": false,
          "description": "-Wpre-c++14-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend",
          "displayName": "microsoft-unqualified-friend clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-unqualified-friend clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-unqualified-friend)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredQualifiers",
          "displayName": "ignored-qualifiers clang diagnostic",
          "enabled": true,
          "description": "-Wignored-qualifiers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-qualifiers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuLineMarker",
          "displayName": "gnu-line-marker clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-line-marker clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-line-marker)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumFloatConversion",
          "displayName": "enum-float-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wenum-float-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-float-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRangeLoopAnalysis",
          "displayName": "range-loop-analysis clang diagnostic",
          "enabled": true,
          "description": "-Wrange-loop-analysis clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-analysis)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityExtension",
          "displayName": "nullability-extension clang diagnostic",
          "enabled": true,
          "description": "-Wnullability-extension clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-extension)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticClangClPch",
          "displayName": "clang-cl-pch clang diagnostic",
          "enabled": false,
          "description": "-Wclang-cl-pch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclang-cl-pch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBranchProtection",
          "displayName": "branch-protection clang diagnostic",
          "enabled": true,
          "description": "-Wbranch-protection clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbranch-protection)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftInclude",
          "displayName": "microsoft-include clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-include clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-include)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLiteralConversion",
          "displayName": "literal-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wliteral-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAddressOfPackedMember",
          "displayName": "address-of-packed-member clang diagnostic",
          "enabled": true,
          "description": "-Waddress-of-packed-member clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-packed-member)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuFoldingConstant",
          "displayName": "gnu-folding-constant clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-folding-constant clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-folding-constant)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousDelete",
          "displayName": "ambiguous-delete clang diagnostic",
          "enabled": true,
          "description": "-Wambiguous-delete clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-delete)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenclUnsupportedRgba",
          "displayName": "opencl-unsupported-rgba clang diagnostic",
          "enabled": true,
          "description": "-Wopencl-unsupported-rgba clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopencl-unsupported-rgba)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyReference",
          "displayName": "thread-safety-reference clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-reference clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-reference)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpClauses",
          "displayName": "openmp-clauses clang diagnostic",
          "enabled": true,
          "description": "-Wopenmp-clauses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-clauses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpTarget",
          "displayName": "openmp-target clang diagnostic",
          "enabled": true,
          "description": "-Wopenmp-target clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-target)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAssignEnum",
          "displayName": "assign-enum clang diagnostic",
          "enabled": true,
          "description": "-Wassign-enum clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wassign-enum)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTypeSafety",
          "displayName": "type-safety clang diagnostic",
          "enabled": true,
          "description": "-Wtype-safety clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtype-safety)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousReversedOperator",
          "displayName": "ambiguous-reversed-operator clang diagnostic",
          "enabled": true,
          "description": "-Wambiguous-reversed-operator clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-reversed-operator)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleExceptionSpec",
          "displayName": "incompatible-exception-spec clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-exception-spec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-exception-spec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMisexpect",
          "displayName": "misexpect clang diagnostic",
          "enabled": true,
          "description": "-Wmisexpect clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmisexpect)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLongLong",
          "displayName": "long-long clang diagnostic",
          "enabled": true,
          "description": "-Wlong-long clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlong-long)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatExtraSemi",
          "displayName": "c++98-compat-extra-semi clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-compat-extra-semi clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-extra-semi)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingNoescape",
          "displayName": "missing-noescape clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-noescape clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noescape)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntToVoidPointerCast",
          "displayName": "int-to-void-pointer-cast clang diagnostic",
          "enabled": true,
          "description": "-Wint-to-void-pointer-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-void-pointer-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonLiteralNullConversion",
          "displayName": "non-literal-null-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wnon-literal-null-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-literal-null-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp2bExtensions",
          "displayName": "c++2b-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++2b-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2b-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerCompare",
          "displayName": "pointer-compare clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAbstractVbaseInit",
          "displayName": "abstract-vbase-init clang diagnostic",
          "enabled": true,
          "description": "-Wabstract-vbase-init clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wabstract-vbase-init)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory",
          "displayName": "invalid-or-nonexistent-directory clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-or-nonexistent-directory clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-or-nonexistent-directory)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLogicalOpParentheses",
          "displayName": "logical-op-parentheses clang diagnostic",
          "enabled": false,
          "description": "-Wlogical-op-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-op-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression",
          "displayName": "potentially-evaluated-expression clang diagnostic",
          "enabled": true,
          "description": "-Wpotentially-evaluated-expression clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpotentially-evaluated-expression)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticComment",
          "displayName": "comment clang diagnostic",
          "enabled": true,
          "description": "-Wcomment clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcomment)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTypedefRedefinition",
          "displayName": "typedef-redefinition clang diagnostic",
          "enabled": true,
          "description": "-Wtypedef-redefinition clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtypedef-redefinition)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation",
          "displayName": "static-inline-explicit-instantiation clang diagnostic",
          "enabled": true,
          "description": "-Wstatic-inline-explicit-instantiation clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedExceptionParameter",
          "displayName": "unused-exception-parameter clang diagnostic",
          "enabled": true,
          "description": "-Wunused-exception-parameter clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-exception-parameter)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOrderedCompareFunctionPointers",
          "displayName": "ordered-compare-function-pointers clang diagnostic",
          "enabled": true,
          "description": "-Wordered-compare-function-pointers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wordered-compare-function-pointers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec",
          "displayName": "deprecated-dynamic-exception-spec clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-dynamic-exception-spec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-dynamic-exception-spec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteNonVirtualDtor",
          "displayName": "delete-non-virtual-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wdelete-non-virtual-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-virtual-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCharize",
          "displayName": "microsoft-charize clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-charize clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-charize)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCalledOnceParameter",
          "displayName": "called-once-parameter clang diagnostic",
          "enabled": true,
          "description": "-Wcalled-once-parameter clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcalled-once-parameter)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatExtraArgs",
          "displayName": "format-extra-args clang diagnostic",
          "enabled": true,
          "description": "-Wformat-extra-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-extra-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusablePartialSpecialization",
          "displayName": "unusable-partial-specialization clang diagnostic",
          "enabled": true,
          "description": "-Wunusable-partial-specialization clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunusable-partial-specialization)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownSanitizers",
          "displayName": "unknown-sanitizers clang diagnostic",
          "enabled": true,
          "description": "-Wunknown-sanitizers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-sanitizers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedGetterReturnValue",
          "displayName": "unused-getter-return-value clang diagnostic",
          "enabled": true,
          "description": "-Wunused-getter-return-value clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-getter-return-value)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousEllipsis",
          "displayName": "ambiguous-ellipsis clang diagnostic",
          "enabled": true,
          "description": "-Wambiguous-ellipsis clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-ellipsis)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatEqual",
          "displayName": "float-equal clang diagnostic",
          "enabled": true,
          "description": "-Wfloat-equal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-equal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMisleadingIndentation",
          "displayName": "misleading-indentation clang diagnostic",
          "enabled": true,
          "description": "-Wmisleading-indentation clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmisleading-indentation)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingInitializerList",
          "displayName": "dangling-initializer-list clang diagnostic",
          "enabled": true,
          "description": "-Wdangling-initializer-list clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-initializer-list)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration",
          "displayName": "incompatible-library-redeclaration clang diagnostic",
          "enabled": true,
          "description": "-Wincompatible-library-redeclaration clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-library-redeclaration)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExceptionSpec",
          "displayName": "microsoft-exception-spec clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-exception-spec clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exception-spec)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14BinaryLiteral",
          "displayName": "c++14-binary-literal clang diagnostic",
          "enabled": true,
          "description": "-Wc++14-binary-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-binary-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecateLaxVecConvAll",
          "displayName": "deprecate-lax-vec-conv-all clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecate-lax-vec-conv-all clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecate-lax-vec-conv-all)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumCompareConditional",
          "displayName": "enum-compare-conditional clang diagnostic",
          "enabled": true,
          "description": "-Wenum-compare-conditional clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-conditional)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCoveredSwitchDefault",
          "displayName": "covered-switch-default clang diagnostic",
          "enabled": true,
          "description": "-Wcovered-switch-default clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcovered-switch-default)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnType",
          "displayName": "return-type clang diagnostic",
          "enabled": false,
          "description": "-Wreturn-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftSealed",
          "displayName": "microsoft-sealed clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-sealed clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-sealed)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp2aExtensions",
          "displayName": "c++2a-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++2a-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2a-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatOverflowConversion",
          "displayName": "float-overflow-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wfloat-overflow-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-overflow-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownDirectives",
          "displayName": "unknown-directives clang diagnostic",
          "enabled": true,
          "description": "-Wunknown-directives clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-directives)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingVariableDeclarations",
          "displayName": "missing-variable-declarations clang diagnostic",
          "enabled": false,
          "description": "-Wmissing-variable-declarations clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-variable-declarations)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPrivateHeader",
          "displayName": "private-header clang diagnostic",
          "enabled": true,
          "description": "-Wprivate-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstexprNotConst",
          "displayName": "constexpr-not-const clang diagnostic",
          "enabled": true,
          "description": "-Wconstexpr-not-const clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstexpr-not-const)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOptionIgnored",
          "displayName": "option-ignored clang diagnostic",
          "enabled": true,
          "description": "-Woption-ignored clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woption-ignored)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatConversion",
          "displayName": "float-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wfloat-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVisibility",
          "displayName": "visibility clang diagnostic",
          "enabled": true,
          "description": "-Wvisibility clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvisibility)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingGsl",
          "displayName": "dangling-gsl clang diagnostic",
          "enabled": true,
          "description": "-Wdangling-gsl clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-gsl)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredPragmaOptimize",
          "displayName": "ignored-pragma-optimize clang diagnostic",
          "enabled": false,
          "description": "-Wignored-pragma-optimize clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-optimize)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedPragma",
          "displayName": "deprecated-pragma clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-pragma clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-pragma)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedValue",
          "displayName": "unused-value clang diagnostic",
          "enabled": true,
          "description": "-Wunused-value clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-value)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOdr",
          "displayName": "odr clang diagnostic",
          "enabled": true,
          "description": "-Wodr clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wodr)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedIncrementBool",
          "displayName": "deprecated-increment-bool clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-increment-bool clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-increment-bool)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInfiniteRecursion",
          "displayName": "infinite-recursion clang diagnostic",
          "enabled": true,
          "description": "-Winfinite-recursion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winfinite-recursion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuNullPointerArithmetic",
          "displayName": "gnu-null-pointer-arithmetic clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-null-pointer-arithmetic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-null-pointer-arithmetic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDistributedObjectModifiers",
          "displayName": "distributed-object-modifiers clang diagnostic",
          "enabled": true,
          "description": "-Wdistributed-object-modifiers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdistributed-object-modifiers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFallthrough",
          "displayName": "implicit-fallthrough clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-fallthrough clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExcessInitializers",
          "displayName": "excess-initializers clang diagnostic",
          "enabled": true,
          "description": "-Wexcess-initializers clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexcess-initializers)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedModuleTs",
          "displayName": "deprecated-module-ts clang diagnostic",
          "enabled": false,
          "description": "-Wdeprecated-module-ts clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-module-ts)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinAssumeAlignedAlignment",
          "displayName": "builtin-assume-aligned-alignment clang diagnostic",
          "enabled": false,
          "description": "-Wbuiltin-assume-aligned-alignment clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-assume-aligned-alignment)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndef",
          "displayName": "undef clang diagnostic",
          "enabled": true,
          "description": "-Wundef clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundef)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral",
          "displayName": "implicitly-unsigned-literal clang diagnostic",
          "enabled": true,
          "description": "-Wimplicitly-unsigned-literal clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnavailableDeclarations",
          "displayName": "unavailable-declarations clang diagnostic",
          "enabled": true,
          "description": "-Wunavailable-declarations clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunavailable-declarations)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedAnonEnumEnumConversion",
          "displayName": "deprecated-anon-enum-enum-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-anon-enum-enum-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-anon-enum-enum-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatNonIso",
          "displayName": "format-non-iso clang diagnostic",
          "enabled": true,
          "description": "-Wformat-non-iso clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-non-iso)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11Extensions",
          "displayName": "c++11-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++11-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader",
          "displayName": "pragma-system-header-outside-header clang diagnostic",
          "enabled": true,
          "description": "-Wpragma-system-header-outside-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-system-header-outside-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftFlexibleArray",
          "displayName": "microsoft-flexible-array clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-flexible-array clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-flexible-array)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnableToOpenStatsFile",
          "displayName": "unable-to-open-stats-file clang diagnostic",
          "enabled": true,
          "description": "-Wunable-to-open-stats-file clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunable-to-open-stats-file)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHlslExtensions",
          "displayName": "hlsl-extensions clang diagnostic",
          "enabled": true,
          "description": "-Whlsl-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#whlsl-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc",
          "displayName": "arc-bridge-casts-disallowed-in-nonarc clang diagnostic",
          "enabled": true,
          "description": "-Warc-bridge-casts-disallowed-in-nonarc clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-bridge-casts-disallowed-in-nonarc)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAbsoluteValue",
          "displayName": "absolute-value clang diagnostic",
          "enabled": true,
          "description": "-Wabsolute-value clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wabsolute-value)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedThisCapture",
          "displayName": "deprecated-this-capture clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-this-capture clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-this-capture)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullability",
          "displayName": "nullability clang diagnostic",
          "enabled": true,
          "description": "-Wnullability clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLogicalNotParentheses",
          "displayName": "logical-not-parentheses clang diagnostic",
          "enabled": true,
          "description": "-Wlogical-not-parentheses clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-not-parentheses)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoImport",
          "displayName": "auto-import clang diagnostic",
          "enabled": true,
          "description": "-Wauto-import clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-import)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalPointerCompare",
          "displayName": "tautological-pointer-compare clang diagnostic",
          "enabled": true,
          "description": "-Wtautological-pointer-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-pointer-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC99Designator",
          "displayName": "c99-designator clang diagnostic",
          "enabled": true,
          "description": "-Wc99-designator clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-designator)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonnull",
          "displayName": "nonnull clang diagnostic",
          "enabled": true,
          "description": "-Wnonnull clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonnull)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader",
          "displayName": "invalid-initializer-from-system-header clang diagnostic",
          "enabled": true,
          "description": "-Winvalid-initializer-from-system-header clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-initializer-from-system-header)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedArrayCompare",
          "displayName": "deprecated-array-compare clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-array-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-array-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGlobalIsel",
          "displayName": "global-isel clang diagnostic",
          "enabled": true,
          "description": "-Wglobal-isel clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wglobal-isel)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCppMacro",
          "displayName": "microsoft-cpp-macro clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-cpp-macro clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cpp-macro)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopyWithDtor",
          "displayName": "deprecated-copy-with-dtor clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-copy-with-dtor clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-dtor)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfMove",
          "displayName": "self-move clang diagnostic",
          "enabled": true,
          "description": "-Wself-move clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-move)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCode",
          "displayName": "unreachable-code clang diagnostic",
          "enabled": true,
          "description": "-Wunreachable-code clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticZeroAsNullPointerConstant",
          "displayName": "zero-as-null-pointer-constant clang diagnostic",
          "enabled": false,
          "description": "-Wzero-as-null-pointer-constant clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-as-null-pointer-constant)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSwitch",
          "displayName": "switch clang diagnostic",
          "enabled": true,
          "description": "-Wswitch clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp2aCompatPedantic",
          "displayName": "c++2a-compat-pedantic clang diagnostic",
          "enabled": false,
          "description": "-Wc++2a-compat-pedantic clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2a-compat-pedantic)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMain",
          "displayName": "main clang diagnostic",
          "enabled": true,
          "description": "-Wmain clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmain)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyNegative",
          "displayName": "thread-safety-negative clang diagnostic",
          "enabled": true,
          "description": "-Wthread-safety-negative clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-negative)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDtorName",
          "displayName": "dtor-name clang diagnostic",
          "enabled": true,
          "description": "-Wdtor-name clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdtor-name)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedVisibility",
          "displayName": "unsupported-visibility clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-visibility clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-visibility)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer",
          "displayName": "gnu-compound-literal-initializer clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-compound-literal-initializer clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-compound-literal-initializer)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntToPointerCast",
          "displayName": "int-to-pointer-cast clang diagnostic",
          "enabled": true,
          "description": "-Wint-to-pointer-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-pointer-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAsmOperandWidths",
          "displayName": "asm-operand-widths clang diagnostic",
          "enabled": true,
          "description": "-Wasm-operand-widths clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wasm-operand-widths)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHeaderHygiene",
          "displayName": "header-hygiene clang diagnostic",
          "enabled": true,
          "description": "-Wheader-hygiene clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-hygiene)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuAutoType",
          "displayName": "gnu-auto-type clang diagnostic",
          "enabled": true,
          "description": "-Wgnu-auto-type clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-auto-type)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftTemplateShadow",
          "displayName": "microsoft-template-shadow clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-template-shadow clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template-shadow)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyDecomposition",
          "displayName": "empty-decomposition clang diagnostic",
          "enabled": true,
          "description": "-Wempty-decomposition clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-decomposition)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNontrivialMemaccess",
          "displayName": "nontrivial-memaccess clang diagnostic",
          "enabled": true,
          "description": "-Wnontrivial-memaccess clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnontrivial-memaccess)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSerializedDiagnostics",
          "displayName": "serialized-diagnostics clang diagnostic",
          "enabled": true,
          "description": "-Wserialized-diagnostics clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wserialized-diagnostics)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedAttributes",
          "displayName": "deprecated-attributes clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-attributes clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-attributes)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDarwinSdkSettings",
          "displayName": "darwin-sdk-settings clang diagnostic",
          "enabled": false,
          "description": "-Wdarwin-sdk-settings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdarwin-sdk-settings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnalignedAccess",
          "displayName": "unaligned-access clang diagnostic",
          "enabled": true,
          "description": "-Wunaligned-access clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-access)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBindingInCondition",
          "displayName": "binding-in-condition clang diagnostic",
          "enabled": true,
          "description": "-Wbinding-in-condition clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbinding-in-condition)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBindToTemporaryCopy",
          "displayName": "bind-to-temporary-copy clang diagnostic",
          "enabled": true,
          "description": "-Wbind-to-temporary-copy clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbind-to-temporary-copy)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerToEnumCast",
          "displayName": "pointer-to-enum-cast clang diagnostic",
          "enabled": true,
          "description": "-Wpointer-to-enum-cast clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-enum-cast)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumCompareConditional",
          "displayName": "deprecated-enum-compare-conditional clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-enum-compare-conditional clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-compare-conditional)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredOptimizationArgument",
          "displayName": "ignored-optimization-argument clang diagnostic",
          "enabled": true,
          "description": "-Wignored-optimization-argument clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-optimization-argument)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20AttributeExtensions",
          "displayName": "c++20-attribute-extensions clang diagnostic",
          "enabled": true,
          "description": "-Wc++20-attribute-extensions clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-attribute-extensions)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftAnonTag",
          "displayName": "microsoft-anon-tag clang diagnostic",
          "enabled": true,
          "description": "-Wmicrosoft-anon-tag clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-anon-tag)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFinalMacro",
          "displayName": "final-macro clang diagnostic",
          "enabled": true,
          "description": "-Wfinal-macro clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfinal-macro)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedImplementations",
          "displayName": "deprecated-implementations clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-implementations clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-implementations)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedAbs",
          "displayName": "unsupported-abs clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-abs clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abs)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedAbi",
          "displayName": "unsupported-abi clang diagnostic",
          "enabled": true,
          "description": "-Wunsupported-abi clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abi)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingConstinit",
          "displayName": "missing-constinit clang diagnostic",
          "enabled": true,
          "description": "-Wmissing-constinit clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-constinit)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReorderInitList",
          "displayName": "reorder-init-list clang diagnostic",
          "enabled": true,
          "description": "-Wreorder-init-list clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-init-list)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVecElemSize",
          "displayName": "vec-elem-size clang diagnostic",
          "enabled": true,
          "description": "-Wvec-elem-size clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvec-elem-size)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitInt",
          "displayName": "implicit-int clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-int clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompletionHandler",
          "displayName": "completion-handler clang diagnostic",
          "enabled": true,
          "description": "-Wcompletion-handler clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompletion-handler)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInlineNamespaceReopenedNoninline",
          "displayName": "inline-namespace-reopened-noninline clang diagnostic",
          "enabled": true,
          "description": "-Winline-namespace-reopened-noninline clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-namespace-reopened-noninline)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDtorTypedef",
          "displayName": "dtor-typedef clang diagnostic",
          "enabled": true,
          "description": "-Wdtor-typedef clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdtor-typedef)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17Compat",
          "displayName": "c++98-c++11-c++14-c++17-compat clang diagnostic",
          "enabled": false,
          "description": "-Wc++98-c++11-c++14-c++17-compat clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWarnings",
          "displayName": "#warnings clang diagnostic",
          "enabled": true,
          "description": "-W#warnings clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#w-warnings)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstantEvaluated",
          "displayName": "constant-evaluated clang diagnostic",
          "enabled": true,
          "description": "-Wconstant-evaluated clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-evaluated)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverrideModule",
          "displayName": "override-module clang diagnostic",
          "enabled": true,
          "description": "-Woverride-module clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverride-module)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedBuiltins",
          "displayName": "deprecated-builtins clang diagnostic",
          "enabled": true,
          "description": "-Wdeprecated-builtins clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-builtins)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatInsufficientArgs",
          "displayName": "format-insufficient-args clang diagnostic",
          "enabled": true,
          "description": "-Wformat-insufficient-args clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-insufficient-args)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredPragmas",
          "displayName": "ignored-pragmas clang diagnostic",
          "enabled": true,
          "description": "-Wignored-pragmas clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragmas)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignCompare",
          "displayName": "sign-compare clang diagnostic",
          "enabled": true,
          "description": "-Wsign-compare clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsign-compare)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConsumed",
          "displayName": "consumed clang diagnostic",
          "enabled": true,
          "description": "-Wconsumed clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconsumed)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteImplementation",
          "displayName": "incomplete-implementation clang diagnostic",
          "enabled": true,
          "description": "-Wincomplete-implementation clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-implementation)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitIntFloatConversion",
          "displayName": "implicit-int-float-conversion clang diagnostic",
          "enabled": true,
          "description": "-Wimplicit-int-float-conversion clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-float-conversion)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFinalDtorNonFinalClass",
          "displayName": "final-dtor-non-final-class clang diagnostic",
          "enabled": true,
          "description": "-Wfinal-dtor-non-final-class clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfinal-dtor-non-final-class)"
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReorder",
          "displayName": "reorder clang diagnostic",
          "enabled": true,
          "description": "-Wreorder clang diagnostic · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder)"
        }
      ]
    },
    {
      "name": "Unreal Engine",
      "inspections": [
        {
          "shortName": "CppUEBlueprintImplementableEventNotImplemented",
          "displayName": "BlueprintImplementableEvent function is not implemented in any blueprint",
          "enabled": true,
          "description": "BlueprintImplementableEvent function is not implemented in any blueprint"
        },
        {
          "shortName": "CppUE4BlueprintCallableFunctionMayBeStatic",
          "displayName": "BlueprintCallable function can be made static",
          "enabled": true,
          "description": "BlueprintCallable function can be made static"
        },
        {
          "shortName": "CppUE4CodingStandardUClassNamingViolationError",
          "displayName": "Inconsistent Unreal Engine UCLASS Naming",
          "enabled": true,
          "description": "Class is declared with UCLASS or USTRUCT macro but its name doesn't match the Unreal Engine's coding standard naming style; this will lead to a build error. This inspection includes three rules: classes inherited from AActor must be prefixed by 'A', classes inherited from UObject must be prefixed by 'U', and USTRUCTS must be prefixed by 'F'."
        },
        {
          "shortName": "CppUENonExistentInputAction",
          "displayName": "Action with this name does not exist",
          "enabled": true,
          "description": "Action with this name does not exist"
        },
        {
          "shortName": "CppUESourceFileWithoutStandardLibrary",
          "displayName": "C++ standard library headers not found",
          "enabled": true,
          "description": "C++ standard library headers cannot be resolved in an Unreal Engine source file. You might need to regenerate the project files."
        },
        {
          "shortName": "CppUE4ProbableMemoryIssuesWithUObjectsInContainer",
          "displayName": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers",
          "enabled": true,
          "description": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers"
        },
        {
          "shortName": "CppUESourceFileWithoutPredefinedMacros",
          "displayName": "Unreal Engine source file without predefined Unreal macros",
          "enabled": true,
          "description": "There are no Unreal Engine predefined macros in the project model for the current source file. You might need to regenerate the project files."
        },
        {
          "shortName": "CppUEVersionFileDoesntExist",
          "displayName": "Unreal Engine version file does not exist",
          "enabled": true,
          "description": "Unreal Engine version file specified in UE4.vcxproj does not exist. You might need to regenerate the project files."
        },
        {
          "shortName": "CppUEIncorrectEngineDirectory",
          "displayName": "Specified version of the engine project is not found",
          "enabled": true,
          "description": "Location of engine project does not correspond to the version of engine targeted by uproject. You might need to regenerate the project files."
        },
        {
          "shortName": "CppUseOfUndeclaredClass",
          "displayName": "Use of a class that has not been declared previously",
          "enabled": true,
          "description": "Use of a class that has not been declared previously"
        },
        {
          "shortName": "CppUEBlueprintCallableFunctionUnused",
          "displayName": "BlueprintCallable function is never used in Blueprint or C++ code",
          "enabled": true,
          "description": "BlueprintCallable function is never used in Blueprint or C++ code"
        },
        {
          "shortName": "CppUE4ProbableMemoryIssuesWithUObject",
          "displayName": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer",
          "enabled": true,
          "description": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer"
        },
        {
          "shortName": "CppUENonExistentInputAxis",
          "displayName": "Axis with this name does not exist",
          "enabled": true,
          "description": "Axis with this name does not exist"
        },
        {
          "shortName": "CppUE4BlueprintCallableFunctionMayBeConst",
          "displayName": "BlueprintCallable function can be made const",
          "enabled": true,
          "description": "BlueprintCallable function can be made const"
        },
        {
          "shortName": "CppUPropertyMacroCallHasNoEffect",
          "displayName": "UPROPERTY macro call has no effect",
          "enabled": true,
          "description": "UPROPERTY macro call has no effect outside of UCLASS or USTRUCT"
        },
        {
          "shortName": "CppUE4CodingStandardNamingViolationWarning",
          "displayName": "Inconsistent Unreal Engine Naming",
          "enabled": true,
          "description": "Name doesn't match the Unreal Engine's coding standard naming style. [Learn more...](https://docs.unrealengine.com/en-us/Programming/Development/CodingStandard#namingconventions)"
        },
        {
          "shortName": "CppUFunctionMacroCallHasNoEffect",
          "displayName": "UFUNCTION macro call has no effect",
          "enabled": true,
          "description": "UFUNCTION macro call has no effect outside of UCLASS, USTRUCT or IInterface"
        },
        {
          "shortName": "UnrealJsonLocalInspectionTool",
          "displayName": "Unreal Engine json inspection",
          "enabled": false,
          "description": "[RIDER-83134](https://youtrack.jetbrains.com/issue/RIDER-83134/)"
        }
      ]
    },
    {
      "name": "Language Usage Opportunities",
      "inspections": [
        {
          "shortName": "ConvertToCompoundAssignment",
          "displayName": "Use compound assignment",
          "enabled": true,
          "description": "Replace assignment with compound assignment"
        },
        {
          "shortName": "UseNegatedPatternInIsExpression",
          "displayName": "Convert negated 'is' expression into 'is' expression with negated pattern",
          "enabled": true,
          "description": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern"
        },
        {
          "shortName": "MergeNestedPropertyPatterns",
          "displayName": "Merge nested property patterns",
          "enabled": true,
          "description": "Simplify nested member access in a pattern by using the C# 10 extended property patterns syntax [Learn more...](https://www.jetbrains.com/help/rider/MergeNestedPropertyPatterns.html)"
        },
        {
          "shortName": "JoinNullCheckWithUsage",
          "displayName": "Join null check with assignment",
          "enabled": true,
          "description": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)"
        },
        {
          "shortName": "ConvertToLocalFunction",
          "displayName": "Convert delegate variable into local function",
          "enabled": true,
          "description": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)"
        },
        {
          "shortName": "ConvertConstructorToMemberInitializers",
          "displayName": "Convert constructor into member initializers",
          "enabled": true,
          "description": "Replace constructor with members initialized inline"
        },
        {
          "shortName": "UseIndexFromEndExpression",
          "displayName": "Use index from end expression",
          "enabled": true,
          "description": "Replace array indexer argument with index from end expression"
        },
        {
          "shortName": "ReplaceWithFieldKeyword",
          "displayName": "Replace with 'field' keyword",
          "enabled": true,
          "description": "Replace explicit field declaration with a 'field' keyword usage in corresponding property declaration (anonymous field)"
        },
        {
          "shortName": "IntroduceOptionalParameters.Global",
          "displayName": "Introduce optional parameters (non-private accessibility)",
          "enabled": true,
          "description": "Introduce optional parameters to overload method"
        },
        {
          "shortName": "UseObjectOrCollectionInitializer",
          "displayName": "Use object or collection initializer when possible",
          "enabled": true,
          "description": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)"
        },
        {
          "shortName": "UseUnsignedRightShiftOperator",
          "displayName": "Use unsigned right shift operator '>>>'",
          "enabled": true,
          "description": "Use unsigned right shift operator '\\>\\>\\>' instead of manual casting and shifting"
        },
        {
          "shortName": "ConvertToAutoPropertyWhenPossible",
          "displayName": "Convert property into auto-property (when possible)",
          "enabled": true,
          "description": "Converts property declaration into C# auto-property syntax"
        },
        {
          "shortName": "MoveVariableDeclarationInsideLoopCondition",
          "displayName": "Move variable declaration inside loop condition",
          "enabled": true,
          "description": "Declare variable inside a loop condition using pattern matching syntax to reduce its scope and avoid doing a C-style assignment as a side effect"
        },
        {
          "shortName": "ReplaceSliceWithRangeIndexer",
          "displayName": "Replace 'Slice' with range indexer",
          "enabled": true,
          "description": "Replace 'Slice' method call with range indexer access"
        },
        {
          "shortName": "SwapViaDeconstruction",
          "displayName": "Use deconstruction to swap variables",
          "enabled": true,
          "description": "Replace multiple assignments with single deconstructing assignment to perform swapping"
        },
        {
          "shortName": "InlineOutVariableDeclaration",
          "displayName": "Inline 'out' variable declaration",
          "enabled": true,
          "description": "Replace ordinary variable declaration with inline variable declaration under 'out' argument"
        },
        {
          "shortName": "UseWithExpressionToCopyTuple",
          "displayName": "Use 'with' expression to copy tuple",
          "enabled": true,
          "description": "Use 'with' expression to create a modified copy of a tuple"
        },
        {
          "shortName": "UsePositionalDeconstructionPattern",
          "displayName": "Use positional deconstruction pattern",
          "enabled": false,
          "description": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns"
        },
        {
          "shortName": "ConvertToPrimaryConstructor",
          "displayName": "Convert constructor into primary constructor",
          "enabled": true,
          "description": "Replace ordinary constructor with primary constructor"
        },
        {
          "shortName": "InvertIf",
          "displayName": "Invert 'if' statement to reduce nesting",
          "enabled": true,
          "description": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)"
        },
        {
          "shortName": "UseDiscardAssignment",
          "displayName": "Use discard assignment",
          "enabled": true,
          "description": "Replace intentionally ignored variable declaration 'var _ = ...' with discard assignment '_ = ...'."
        },
        {
          "shortName": "ReplaceObjectPatternWithVarPattern",
          "displayName": "Replace object pattern not performing any additional checks with 'var' pattern",
          "enabled": true,
          "description": "Replace '{ } x' object pattern not performing any additional checks with 'var x' pattern"
        },
        {
          "shortName": "ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator",
          "displayName": "Foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
          "enabled": true,
          "description": "A 'foreach' ('For Each' for VB.NET) can be converted into a LINQ-expression but another 'GetEnumerator' method will be used"
        },
        {
          "shortName": "UseWithExpressionToCopyRecord",
          "displayName": "Use 'with' expression to copy record",
          "enabled": true,
          "description": "Use 'with' expression to create a modified instance of a record"
        },
        {
          "shortName": "UseWithExpressionToCopyAnonymousObject",
          "displayName": "Use 'with' expression to copy anonymous object",
          "enabled": true,
          "description": "Use 'with' expression to create a modified copy of an anonymous object"
        },
        {
          "shortName": "UseVerbatimString",
          "displayName": "Literal length can be reduced by using verbatim string",
          "enabled": true,
          "description": "String literal length can be reduced by using verbatim string"
        },
        {
          "shortName": "ReplaceSubstringWithRangeIndexer",
          "displayName": "Replace 'Substring' with range indexer",
          "enabled": true,
          "description": "Replace 'Substring' method call with range indexer access"
        },
        {
          "shortName": "ReplaceAutoPropertyWithComputedProperty",
          "displayName": "Replace auto-property with computed property",
          "enabled": true,
          "description": "Replace auto-property with computed property to avoid storing trivial state in every type instance"
        },
        {
          "shortName": "ForCanBeConvertedToForeach",
          "displayName": "For-loop can be converted into foreach-loop",
          "enabled": true,
          "description": "For-loop can be converted into foreach-loop [Learn more...](https://www.jetbrains.com/help/rider/ForCanBeConvertedToForeach.html)"
        },
        {
          "shortName": "ReplaceConditionalExpressionWithNullCoalescing",
          "displayName": "Conditional expression can be rewritten as null-coalescing",
          "enabled": true,
          "description": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression"
        },
        {
          "shortName": "UseRawString",
          "displayName": "Use raw string",
          "enabled": true,
          "description": "Use raw string to eliminate escape sequences and keep normal indentation"
        },
        {
          "shortName": "UseNameofExpression",
          "displayName": "Use 'nameof' expression to reference name",
          "enabled": true,
          "description": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)"
        },
        {
          "shortName": "MergeIntoNegatedPattern",
          "displayName": "Merge negated null/pattern checks into complex pattern",
          "enabled": true,
          "description": "Merge sequential negated null/pattern checks into single recursive/logical pattern check"
        },
        {
          "shortName": "ConvertIfStatementToSwitchStatement",
          "displayName": "Convert 'if' statement into 'switch'",
          "enabled": true,
          "description": "Convert series of 'if' statements into single 'switch'"
        },
        {
          "shortName": "ConvertIfStatementToConditionalTernaryExpression",
          "displayName": "'if' statement can be rewritten as '?:' expression",
          "enabled": true,
          "description": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)"
        },
        {
          "shortName": "MoveToExistingPositionalDeconstructionPattern",
          "displayName": "Move to existing positional deconstruction pattern",
          "enabled": true,
          "description": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns in existing positional deconstruction"
        },
        {
          "shortName": "UseUtf8StringLiteral",
          "displayName": "Use UTF-8 string literal",
          "enabled": true,
          "description": "Byte array can be converted to a UTF-8 string literal"
        },
        {
          "shortName": "LambdaExpressionCanBeMadeStatic",
          "displayName": "Lambda expression/anonymous method can be made 'static'",
          "enabled": false,
          "description": "Lambda expression/anonymous method can be made 'static'"
        },
        {
          "shortName": "UseDeconstruction",
          "displayName": "Use deconstruction",
          "enabled": true,
          "description": "Decompose variable into positional components and replace variable usages with corresponding component variables"
        },
        {
          "shortName": "UseNameofForDependencyProperty",
          "displayName": "Use 'nameof' expression when registering a DependencyProperty",
          "enabled": true,
          "description": "Use 'nameof(ClrProperty)' when registering a DependencyProperty instead of a hardcoded name."
        },
        {
          "shortName": "ConvertIfStatementToNullCoalescingAssignment",
          "displayName": "'if' statement can be rewritten as '??=' assignment",
          "enabled": true,
          "description": "Convert the following code:\n\n```\n\r\n  if (x = null) x = expr;\r\n```\n\nTo:\n\n```\n\r\n   x ??= expr;\r\n```"
        },
        {
          "shortName": "MergeConditionalExpression",
          "displayName": "Merge conditional ?: expression into conditional access",
          "enabled": true,
          "description": "Merge conditional expression (?: ternary operator) into conditional access expression [Learn more...](https://www.jetbrains.com/help/rider/MergeConditionalExpression.html)"
        },
        {
          "shortName": "LoopCanBeConvertedToQuery",
          "displayName": "Loop can be converted into LINQ-expression",
          "enabled": true,
          "description": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)"
        },
        {
          "shortName": "InvokeAsExtensionMethod",
          "displayName": "Convert static method invocation into extension method call",
          "enabled": true,
          "description": "When extension method is invoked as static method, convert invocation into extension method syntax"
        },
        {
          "shortName": "UseNullPropagation",
          "displayName": "Replace if statement with null-propagating code",
          "enabled": true,
          "description": "Replaces if statement with null-propagating code using ?. operator [Learn more...](https://www.jetbrains.com/help/rider/UseNullPropagation.html)"
        },
        {
          "shortName": "UsePatternMatching",
          "displayName": "Convert 'as' expression type check and the following null check into pattern matching",
          "enabled": true,
          "description": "Replace variable for 'as' expression type check and the following check for it being not null with C# 7.0 pattern matching expression [Learn more...](https://www.jetbrains.com/help/rider/UsePatternMatching.html)"
        },
        {
          "shortName": "ReplaceSequenceEqualWithConstantPattern",
          "displayName": "Replace 'SequenceEqual' with constant pattern",
          "enabled": true,
          "description": "Replace 'SequenceEqual' invocation with constant pattern check"
        },
        {
          "shortName": "UseNegatedPatternMatching",
          "displayName": "Convert 'as' expression type check and the following null check into negated pattern matching",
          "enabled": true,
          "description": "Replace variable for 'as' expression type check and the following check for it being null with negated C# 7.0 pattern matching expression"
        },
        {
          "shortName": "ConvertClosureToMethodGroup",
          "displayName": "Convert lambda expression into method group",
          "enabled": true,
          "description": "Convert lambda expression or anonymous method into method group [Learn more...](https://www.jetbrains.com/help/rider/ConvertClosureToMethodGroup.html)"
        },
        {
          "shortName": "ConvertIfStatementToNullCoalescingExpression",
          "displayName": "'if' statement can be rewritten as '??' expression",
          "enabled": true,
          "description": "Convert the following code:\n\n```\n\r\n  var x = expr1;\r\n  if (x = null) x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  var x = expr1 ?? expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToNullCoalescingExpression.html)"
        },
        {
          "shortName": "ConvertToAutoPropertyWithPrivateSetter",
          "displayName": "Convert property into auto-property with private setter",
          "enabled": true,
          "description": "Converts property declaration into C# auto-property syntax with private setter declared"
        },
        {
          "shortName": "ConvertToStaticClass",
          "displayName": "Convert into static class",
          "enabled": true,
          "description": "Make class static"
        },
        {
          "shortName": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator",
          "displayName": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
          "enabled": true,
          "description": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression but another 'GetEnumerator' method will be used"
        },
        {
          "shortName": "ConvertSwitchStatementToSwitchExpression",
          "displayName": "Replace 'switch' statement with 'switch' expression",
          "enabled": true,
          "description": "Replace 'switch' statement with 'switch' expression"
        },
        {
          "shortName": "MergeIntoLogicalPattern",
          "displayName": "Merge null/pattern/value checks into 'or'/'and' patterns",
          "enabled": true,
          "description": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check"
        },
        {
          "shortName": "UseWithExpressionToCopyStruct",
          "displayName": "Use 'with' expression to copy struct",
          "enabled": true,
          "description": "Use 'with' expression to create a modified instance of a struct"
        },
        {
          "shortName": "MergeSequentialChecks",
          "displayName": "Merge sequential checks into single conditional access check",
          "enabled": true,
          "description": "Merge sequential null/type checks in \\&\\& or \\|\\| expressions into single conditional access check [Learn more...](https://www.jetbrains.com/help/rider/MergeSequentialChecks.html)"
        },
        {
          "shortName": "RedundantAccessorBody",
          "displayName": "Redundant accessor body",
          "enabled": true,
          "description": "Accessor body with simple 'field' keyword return or assignment is redundant"
        },
        {
          "shortName": "InlineTemporaryVariable",
          "displayName": "Inline temporary variable",
          "enabled": true,
          "description": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value"
        },
        {
          "shortName": "UseNullableReferenceTypesAnnotationSyntax",
          "displayName": "Use type annotation syntax",
          "enabled": true,
          "description": "Replace nullness attributes such as \\[CanBeNull\\] or \\[ItemCanBeNull\\] with nullable reference types' annotation syntax"
        },
        {
          "shortName": "ConvertToAutoProperty",
          "displayName": "Convert property into auto-property",
          "enabled": true,
          "description": "Converts property declaration into C# auto-property syntax [Learn more...](https://www.jetbrains.com/help/rider/ConvertToAutoProperty.html)"
        },
        {
          "shortName": "PassStringInterpolation",
          "displayName": "Pass string interpolation expression",
          "enabled": true,
          "description": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)"
        },
        {
          "shortName": "ConvertIfStatementToReturnStatement",
          "displayName": "'if-return' statement can be rewritten as 'return' statement",
          "enabled": true,
          "description": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)"
        },
        {
          "shortName": "UseNameOfInsteadOfTypeOf",
          "displayName": "Use 'nameof' expression to reference type name",
          "enabled": true,
          "description": "Replace 'typeof(T).Name' expression with constant 'nameof' expression"
        },
        {
          "shortName": "IntroduceOptionalParameters.Local",
          "displayName": "Introduce optional parameters (private accessibility)",
          "enabled": true,
          "description": "Introduce optional parameters to overload method [Learn more...](https://www.jetbrains.com/help/rider/IntroduceOptionalParameters.Local.html)"
        },
        {
          "shortName": "ConvertToUsingDeclaration",
          "displayName": "Convert into 'using' declaration",
          "enabled": true,
          "description": "Replace 'using' statement with 'using' declaration"
        },
        {
          "shortName": "LoopCanBePartlyConvertedToQuery",
          "displayName": "Part of loop's body can be converted into LINQ-expression",
          "enabled": false,
          "description": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression"
        },
        {
          "shortName": "ConvertToLambdaExpression",
          "displayName": "Convert into lambda expression",
          "enabled": true,
          "description": "Convert statement-bodied lambda into expression-bodied. Does not suggest the conversion when the expression contains nested closures or explicit side-effects. [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLambdaExpression.html)"
        },
        {
          "shortName": "LambdaExpressionMustBeStatic",
          "displayName": "Lambda expression/anonymous method must be 'static' to avoid allocations",
          "enabled": true,
          "description": "Lambda expression/anonymous method passed to parameter annotated by '\\[RequireStaticDelegate\\]' must be 'static' to help avoid introducing heap allocations"
        },
        {
          "shortName": "ReplaceWithPrimaryConstructorParameter",
          "displayName": "Replace with primary constructor parameter",
          "enabled": true,
          "description": "Replace explicit field declaration with a corresponding primary constructor parameter"
        },
        {
          "shortName": "UseNameofExpressionForPartOfTheString",
          "displayName": "Use 'nameof' expression to reference name in part of the string literal",
          "enabled": false,
          "description": "Replace part of the string literal with statically typed 'nameof' expression"
        },
        {
          "shortName": "ConvertToNullCoalescingCompoundAssignment",
          "displayName": "Use compound assignment",
          "enabled": true,
          "description": "Replace null-coalescing expression with compound assignment [Learn more...](https://www.jetbrains.com/help/rider/ConvertToNullCoalescingCompoundAssignment.html)"
        },
        {
          "shortName": "UseStringInterpolation",
          "displayName": "Use string interpolation expression",
          "enabled": true,
          "description": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)"
        },
        {
          "shortName": "ConvertConditionalTernaryExpressionToSwitchExpression",
          "displayName": "Replace ternary expression with 'switch' expression",
          "enabled": true,
          "description": "Replace chain of ternary expressions with 'switch' expression"
        },
        {
          "shortName": "ClassCannotBeInstantiated",
          "displayName": "Class cannot be instantiated",
          "enabled": true,
          "description": "Remove 'sealed' modifier or make constructor public or internal"
        },
        {
          "shortName": "UseAwaitUsing",
          "displayName": "Convert into 'await using' statement or declaration",
          "enabled": true,
          "description": "Replace 'using' statement or declaration with 'await using' form"
        },
        {
          "shortName": "LambdaShouldNotCaptureContext",
          "displayName": "Lambda expression/anonymous method must not have captures of the containing context",
          "enabled": true,
          "description": "Lambda expression/anonymous method passed to parameter annotated by '\\[RequireStaticDelegate\\]' attribute must not have captures of the containing context (local variables, local functions, 'this' reference) to avoid heap allocations [Learn more...](https://www.jetbrains.com/help/rider/LambdaShouldNotCaptureContext.html)"
        },
        {
          "shortName": "MergeIntoPattern",
          "displayName": "Merge null/pattern checks into complex pattern",
          "enabled": true,
          "description": "Merge sequential null/pattern checks into single recursive/logical pattern check"
        },
        {
          "shortName": "MergeAndPattern",
          "displayName": "Merge 'and' pattern",
          "enabled": true,
          "description": "Merge two operands of the 'and' pattern into single pattern"
        },
        {
          "shortName": "ConvertNullableToShortForm",
          "displayName": "Convert 'Nullable<T>' into 'T?'",
          "enabled": true,
          "description": "Rewrite nullable type in short form [Learn more...](https://www.jetbrains.com/help/rider/ConvertNullableToShortForm.html)"
        },
        {
          "shortName": "RegExpInspections",
          "displayName": "Regular Expression Inspections",
          "enabled": true,
          "description": "Regular Expression language inspections"
        }
      ]
    },
    {
      "name": "Clang-Tidy Checks",
      "inspections": [
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeReinterpretCast",
          "displayName": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-reinterpret-cast.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecAccept",
          "displayName": "android-cloexec-accept clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-accept clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-accept.html)"
        },
        {
          "shortName": "CppClangTidyModernizeReplaceRandomShuffle",
          "displayName": "modernize-replace-random-shuffle clang-tidy check",
          "enabled": true,
          "description": "modernize-replace-random-shuffle clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-random-shuffle.html)"
        },
        {
          "shortName": "CppClangTidyGoogleExplicitConstructor",
          "displayName": "google-explicit-constructor clang-tidy check",
          "enabled": false,
          "description": "google-explicit-constructor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/explicit-constructor.html)"
        },
        {
          "shortName": "CppClangTidyAbseilTimeSubtraction",
          "displayName": "abseil-time-subtraction clang-tidy check",
          "enabled": false,
          "description": "abseil-time-subtraction clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/time-subtraction.html)"
        },
        {
          "shortName": "CppClangTidyMiscNoRecursion",
          "displayName": "misc-no-recursion clang-tidy check",
          "enabled": false,
          "description": "misc-no-recursion clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/no-recursion.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityUseAnyofallof",
          "displayName": "readability-use-anyofallof clang-tidy check",
          "enabled": true,
          "description": "readability-use-anyofallof clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/use-anyofallof.html)"
        },
        {
          "shortName": "CppClangTidyHicppAvoidCArrays",
          "displayName": "hicpp-avoid-c-arrays clang-tidy check",
          "enabled": false,
          "description": "hicpp-avoid-c-arrays clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/avoid-c-arrays.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSizeofExpression",
          "displayName": "bugprone-sizeof-expression clang-tidy check",
          "enabled": true,
          "description": "bugprone-sizeof-expression clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/sizeof-expression.html)"
        },
        {
          "shortName": "CppClangTidyCertCon36C",
          "displayName": "cert-con36-c clang-tidy check",
          "enabled": false,
          "description": "cert-con36-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/con36-c.html)"
        },
        {
          "shortName": "CppClangTidyHicppNoArrayDecay",
          "displayName": "hicpp-no-array-decay clang-tidy check",
          "enabled": false,
          "description": "hicpp-no-array-decay clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-array-decay.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityElseAfterReturn",
          "displayName": "readability-else-after-return clang-tidy check",
          "enabled": false,
          "description": "readability-else-after-return clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/else-after-return.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProBoundsPointerArithmetic",
          "displayName": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-pointer-arithmetic.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidMagicNumbers",
          "displayName": "cppcoreguidelines-avoid-magic-numbers clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-avoid-magic-numbers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-magic-numbers.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityUppercaseLiteralSuffix",
          "displayName": "readability-uppercase-literal-suffix clang-tidy check",
          "enabled": false,
          "description": "readability-uppercase-literal-suffix clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/uppercase-literal-suffix.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantStringInit",
          "displayName": "readability-redundant-string-init clang-tidy check",
          "enabled": true,
          "description": "readability-redundant-string-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-string-init.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidGoto",
          "displayName": "cppcoreguidelines-avoid-goto clang-tidy check",
          "enabled": true,
          "description": "cppcoreguidelines-avoid-goto clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-goto.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
          "displayName": "readability-inconsistent-declaration-parameter-name clang-tidy check",
          "enabled": true,
          "description": "readability-inconsistent-declaration-parameter-name clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/inconsistent-declaration-parameter-name.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUnhandledExceptionAtNew",
          "displayName": "bugprone-unhandled-exception-at-new clang-tidy check",
          "enabled": false,
          "description": "bugprone-unhandled-exception-at-new clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unhandled-exception-at-new.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaVirtualInheritance",
          "displayName": "fuchsia-virtual-inheritance clang-tidy check",
          "enabled": false,
          "description": "fuchsia-virtual-inheritance clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/virtual-inheritance.html)"
        },
        {
          "shortName": "CppClangTidyCertCon54Cpp",
          "displayName": "cert-con54-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-con54-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/con54-cpp.html)"
        },
        {
          "shortName": "CppClangTidyGoogleObjcFunctionNaming",
          "displayName": "google-objc-function-naming clang-tidy check",
          "enabled": false,
          "description": "google-objc-function-naming clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-function-naming.html)"
        },
        {
          "shortName": "CppClangTidyCertMsc32C",
          "displayName": "cert-msc32-c clang-tidy check",
          "enabled": false,
          "description": "cert-msc32-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc32-c.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseEqualsDefault",
          "displayName": "hicpp-use-equals-default clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-equals-default clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-equals-default.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseTransparentFunctors",
          "displayName": "modernize-use-transparent-functors clang-tidy check",
          "enabled": true,
          "description": "modernize-use-transparent-functors clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-transparent-functors.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseNoexcept",
          "displayName": "hicpp-use-noexcept clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-noexcept clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-noexcept.html)"
        },
        {
          "shortName": "CppClangTidyMiscConfusableIdentifiers",
          "displayName": "misc-confusable-identifiers clang-tidy check",
          "enabled": true,
          "description": "misc-confusable-identifiers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/confusable-identifiers.html)"
        },
        {
          "shortName": "CppClangTidyCertMsc30C",
          "displayName": "cert-msc30-c clang-tidy check",
          "enabled": false,
          "description": "cert-msc30-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc30-c.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUnhandledSelfAssignment",
          "displayName": "bugprone-unhandled-self-assignment clang-tidy check",
          "enabled": true,
          "description": "bugprone-unhandled-self-assignment clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unhandled-self-assignment.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousMemoryComparison",
          "displayName": "bugprone-suspicious-memory-comparison clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-memory-comparison clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-memory-comparison.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesNonPrivateMemberVariablesInClasses",
          "displayName": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/non-private-member-variables-in-classes.html)"
        },
        {
          "shortName": "CppClangTidyGoogleBuildNamespaces",
          "displayName": "google-build-namespaces clang-tidy check",
          "enabled": false,
          "description": "google-build-namespaces clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-namespaces.html)"
        },
        {
          "shortName": "CppClangTidyBugproneForwardingReferenceOverload",
          "displayName": "bugprone-forwarding-reference-overload clang-tidy check",
          "enabled": true,
          "description": "bugprone-forwarding-reference-overload clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/forwarding-reference-overload.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseNullptr",
          "displayName": "modernize-use-nullptr clang-tidy check",
          "enabled": false,
          "description": "modernize-use-nullptr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-nullptr.html)"
        },
        {
          "shortName": "CppClangTidyModernizePassByValue",
          "displayName": "modernize-pass-by-value clang-tidy check",
          "enabled": true,
          "description": "modernize-pass-by-value clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/pass-by-value.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecPipe2",
          "displayName": "android-cloexec-pipe2 clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-pipe2 clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-pipe2.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceTypePromotionInMathFn",
          "displayName": "performance-type-promotion-in-math-fn clang-tidy check",
          "enabled": true,
          "description": "performance-type-promotion-in-math-fn clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/type-promotion-in-math-fn.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesExplicitVirtualFunctions",
          "displayName": "cppcoreguidelines-explicit-virtual-functions clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-explicit-virtual-functions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/explicit-virtual-functions.html)"
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityTodo",
          "displayName": "google-readability-todo clang-tidy check",
          "enabled": false,
          "description": "google-readability-todo clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-todo.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceImplicitConversionInLoop",
          "displayName": "performance-implicit-conversion-in-loop clang-tidy check",
          "enabled": true,
          "description": "performance-implicit-conversion-in-loop clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/implicit-conversion-in-loop.html)"
        },
        {
          "shortName": "CppClangTidyReadabilitySimplifyBooleanExpr",
          "displayName": "readability-simplify-boolean-expr clang-tidy check",
          "enabled": false,
          "description": "readability-simplify-boolean-expr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/simplify-boolean-expr.html)"
        },
        {
          "shortName": "CppClangTidyModernizeAvoidCArrays",
          "displayName": "modernize-avoid-c-arrays clang-tidy check",
          "enabled": false,
          "description": "modernize-avoid-c-arrays clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/avoid-c-arrays.html)"
        },
        {
          "shortName": "CppClangTidyModernizeMakeShared",
          "displayName": "modernize-make-shared clang-tidy check",
          "enabled": false,
          "description": "modernize-make-shared clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/make-shared.html)"
        },
        {
          "shortName": "CppClangTidyCertMsc50Cpp",
          "displayName": "cert-msc50-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-msc50-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc50-cpp.html)"
        },
        {
          "shortName": "CppClangTidyCertErr33C",
          "displayName": "cert-err33-c clang-tidy check",
          "enabled": true,
          "description": "cert-err33-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err33-c.html)"
        },
        {
          "shortName": "CppClangTidyBugproneNarrowingConversions",
          "displayName": "bugprone-narrowing-conversions clang-tidy check",
          "enabled": true,
          "description": "bugprone-narrowing-conversions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/narrowing-conversions.html)"
        },
        {
          "shortName": "CppClangTidyCertErr60Cpp",
          "displayName": "cert-err60-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-err60-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err60-cpp.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityFunctionCognitiveComplexity",
          "displayName": "readability-function-cognitive-complexity clang-tidy check",
          "enabled": false,
          "description": "readability-function-cognitive-complexity clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/function-cognitive-complexity.html)"
        },
        {
          "shortName": "CppClangTidyPortabilityRestrictSystemIncludes",
          "displayName": "portability-restrict-system-includes clang-tidy check",
          "enabled": false,
          "description": "portability-restrict-system-includes clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/restrict-system-includes.html)"
        },
        {
          "shortName": "CppClangTidyCertErr34C",
          "displayName": "cert-err34-c clang-tidy check",
          "enabled": true,
          "description": "cert-err34-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err34-c.html)"
        },
        {
          "shortName": "CppClangTidyObjcMissingHash",
          "displayName": "objc-missing-hash clang-tidy check",
          "enabled": true,
          "description": "objc-missing-hash clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/missing-hash.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantPreprocessor",
          "displayName": "readability-redundant-preprocessor clang-tidy check",
          "enabled": true,
          "description": "readability-redundant-preprocessor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-preprocessor.html)"
        },
        {
          "shortName": "CppClangTidyHicppNewDeleteOperators",
          "displayName": "hicpp-new-delete-operators clang-tidy check",
          "enabled": false,
          "description": "hicpp-new-delete-operators clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/new-delete-operators.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseUsing",
          "displayName": "modernize-use-using clang-tidy check",
          "enabled": false,
          "description": "modernize-use-using clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-using.html)"
        },
        {
          "shortName": "CppClangTidyBugproneTooSmallLoopVariable",
          "displayName": "bugprone-too-small-loop-variable clang-tidy check",
          "enabled": true,
          "description": "bugprone-too-small-loop-variable clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/too-small-loop-variable.html)"
        },
        {
          "shortName": "CppClangTidyMiscNonPrivateMemberVariablesInClasses",
          "displayName": "misc-non-private-member-variables-in-classes clang-tidy check",
          "enabled": false,
          "description": "misc-non-private-member-variables-in-classes clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/non-private-member-variables-in-classes.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityIdentifierLength",
          "displayName": "readability-identifier-length clang-tidy check",
          "enabled": false,
          "description": "readability-identifier-length clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/identifier-length.html)"
        },
        {
          "shortName": "CppClangTidyHicppNoexceptMove",
          "displayName": "hicpp-noexcept-move clang-tidy check",
          "enabled": false,
          "description": "hicpp-noexcept-move clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/noexcept-move.html)"
        },
        {
          "shortName": "CppClangTidyAndroidComparisonInTempFailureRetry",
          "displayName": "android-comparison-in-temp-failure-retry clang-tidy check",
          "enabled": false,
          "description": "android-comparison-in-temp-failure-retry clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/comparison-in-temp-failure-retry.html)"
        },
        {
          "shortName": "CppClangTidyCertOop57Cpp",
          "displayName": "cert-oop57-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-oop57-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop57-cpp.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl21Cpp",
          "displayName": "cert-dcl21-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-dcl21-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl21-cpp.html)"
        },
        {
          "shortName": "CppClangTidyHighlighting",
          "displayName": "Unknown clang-tidy checks",
          "enabled": true,
          "description": "Unknown clang-tidy checks."
        },
        {
          "shortName": "CppClangTidyModernizeUseTrailingReturnType",
          "displayName": "modernize-use-trailing-return-type clang-tidy check",
          "enabled": false,
          "description": "modernize-use-trailing-return-type clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-trailing-return-type.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUnusedRaii",
          "displayName": "bugprone-unused-raii clang-tidy check",
          "enabled": true,
          "description": "bugprone-unused-raii clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-raii.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc",
          "displayName": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check",
          "enabled": true,
          "description": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-operator-in-strlen-in-alloc.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecEpollCreate",
          "displayName": "android-cloexec-epoll-create clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-epoll-create clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-epoll-create.html)"
        },
        {
          "shortName": "CppClangTidyBoostUseToString",
          "displayName": "boost-use-to-string clang-tidy check",
          "enabled": true,
          "description": "boost-use-to-string clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/boost/use-to-string.html)"
        },
        {
          "shortName": "CppClangTidyBugproneThrowKeywordMissing",
          "displayName": "bugprone-throw-keyword-missing clang-tidy check",
          "enabled": true,
          "description": "bugprone-throw-keyword-missing clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/throw-keyword-missing.html)"
        },
        {
          "shortName": "CppClangTidyZirconTemporaryObjects",
          "displayName": "zircon-temporary-objects clang-tidy check",
          "enabled": false,
          "description": "zircon-temporary-objects clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/zircon/temporary-objects.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
          "displayName": "cppcoreguidelines-special-member-functions clang-tidy check",
          "enabled": true,
          "description": "cppcoreguidelines-special-member-functions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/special-member-functions.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesSlicing",
          "displayName": "cppcoreguidelines-slicing clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-slicing clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/slicing.html)"
        },
        {
          "shortName": "CppClangTidyMiscMisleadingBidirectional",
          "displayName": "misc-misleading-bidirectional clang-tidy check",
          "enabled": true,
          "description": "misc-misleading-bidirectional clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misleading-bidirectional.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityConvertMemberFunctionsToStatic",
          "displayName": "readability-convert-member-functions-to-static clang-tidy check",
          "enabled": false,
          "description": "readability-convert-member-functions-to-static clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/convert-member-functions-to-static.html)"
        },
        {
          "shortName": "CppClangTidyHicppVararg",
          "displayName": "hicpp-vararg clang-tidy check",
          "enabled": false,
          "description": "hicpp-vararg clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/vararg.html)"
        },
        {
          "shortName": "CppClangTidyMiscDefinitionsInHeaders",
          "displayName": "misc-definitions-in-headers clang-tidy check",
          "enabled": false,
          "description": "misc-definitions-in-headers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/definitions-in-headers.html)"
        },
        {
          "shortName": "CppClangTidyMiscNewDeleteOverloads",
          "displayName": "misc-new-delete-overloads clang-tidy check",
          "enabled": true,
          "description": "misc-new-delete-overloads clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/new-delete-overloads.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousReallocUsage",
          "displayName": "bugprone-suspicious-realloc-usage clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-realloc-usage clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-realloc-usage.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSpuriouslyWakeUpFunctions",
          "displayName": "bugprone-spuriously-wake-up-functions clang-tidy check",
          "enabled": true,
          "description": "bugprone-spuriously-wake-up-functions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/spuriously-wake-up-functions.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecAccept4",
          "displayName": "android-cloexec-accept4 clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-accept4 clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-accept4.html)"
        },
        {
          "shortName": "CppClangTidyLlvmlibcCalleeNamespace",
          "displayName": "llvmlibc-callee-namespace clang-tidy check",
          "enabled": false,
          "description": "llvmlibc-callee-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/callee-namespace.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationComparison",
          "displayName": "abseil-duration-comparison clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-comparison clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-comparison.html)"
        },
        {
          "shortName": "CppClangTidyHicppFunctionSize",
          "displayName": "hicpp-function-size clang-tidy check",
          "enabled": false,
          "description": "hicpp-function-size clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/function-size.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaOverloadedOperator",
          "displayName": "fuchsia-overloaded-operator clang-tidy check",
          "enabled": false,
          "description": "fuchsia-overloaded-operator clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/overloaded-operator.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceFasterStringFind",
          "displayName": "performance-faster-string-find clang-tidy check",
          "enabled": true,
          "description": "performance-faster-string-find clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/faster-string-find.html)"
        },
        {
          "shortName": "CppClangTidyHicppMemberInit",
          "displayName": "hicpp-member-init clang-tidy check",
          "enabled": false,
          "description": "hicpp-member-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/member-init.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantAccessSpecifiers",
          "displayName": "readability-redundant-access-specifiers clang-tidy check",
          "enabled": false,
          "description": "readability-redundant-access-specifiers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-access-specifiers.html)"
        },
        {
          "shortName": "CppClangTidyModernizeMakeUnique",
          "displayName": "modernize-make-unique clang-tidy check",
          "enabled": false,
          "description": "modernize-make-unique clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/make-unique.html)"
        },
        {
          "shortName": "CppClangTidyGoogleBuildUsingNamespace",
          "displayName": "google-build-using-namespace clang-tidy check",
          "enabled": false,
          "description": "google-build-using-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-using-namespace.html)"
        },
        {
          "shortName": "CppClangTidyGoogleRuntimeInt",
          "displayName": "google-runtime-int clang-tidy check",
          "enabled": false,
          "description": "google-runtime-int clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/runtime-int.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSharedPtrArrayMismatch",
          "displayName": "bugprone-shared-ptr-array-mismatch clang-tidy check",
          "enabled": true,
          "description": "bugprone-shared-ptr-array-mismatch clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/shared-ptr-array-mismatch.html)"
        },
        {
          "shortName": "CppClangTidyHicppNamedParameter",
          "displayName": "hicpp-named-parameter clang-tidy check",
          "enabled": false,
          "description": "hicpp-named-parameter clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/named-parameter.html)"
        },
        {
          "shortName": "CppClangTidyBugproneParentVirtualCall",
          "displayName": "bugprone-parent-virtual-call clang-tidy check",
          "enabled": true,
          "description": "bugprone-parent-virtual-call clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/parent-virtual-call.html)"
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityAvoidUnderscoreInGoogletestName",
          "displayName": "google-readability-avoid-underscore-in-googletest-name clang-tidy check",
          "enabled": false,
          "description": "google-readability-avoid-underscore-in-googletest-name clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-avoid-underscore-in-googletest-name.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceNoAutomaticMove",
          "displayName": "performance-no-automatic-move clang-tidy check",
          "enabled": true,
          "description": "performance-no-automatic-move clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/no-automatic-move.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesInterfacesGlobalInit",
          "displayName": "cppcoreguidelines-interfaces-global-init clang-tidy check",
          "enabled": true,
          "description": "cppcoreguidelines-interfaces-global-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/interfaces-global-init.html)"
        },
        {
          "shortName": "CppClangTidyBugproneStringConstructor",
          "displayName": "bugprone-string-constructor clang-tidy check",
          "enabled": true,
          "description": "bugprone-string-constructor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-constructor.html)"
        },
        {
          "shortName": "CppClangTidyCertEnv33C",
          "displayName": "cert-env33-c clang-tidy check",
          "enabled": false,
          "description": "cert-env33-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/env33-c.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseEqualsDefault",
          "displayName": "modernize-use-equals-default clang-tidy check",
          "enabled": true,
          "description": "modernize-use-equals-default clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-equals-default.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityNamedParameter",
          "displayName": "readability-named-parameter clang-tidy check",
          "enabled": false,
          "description": "readability-named-parameter clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/named-parameter.html)"
        },
        {
          "shortName": "CppClangTidyCertErr58Cpp",
          "displayName": "cert-err58-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-err58-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err58-cpp.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationFactoryFloat",
          "displayName": "abseil-duration-factory-float clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-factory-float clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-factory-float.html)"
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityCasting",
          "displayName": "google-readability-casting clang-tidy check",
          "enabled": false,
          "description": "google-readability-casting clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-casting.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationConversionCast",
          "displayName": "abseil-duration-conversion-cast clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-conversion-cast clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-conversion-cast.html)"
        },
        {
          "shortName": "CppClangTidyCertOop54Cpp",
          "displayName": "cert-oop54-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-oop54-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop54-cpp.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityMakeMemberFunctionConst",
          "displayName": "readability-make-member-function-const clang-tidy check",
          "enabled": false,
          "description": "readability-make-member-function-const clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/make-member-function-const.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantControlFlow",
          "displayName": "readability-redundant-control-flow clang-tidy check",
          "enabled": false,
          "description": "readability-redundant-control-flow clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-control-flow.html)"
        },
        {
          "shortName": "CppClangTidyObjcAvoidNserrorInit",
          "displayName": "objc-avoid-nserror-init clang-tidy check",
          "enabled": true,
          "description": "objc-avoid-nserror-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/avoid-nserror-init.html)"
        },
        {
          "shortName": "CppClangTidyBugproneAssignmentInIfCondition",
          "displayName": "bugprone-assignment-in-if-condition clang-tidy check",
          "enabled": false,
          "description": "bugprone-assignment-in-if-condition clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/assignment-in-if-condition.html)"
        },
        {
          "shortName": "CppClangTidyCertErr09Cpp",
          "displayName": "cert-err09-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-err09-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err09-cpp.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousMissingComma",
          "displayName": "bugprone-suspicious-missing-comma clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-missing-comma clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-missing-comma.html)"
        },
        {
          "shortName": "CppClangTidyGoogleObjcAvoidThrowingException",
          "displayName": "google-objc-avoid-throwing-exception clang-tidy check",
          "enabled": false,
          "description": "google-objc-avoid-throwing-exception clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-avoid-throwing-exception.html)"
        },
        {
          "shortName": "CppClangTidyMiscRedundantExpression",
          "displayName": "misc-redundant-expression clang-tidy check",
          "enabled": true,
          "description": "misc-redundant-expression clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/redundant-expression.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseAuto",
          "displayName": "hicpp-use-auto clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-auto clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-auto.html)"
        },
        {
          "shortName": "CppClangTidyAbseilNoInternalDependencies",
          "displayName": "abseil-no-internal-dependencies clang-tidy check",
          "enabled": false,
          "description": "abseil-no-internal-dependencies clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/no-internal-dependencies.html)"
        },
        {
          "shortName": "CppClangTidyBugproneReservedIdentifier",
          "displayName": "bugprone-reserved-identifier clang-tidy check",
          "enabled": true,
          "description": "bugprone-reserved-identifier clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/reserved-identifier.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityContainerSizeEmpty",
          "displayName": "readability-container-size-empty clang-tidy check",
          "enabled": true,
          "description": "readability-container-size-empty clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-size-empty.html)"
        },
        {
          "shortName": "CppClangTidyGoogleBuildExplicitMakePair",
          "displayName": "google-build-explicit-make-pair clang-tidy check",
          "enabled": false,
          "description": "google-build-explicit-make-pair clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-explicit-make-pair.html)"
        },
        {
          "shortName": "CppClangTidyBugproneAssertSideEffect",
          "displayName": "bugprone-assert-side-effect clang-tidy check",
          "enabled": true,
          "description": "bugprone-assert-side-effect clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/assert-side-effect.html)"
        },
        {
          "shortName": "CppClangTidyHicppDeprecatedHeaders",
          "displayName": "hicpp-deprecated-headers clang-tidy check",
          "enabled": false,
          "description": "hicpp-deprecated-headers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/deprecated-headers.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSignalHandler",
          "displayName": "bugprone-signal-handler clang-tidy check",
          "enabled": true,
          "description": "bugprone-signal-handler clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/signal-handler.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceInefficientAlgorithm",
          "displayName": "performance-inefficient-algorithm clang-tidy check",
          "enabled": true,
          "description": "performance-inefficient-algorithm clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-algorithm.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeCstyleCast",
          "displayName": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-cstyle-cast.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl58Cpp",
          "displayName": "cert-dcl58-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-dcl58-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl58-cpp.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUndelegatedConstructor",
          "displayName": "bugprone-undelegated-constructor clang-tidy check",
          "enabled": true,
          "description": "bugprone-undelegated-constructor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/undelegated-constructor.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidReferenceCoroutineParameters",
          "displayName": "cppcoreguidelines-avoid-reference-coroutine-parameters clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-avoid-reference-coroutine-parameters clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-reference-coroutine-parameters.html)"
        },
        {
          "shortName": "CppClangTidyModernizeLoopConvert",
          "displayName": "modernize-loop-convert clang-tidy check",
          "enabled": true,
          "description": "modernize-loop-convert clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/loop-convert.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMisplacedPointerArithmeticInAlloc",
          "displayName": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check",
          "enabled": true,
          "description": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-pointer-arithmetic-in-alloc.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMoveForwardingReference",
          "displayName": "bugprone-move-forwarding-reference clang-tidy check",
          "enabled": true,
          "description": "bugprone-move-forwarding-reference clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/move-forwarding-reference.html)"
        },
        {
          "shortName": "CppClangTidyHicppAvoidGoto",
          "displayName": "hicpp-avoid-goto clang-tidy check",
          "enabled": true,
          "description": "hicpp-avoid-goto clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/avoid-goto.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesOwningMemory",
          "displayName": "cppcoreguidelines-owning-memory clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-owning-memory clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/owning-memory.html)"
        },
        {
          "shortName": "CppClangTidyHicppBracesAroundStatements",
          "displayName": "hicpp-braces-around-statements clang-tidy check",
          "enabled": false,
          "description": "hicpp-braces-around-statements clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/braces-around-statements.html)"
        },
        {
          "shortName": "CppClangTidyModernizeReplaceDisallowCopyAndAssignMacro",
          "displayName": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check",
          "enabled": true,
          "description": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-disallow-copy-and-assign-macro.html)"
        },
        {
          "shortName": "CppClangTidyBugproneStringviewNullptr",
          "displayName": "bugprone-stringview-nullptr clang-tidy check",
          "enabled": true,
          "description": "bugprone-stringview-nullptr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/stringview-nullptr.html)"
        },
        {
          "shortName": "CppClangTidyMiscThrowByValueCatchByReference",
          "displayName": "misc-throw-by-value-catch-by-reference clang-tidy check",
          "enabled": true,
          "description": "misc-throw-by-value-catch-by-reference clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/throw-by-value-catch-by-reference.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseEqualsDelete",
          "displayName": "modernize-use-equals-delete clang-tidy check",
          "enabled": true,
          "description": "modernize-use-equals-delete clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-equals-delete.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaStaticallyConstructedObjects",
          "displayName": "fuchsia-statically-constructed-objects clang-tidy check",
          "enabled": false,
          "description": "fuchsia-statically-constructed-objects clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/statically-constructed-objects.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidConstOrRefDataMembers",
          "displayName": "cppcoreguidelines-avoid-const-or-ref-data-members clang-tidy check",
          "enabled": true,
          "description": "cppcoreguidelines-avoid-const-or-ref-data-members clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-const-or-ref-data-members.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseNoexcept",
          "displayName": "modernize-use-noexcept clang-tidy check",
          "enabled": true,
          "description": "modernize-use-noexcept clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-noexcept.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceNoexceptMoveConstructor",
          "displayName": "performance-noexcept-move-constructor clang-tidy check",
          "enabled": false,
          "description": "performance-noexcept-move-constructor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/noexcept-move-constructor.html)"
        },
        {
          "shortName": "CppClangTidyBugproneExceptionEscape",
          "displayName": "bugprone-exception-escape clang-tidy check",
          "enabled": false,
          "description": "bugprone-exception-escape clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/exception-escape.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceInefficientVectorOperation",
          "displayName": "performance-inefficient-vector-operation clang-tidy check",
          "enabled": true,
          "description": "performance-inefficient-vector-operation clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-vector-operation.html)"
        },
        {
          "shortName": "CppClangTidyLlvmPreferIsaOrDynCastInConditionals",
          "displayName": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check",
          "enabled": false,
          "description": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/prefer-isa-or-dyn-cast-in-conditionals.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantFunctionPtrDereference",
          "displayName": "readability-redundant-function-ptr-dereference clang-tidy check",
          "enabled": true,
          "description": "readability-redundant-function-ptr-dereference clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-function-ptr-dereference.html)"
        },
        {
          "shortName": "CppClangTidyModernizeAvoidBind",
          "displayName": "modernize-avoid-bind clang-tidy check",
          "enabled": true,
          "description": "modernize-avoid-bind clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/avoid-bind.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityStaticAccessedThroughInstance",
          "displayName": "readability-static-accessed-through-instance clang-tidy check",
          "enabled": true,
          "description": "readability-static-accessed-through-instance clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/static-accessed-through-instance.html)"
        },
        {
          "shortName": "CppClangTidyCertMem57Cpp",
          "displayName": "cert-mem57-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-mem57-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/mem57-cpp.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantStringCstr",
          "displayName": "readability-redundant-string-cstr clang-tidy check",
          "enabled": true,
          "description": "readability-redundant-string-cstr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-string-cstr.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesPreferMemberInitializer",
          "displayName": "cppcoreguidelines-prefer-member-initializer clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-prefer-member-initializer clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/prefer-member-initializer.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMacroParentheses",
          "displayName": "bugprone-macro-parentheses clang-tidy check",
          "enabled": true,
          "description": "bugprone-macro-parentheses clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/macro-parentheses.html)"
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityFunctionSize",
          "displayName": "google-readability-function-size clang-tidy check",
          "enabled": false,
          "description": "google-readability-function-size clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-function-size.html)"
        },
        {
          "shortName": "CppClangTidyAbseilTimeComparison",
          "displayName": "abseil-time-comparison clang-tidy check",
          "enabled": false,
          "description": "abseil-time-comparison clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/time-comparison.html)"
        },
        {
          "shortName": "CppClangTidyConcurrencyMtUnsafe",
          "displayName": "concurrency-mt-unsafe clang-tidy check",
          "enabled": true,
          "description": "concurrency-mt-unsafe clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/concurrency/mt-unsafe.html)"
        },
        {
          "shortName": "CppClangTidyAbseilStringFindStrContains",
          "displayName": "abseil-string-find-str-contains clang-tidy check",
          "enabled": false,
          "description": "abseil-string-find-str-contains clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/string-find-str-contains.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceMoveConstArg",
          "displayName": "performance-move-const-arg clang-tidy check",
          "enabled": true,
          "description": "performance-move-const-arg clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/move-const-arg.html)"
        },
        {
          "shortName": "CppClangTidyMiscMisplacedConst",
          "displayName": "misc-misplaced-const clang-tidy check",
          "enabled": false,
          "description": "misc-misplaced-const clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misplaced-const.html)"
        },
        {
          "shortName": "CppClangTidyLlvmHeaderGuard",
          "displayName": "llvm-header-guard clang-tidy check",
          "enabled": false,
          "description": "llvm-header-guard clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/header-guard.html)"
        },
        {
          "shortName": "CppClangTidyBugproneIntegerDivision",
          "displayName": "bugprone-integer-division clang-tidy check",
          "enabled": true,
          "description": "bugprone-integer-division clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/integer-division.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProBoundsConstantArrayIndex",
          "displayName": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-constant-array-index.html)"
        },
        {
          "shortName": "CppClangTidyLlvmlibcImplementationInNamespace",
          "displayName": "llvmlibc-implementation-in-namespace clang-tidy check",
          "enabled": false,
          "description": "llvmlibc-implementation-in-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/implementation-in-namespace.html)"
        },
        {
          "shortName": "CppClangTidyBugproneBranchClone",
          "displayName": "bugprone-branch-clone clang-tidy check",
          "enabled": true,
          "description": "bugprone-branch-clone clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/branch-clone.html)"
        },
        {
          "shortName": "CppClangTidyBugproneEasilySwappableParameters",
          "displayName": "bugprone-easily-swappable-parameters clang-tidy check",
          "enabled": false,
          "description": "bugprone-easily-swappable-parameters clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/easily-swappable-parameters.html)"
        },
        {
          "shortName": "CppClangTidyMpiTypeMismatch",
          "displayName": "mpi-type-mismatch clang-tidy check",
          "enabled": true,
          "description": "mpi-type-mismatch clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/mpi/type-mismatch.html)"
        },
        {
          "shortName": "CppClangTidyCertPos47C",
          "displayName": "cert-pos47-c clang-tidy check",
          "enabled": false,
          "description": "cert-pos47-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/pos47-c.html)"
        },
        {
          "shortName": "CppClangTidyCertPos44C",
          "displayName": "cert-pos44-c clang-tidy check",
          "enabled": false,
          "description": "cert-pos44-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/pos44-c.html)"
        },
        {
          "shortName": "CppClangTidyCertOop11Cpp",
          "displayName": "cert-oop11-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-oop11-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop11-cpp.html)"
        },
        {
          "shortName": "CppClangTidyObjcNsinvocationArgumentLifetime",
          "displayName": "objc-nsinvocation-argument-lifetime clang-tidy check",
          "enabled": true,
          "description": "objc-nsinvocation-argument-lifetime clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/nsinvocation-argument-lifetime.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityDeleteNullPointer",
          "displayName": "readability-delete-null-pointer clang-tidy check",
          "enabled": true,
          "description": "readability-delete-null-pointer clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/delete-null-pointer.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesNarrowingConversions",
          "displayName": "cppcoreguidelines-narrowing-conversions clang-tidy check",
          "enabled": true,
          "description": "cppcoreguidelines-narrowing-conversions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/narrowing-conversions.html)"
        },
        {
          "shortName": "CppClangTidyLlvmIncludeOrder",
          "displayName": "llvm-include-order clang-tidy check",
          "enabled": false,
          "description": "llvm-include-order clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/include-order.html)"
        },
        {
          "shortName": "CppClangTidyMiscUseAnonymousNamespace",
          "displayName": "misc-use-anonymous-namespace clang-tidy check",
          "enabled": true,
          "description": "misc-use-anonymous-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/use-anonymous-namespace.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidDoWhile",
          "displayName": "cppcoreguidelines-avoid-do-while clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-avoid-do-while clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-do-while.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationFactoryScale",
          "displayName": "abseil-duration-factory-scale clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-factory-scale clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-factory-scale.html)"
        },
        {
          "shortName": "CppClangTidyGoogleUpgradeGoogletestCase",
          "displayName": "google-upgrade-googletest-case clang-tidy check",
          "enabled": true,
          "description": "google-upgrade-googletest-case clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/upgrade-googletest-case.html)"
        },
        {
          "shortName": "CppClangTidyBugproneStringLiteralWithEmbeddedNul",
          "displayName": "bugprone-string-literal-with-embedded-nul clang-tidy check",
          "enabled": true,
          "description": "bugprone-string-literal-with-embedded-nul clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-literal-with-embedded-nul.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidCArrays",
          "displayName": "cppcoreguidelines-avoid-c-arrays clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-avoid-c-arrays clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-c-arrays.html)"
        },
        {
          "shortName": "CppClangTidyBugproneBadSignalToKillThread",
          "displayName": "bugprone-bad-signal-to-kill-thread clang-tidy check",
          "enabled": true,
          "description": "bugprone-bad-signal-to-kill-thread clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bad-signal-to-kill-thread.html)"
        },
        {
          "shortName": "CppClangTidyBugproneBoolPointerImplicitConversion",
          "displayName": "bugprone-bool-pointer-implicit-conversion clang-tidy check",
          "enabled": false,
          "description": "bugprone-bool-pointer-implicit-conversion clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bool-pointer-implicit-conversion.html)"
        },
        {
          "shortName": "CppClangTidyConcurrencyThreadCanceltypeAsynchronous",
          "displayName": "concurrency-thread-canceltype-asynchronous clang-tidy check",
          "enabled": true,
          "description": "concurrency-thread-canceltype-asynchronous clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/concurrency/thread-canceltype-asynchronous.html)"
        },
        {
          "shortName": "CppClangTidyObjcPropertyDeclaration",
          "displayName": "objc-property-declaration clang-tidy check",
          "enabled": true,
          "description": "objc-property-declaration clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/property-declaration.html)"
        },
        {
          "shortName": "CppClangTidyReadabilitySuspiciousCallArgument",
          "displayName": "readability-suspicious-call-argument clang-tidy check",
          "enabled": true,
          "description": "readability-suspicious-call-argument clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/suspicious-call-argument.html)"
        },
        {
          "shortName": "CppClangTidyMiscUnusedAliasDecls",
          "displayName": "misc-unused-alias-decls clang-tidy check",
          "enabled": true,
          "description": "misc-unused-alias-decls clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-alias-decls.html)"
        },
        {
          "shortName": "CppClangTidyHicppNoMalloc",
          "displayName": "hicpp-no-malloc clang-tidy check",
          "enabled": false,
          "description": "hicpp-no-malloc clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-malloc.html)"
        },
        {
          "shortName": "CppClangTidyAlteraKernelNameRestriction",
          "displayName": "altera-kernel-name-restriction clang-tidy check",
          "enabled": false,
          "description": "altera-kernel-name-restriction clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/kernel-name-restriction.html)"
        },
        {
          "shortName": "CppClangTidyHicppExplicitConversions",
          "displayName": "hicpp-explicit-conversions clang-tidy check",
          "enabled": false,
          "description": "hicpp-explicit-conversions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/explicit-conversions.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMacroRepeatedSideEffects",
          "displayName": "bugprone-macro-repeated-side-effects clang-tidy check",
          "enabled": true,
          "description": "bugprone-macro-repeated-side-effects clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/macro-repeated-side-effects.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityMisleadingIndentation",
          "displayName": "readability-misleading-indentation clang-tidy check",
          "enabled": false,
          "description": "readability-misleading-indentation clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/misleading-indentation.html)"
        },
        {
          "shortName": "CppClangTidyLlvmQualifiedAuto",
          "displayName": "llvm-qualified-auto clang-tidy check",
          "enabled": false,
          "description": "llvm-qualified-auto clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/qualified-auto.html)"
        },
        {
          "shortName": "CppClangTidyModernizeConcatNestedNamespaces",
          "displayName": "modernize-concat-nested-namespaces clang-tidy check",
          "enabled": false,
          "description": "modernize-concat-nested-namespaces clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/concat-nested-namespaces.html)"
        },
        {
          "shortName": "CppClangTidyAbseilRedundantStrcatCalls",
          "displayName": "abseil-redundant-strcat-calls clang-tidy check",
          "enabled": false,
          "description": "abseil-redundant-strcat-calls clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/redundant-strcat-calls.html)"
        },
        {
          "shortName": "CppClangTidyCertMsc51Cpp",
          "displayName": "cert-msc51-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-msc51-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc51-cpp.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityContainerContains",
          "displayName": "readability-container-contains clang-tidy check",
          "enabled": false,
          "description": "readability-container-contains clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-contains.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecInotifyInit",
          "displayName": "android-cloexec-inotify-init clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-inotify-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-inotify-init.html)"
        },
        {
          "shortName": "CppClangTidyHicppInvalidAccessMoved",
          "displayName": "hicpp-invalid-access-moved clang-tidy check",
          "enabled": false,
          "description": "hicpp-invalid-access-moved clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/invalid-access-moved.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceTriviallyDestructible",
          "displayName": "performance-trivially-destructible clang-tidy check",
          "enabled": true,
          "description": "performance-trivially-destructible clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/trivially-destructible.html)"
        },
        {
          "shortName": "CppClangTidyBugproneImplicitWideningOfMultiplicationResult",
          "displayName": "bugprone-implicit-widening-of-multiplication-result clang-tidy check",
          "enabled": true,
          "description": "bugprone-implicit-widening-of-multiplication-result clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/implicit-widening-of-multiplication-result.html)"
        },
        {
          "shortName": "CppClangTidyHicppMultiwayPathsCovered",
          "displayName": "hicpp-multiway-paths-covered clang-tidy check",
          "enabled": true,
          "description": "hicpp-multiway-paths-covered clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/multiway-paths-covered.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityAvoidConstParamsInDecls",
          "displayName": "readability-avoid-const-params-in-decls clang-tidy check",
          "enabled": false,
          "description": "readability-avoid-const-params-in-decls clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/avoid-const-params-in-decls.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSizeofContainer",
          "displayName": "bugprone-sizeof-container clang-tidy check",
          "enabled": true,
          "description": "bugprone-sizeof-container clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/sizeof-container.html)"
        },
        {
          "shortName": "CppClangTidyCertErr61Cpp",
          "displayName": "cert-err61-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-err61-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err61-cpp.html)"
        },
        {
          "shortName": "CppClangTidyAbseilStrCatAppend",
          "displayName": "abseil-str-cat-append clang-tidy check",
          "enabled": false,
          "description": "abseil-str-cat-append clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/str-cat-append.html)"
        },
        {
          "shortName": "CppClangTidyHicppExceptionBaseclass",
          "displayName": "hicpp-exception-baseclass clang-tidy check",
          "enabled": true,
          "description": "hicpp-exception-baseclass clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/exception-baseclass.html)"
        },
        {
          "shortName": "CppClangTidyObjcDeallocInCategory",
          "displayName": "objc-dealloc-in-category clang-tidy check",
          "enabled": true,
          "description": "objc-dealloc-in-category clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/dealloc-in-category.html)"
        },
        {
          "shortName": "CppClangTidyBugproneIncorrectRoundings",
          "displayName": "bugprone-incorrect-roundings clang-tidy check",
          "enabled": true,
          "description": "bugprone-incorrect-roundings clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/incorrect-roundings.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityMagicNumbers",
          "displayName": "readability-magic-numbers clang-tidy check",
          "enabled": false,
          "description": "readability-magic-numbers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/magic-numbers.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityIsolateDeclaration",
          "displayName": "readability-isolate-declaration clang-tidy check",
          "enabled": false,
          "description": "readability-isolate-declaration clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/isolate-declaration.html)"
        },
        {
          "shortName": "CppClangTidyMiscNonCopyableObjects",
          "displayName": "misc-non-copyable-objects clang-tidy check",
          "enabled": true,
          "description": "misc-non-copyable-objects clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/non-copyable-objects.html)"
        },
        {
          "shortName": "CppClangTidyLlvmlibcRestrictSystemLibcHeaders",
          "displayName": "llvmlibc-restrict-system-libc-headers clang-tidy check",
          "enabled": false,
          "description": "llvmlibc-restrict-system-libc-headers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/restrict-system-libc-headers.html)"
        },
        {
          "shortName": "CppClangTidyMiscUniqueptrResetRelease",
          "displayName": "misc-uniqueptr-reset-release clang-tidy check",
          "enabled": true,
          "description": "misc-uniqueptr-reset-release clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/uniqueptr-reset-release.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseDefaultMemberInit",
          "displayName": "modernize-use-default-member-init clang-tidy check",
          "enabled": false,
          "description": "modernize-use-default-member-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-default-member-init.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesCCopyAssignmentSignature",
          "displayName": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/c-copy-assignment-signature.html)"
        },
        {
          "shortName": "CppClangTidyMiscUnconventionalAssignOperator",
          "displayName": "misc-unconventional-assign-operator clang-tidy check",
          "enabled": true,
          "description": "misc-unconventional-assign-operator clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unconventional-assign-operator.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantMemberInit",
          "displayName": "readability-redundant-member-init clang-tidy check",
          "enabled": false,
          "description": "readability-redundant-member-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-member-init.html)"
        },
        {
          "shortName": "CppClangTidyBugproneFoldInitType",
          "displayName": "bugprone-fold-init-type clang-tidy check",
          "enabled": true,
          "description": "bugprone-fold-init-type clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/fold-init-type.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityStaticDefinitionInAnonymousNamespace",
          "displayName": "readability-static-definition-in-anonymous-namespace clang-tidy check",
          "enabled": false,
          "description": "readability-static-definition-in-anonymous-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/static-definition-in-anonymous-namespace.html)"
        },
        {
          "shortName": "CppClangTidyBugproneInaccurateErase",
          "displayName": "bugprone-inaccurate-erase clang-tidy check",
          "enabled": true,
          "description": "bugprone-inaccurate-erase clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/inaccurate-erase.html)"
        },
        {
          "shortName": "CppClangTidyHicppSignedBitwise",
          "displayName": "hicpp-signed-bitwise clang-tidy check",
          "enabled": false,
          "description": "hicpp-signed-bitwise clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/signed-bitwise.html)"
        },
        {
          "shortName": "CppClangTidyObjcAssertEquals",
          "displayName": "objc-assert-equals clang-tidy check",
          "enabled": true,
          "description": "objc-assert-equals clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/assert-equals.html)"
        },
        {
          "shortName": "CppClangTidyBugproneNoEscape",
          "displayName": "bugprone-no-escape clang-tidy check",
          "enabled": true,
          "description": "bugprone-no-escape clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/no-escape.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseEmplace",
          "displayName": "modernize-use-emplace clang-tidy check",
          "enabled": true,
          "description": "modernize-use-emplace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-emplace.html)"
        },
        {
          "shortName": "CppClangTidyModernizeRawStringLiteral",
          "displayName": "modernize-raw-string-literal clang-tidy check",
          "enabled": true,
          "description": "modernize-raw-string-literal clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/raw-string-literal.html)"
        },
        {
          "shortName": "CppClangTidyHicppMoveConstArg",
          "displayName": "hicpp-move-const-arg clang-tidy check",
          "enabled": false,
          "description": "hicpp-move-const-arg clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/move-const-arg.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityBracesAroundStatements",
          "displayName": "readability-braces-around-statements clang-tidy check",
          "enabled": false,
          "description": "readability-braces-around-statements clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/braces-around-statements.html)"
        },
        {
          "shortName": "CppClangTidyHicppUndelegatedConstructor",
          "displayName": "hicpp-undelegated-constructor clang-tidy check",
          "enabled": false,
          "description": "hicpp-undelegated-constructor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/undelegated-constructor.html)"
        },
        {
          "shortName": "CppClangTidyModernizeReplaceAutoPtr",
          "displayName": "modernize-replace-auto-ptr clang-tidy check",
          "enabled": true,
          "description": "modernize-replace-auto-ptr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-auto-ptr.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecFopen",
          "displayName": "android-cloexec-fopen clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-fopen clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-fopen.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesVirtualClassDestructor",
          "displayName": "cppcoreguidelines-virtual-class-destructor clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-virtual-class-destructor clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/virtual-class-destructor.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousInclude",
          "displayName": "bugprone-suspicious-include clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-include clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-include.html)"
        },
        {
          "shortName": "CppClangTidyMiscMisleadingIdentifier",
          "displayName": "misc-misleading-identifier clang-tidy check",
          "enabled": true,
          "description": "misc-misleading-identifier clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misleading-identifier.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantDeclaration",
          "displayName": "readability-redundant-declaration clang-tidy check",
          "enabled": true,
          "description": "readability-redundant-declaration clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-declaration.html)"
        },
        {
          "shortName": "CppClangTidyBugproneRedundantBranchCondition",
          "displayName": "bugprone-redundant-branch-condition clang-tidy check",
          "enabled": true,
          "description": "bugprone-redundant-branch-condition clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/redundant-branch-condition.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationUnnecessaryConversion",
          "displayName": "abseil-duration-unnecessary-conversion clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-unnecessary-conversion clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-unnecessary-conversion.html)"
        },
        {
          "shortName": "CppClangTidyBugproneInfiniteLoop",
          "displayName": "bugprone-infinite-loop clang-tidy check",
          "enabled": true,
          "description": "bugprone-infinite-loop clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/infinite-loop.html)"
        },
        {
          "shortName": "CppClangTidyHicppNoAssembler",
          "displayName": "hicpp-no-assembler clang-tidy check",
          "enabled": false,
          "description": "hicpp-no-assembler clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-assembler.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceInefficientStringConcatenation",
          "displayName": "performance-inefficient-string-concatenation clang-tidy check",
          "enabled": true,
          "description": "performance-inefficient-string-concatenation clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-string-concatenation.html)"
        },
        {
          "shortName": "CppClangTidyMiscStaticAssert",
          "displayName": "misc-static-assert clang-tidy check",
          "enabled": true,
          "description": "misc-static-assert clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/static-assert.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseOverride",
          "displayName": "modernize-use-override clang-tidy check",
          "enabled": false,
          "description": "modernize-use-override clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-override.html)"
        },
        {
          "shortName": "CppClangTidyAbseilUpgradeDurationConversions",
          "displayName": "abseil-upgrade-duration-conversions clang-tidy check",
          "enabled": false,
          "description": "abseil-upgrade-duration-conversions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/upgrade-duration-conversions.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecMemfdCreate",
          "displayName": "android-cloexec-memfd-create clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-memfd-create clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-memfd-create.html)"
        },
        {
          "shortName": "CppClangTidyBugproneLambdaFunctionName",
          "displayName": "bugprone-lambda-function-name clang-tidy check",
          "enabled": true,
          "description": "bugprone-lambda-function-name clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/lambda-function-name.html)"
        },
        {
          "shortName": "CppClangTidyCertFio38C",
          "displayName": "cert-fio38-c clang-tidy check",
          "enabled": false,
          "description": "cert-fio38-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/fio38-c.html)"
        },
        {
          "shortName": "CppClangTidyMiscUnusedUsingDecls",
          "displayName": "misc-unused-using-decls clang-tidy check",
          "enabled": true,
          "description": "misc-unused-using-decls clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-using-decls.html)"
        },
        {
          "shortName": "CppClangTidyBugpronePosixReturn",
          "displayName": "bugprone-posix-return clang-tidy check",
          "enabled": true,
          "description": "bugprone-posix-return clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/posix-return.html)"
        },
        {
          "shortName": "CppClangTidyBugproneForwardDeclarationNamespace",
          "displayName": "bugprone-forward-declaration-namespace clang-tidy check",
          "enabled": true,
          "description": "bugprone-forward-declaration-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/forward-declaration-namespace.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl37C",
          "displayName": "cert-dcl37-c clang-tidy check",
          "enabled": false,
          "description": "cert-dcl37-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl37-c.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationAddition",
          "displayName": "abseil-duration-addition clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-addition clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-addition.html)"
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityNamespaceComments",
          "displayName": "google-readability-namespace-comments clang-tidy check",
          "enabled": false,
          "description": "google-readability-namespace-comments clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-namespace-comments.html)"
        },
        {
          "shortName": "CppClangTidyCertStr34C",
          "displayName": "cert-str34-c clang-tidy check",
          "enabled": false,
          "description": "cert-str34-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/str34-c.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecOpen",
          "displayName": "android-cloexec-open clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-open clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-open.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityFunctionSize",
          "displayName": "readability-function-size clang-tidy check",
          "enabled": false,
          "description": "readability-function-size clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/function-size.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationDivision",
          "displayName": "abseil-duration-division clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-division clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-division.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUseAfterMove",
          "displayName": "bugprone-use-after-move clang-tidy check",
          "enabled": true,
          "description": "bugprone-use-after-move clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/use-after-move.html)"
        },
        {
          "shortName": "CppClangTidyBugproneCopyConstructorInit",
          "displayName": "bugprone-copy-constructor-init clang-tidy check",
          "enabled": true,
          "description": "bugprone-copy-constructor-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/copy-constructor-init.html)"
        },
        {
          "shortName": "CppClangTidyModernizeReturnBracedInitList",
          "displayName": "modernize-return-braced-init-list clang-tidy check",
          "enabled": true,
          "description": "modernize-return-braced-init-list clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/return-braced-init-list.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidNonConstGlobalVariables",
          "displayName": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-non-const-global-variables.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousStringCompare",
          "displayName": "bugprone-suspicious-string-compare clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-string-compare clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-string-compare.html)"
        },
        {
          "shortName": "CppClangTidyModernizeShrinkToFit",
          "displayName": "modernize-shrink-to-fit clang-tidy check",
          "enabled": true,
          "description": "modernize-shrink-to-fit clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/shrink-to-fit.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousSemicolon",
          "displayName": "bugprone-suspicious-semicolon clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-semicolon clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-semicolon.html)"
        },
        {
          "shortName": "CppClangTidyGoogleRuntimeOperator",
          "displayName": "google-runtime-operator clang-tidy check",
          "enabled": true,
          "description": "google-runtime-operator clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/runtime-operator.html)"
        },
        {
          "shortName": "CppClangTidyCertMsc54Cpp",
          "displayName": "cert-msc54-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-msc54-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc54-cpp.html)"
        },
        {
          "shortName": "CppClangTidyCertErr52Cpp",
          "displayName": "cert-err52-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-err52-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err52-cpp.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesMacroUsage",
          "displayName": "cppcoreguidelines-macro-usage clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-macro-usage clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/macro-usage.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeMemberInit",
          "displayName": "cppcoreguidelines-pro-type-member-init clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-type-member-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-member-init.html)"
        },
        {
          "shortName": "CppClangTidyPortabilitySimdIntrinsics",
          "displayName": "portability-simd-intrinsics clang-tidy check",
          "enabled": false,
          "description": "portability-simd-intrinsics clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/simd-intrinsics.html)"
        },
        {
          "shortName": "CppClangTidyPortabilityStdAllocatorConst",
          "displayName": "portability-std-allocator-const clang-tidy check",
          "enabled": true,
          "description": "portability-std-allocator-const clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/std-allocator-const.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeUnionAccess",
          "displayName": "cppcoreguidelines-pro-type-union-access clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-type-union-access clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-union-access.html)"
        },
        {
          "shortName": "CppClangTidyAlteraIdDependentBackwardBranch",
          "displayName": "altera-id-dependent-backward-branch clang-tidy check",
          "enabled": false,
          "description": "altera-id-dependent-backward-branch clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/id-dependent-backward-branch.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityUniqueptrDeleteRelease",
          "displayName": "readability-uniqueptr-delete-release clang-tidy check",
          "enabled": true,
          "description": "readability-uniqueptr-delete-release clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/uniqueptr-delete-release.html)"
        },
        {
          "shortName": "CppClangTidyCertSig30C",
          "displayName": "cert-sig30-c clang-tidy check",
          "enabled": false,
          "description": "cert-sig30-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/sig30-c.html)"
        },
        {
          "shortName": "CppClangTidyOpenmpUseDefaultNone",
          "displayName": "openmp-use-default-none clang-tidy check",
          "enabled": true,
          "description": "openmp-use-default-none clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/openmp/use-default-none.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUnaryStaticAssert",
          "displayName": "modernize-unary-static-assert clang-tidy check",
          "enabled": true,
          "description": "modernize-unary-static-assert clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/unary-static-assert.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecInotifyInit1",
          "displayName": "android-cloexec-inotify-init1 clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-inotify-init1 clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-inotify-init1.html)"
        },
        {
          "shortName": "CppClangTidyAbseilCleanupCtad",
          "displayName": "abseil-cleanup-ctad clang-tidy check",
          "enabled": false,
          "description": "abseil-cleanup-ctad clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/cleanup-ctad.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaDefaultArgumentsDeclarations",
          "displayName": "fuchsia-default-arguments-declarations clang-tidy check",
          "enabled": false,
          "description": "fuchsia-default-arguments-declarations clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/default-arguments-declarations.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl50Cpp",
          "displayName": "cert-dcl50-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-dcl50-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl50-cpp.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseUncaughtExceptions",
          "displayName": "modernize-use-uncaught-exceptions clang-tidy check",
          "enabled": true,
          "description": "modernize-use-uncaught-exceptions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-uncaught-exceptions.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaDefaultArgumentsCalls",
          "displayName": "fuchsia-default-arguments-calls clang-tidy check",
          "enabled": false,
          "description": "fuchsia-default-arguments-calls clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/default-arguments-calls.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityMisplacedArrayIndex",
          "displayName": "readability-misplaced-array-index clang-tidy check",
          "enabled": true,
          "description": "readability-misplaced-array-index clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/misplaced-array-index.html)"
        },
        {
          "shortName": "CppClangTidyAbseilFasterStrsplitDelimiter",
          "displayName": "abseil-faster-strsplit-delimiter clang-tidy check",
          "enabled": false,
          "description": "abseil-faster-strsplit-delimiter clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/faster-strsplit-delimiter.html)"
        },
        {
          "shortName": "CppClangTidyBugproneDynamicStaticInitializers",
          "displayName": "bugprone-dynamic-static-initializers clang-tidy check",
          "enabled": true,
          "description": "bugprone-dynamic-static-initializers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/dynamic-static-initializers.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityStringCompare",
          "displayName": "readability-string-compare clang-tidy check",
          "enabled": true,
          "description": "readability-string-compare clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/string-compare.html)"
        },
        {
          "shortName": "CppClangTidyAlteraUnrollLoops",
          "displayName": "altera-unroll-loops clang-tidy check",
          "enabled": false,
          "description": "altera-unroll-loops clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/unroll-loops.html)"
        },
        {
          "shortName": "CppClangTidyModernizeDeprecatedIosBaseAliases",
          "displayName": "modernize-deprecated-ios-base-aliases clang-tidy check",
          "enabled": true,
          "description": "modernize-deprecated-ios-base-aliases clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/deprecated-ios-base-aliases.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesInitVariables",
          "displayName": "cppcoreguidelines-init-variables clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-init-variables clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/init-variables.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecPipe",
          "displayName": "android-cloexec-pipe clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-pipe clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-pipe.html)"
        },
        {
          "shortName": "CppClangTidyMpiBufferDeref",
          "displayName": "mpi-buffer-deref clang-tidy check",
          "enabled": true,
          "description": "mpi-buffer-deref clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/mpi/buffer-deref.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecDup",
          "displayName": "android-cloexec-dup clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-dup clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-dup.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityQualifiedAuto",
          "displayName": "readability-qualified-auto clang-tidy check",
          "enabled": false,
          "description": "readability-qualified-auto clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/qualified-auto.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityNonConstParameter",
          "displayName": "readability-non-const-parameter clang-tidy check",
          "enabled": false,
          "description": "readability-non-const-parameter clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/non-const-parameter.html)"
        },
        {
          "shortName": "CppClangTidyBugproneDanglingHandle",
          "displayName": "bugprone-dangling-handle clang-tidy check",
          "enabled": true,
          "description": "bugprone-dangling-handle clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/dangling-handle.html)"
        },
        {
          "shortName": "CppClangTidyLlvmNamespaceComment",
          "displayName": "llvm-namespace-comment clang-tidy check",
          "enabled": false,
          "description": "llvm-namespace-comment clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/namespace-comment.html)"
        },
        {
          "shortName": "CppClangTidyDarwinAvoidSpinlock",
          "displayName": "darwin-avoid-spinlock clang-tidy check",
          "enabled": false,
          "description": "darwin-avoid-spinlock clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/darwin/avoid-spinlock.html)"
        },
        {
          "shortName": "CppClangTidyGoogleDefaultArguments",
          "displayName": "google-default-arguments clang-tidy check",
          "enabled": false,
          "description": "google-default-arguments clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/default-arguments.html)"
        },
        {
          "shortName": "CppClangTidyCertOop58Cpp",
          "displayName": "cert-oop58-cpp clang-tidy check",
          "enabled": true,
          "description": "cert-oop58-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop58-cpp.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousEnumUsage",
          "displayName": "bugprone-suspicious-enum-usage clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-enum-usage clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-enum-usage.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseNullptr",
          "displayName": "hicpp-use-nullptr clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-nullptr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-nullptr.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast",
          "displayName": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check",
          "enabled": true,
          "description": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-static-cast-downcast.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityDuplicateInclude",
          "displayName": "readability-duplicate-include clang-tidy check",
          "enabled": false,
          "description": "readability-duplicate-include clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/duplicate-include.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl03C",
          "displayName": "cert-dcl03-c clang-tidy check",
          "enabled": false,
          "description": "cert-dcl03-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl03-c.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl54Cpp",
          "displayName": "cert-dcl54-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-dcl54-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl54-cpp.html)"
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityBracesAroundStatements",
          "displayName": "google-readability-braces-around-statements clang-tidy check",
          "enabled": false,
          "description": "google-readability-braces-around-statements clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-braces-around-statements.html)"
        },
        {
          "shortName": "CppClangTidyBugproneStandaloneEmpty",
          "displayName": "bugprone-standalone-empty clang-tidy check",
          "enabled": true,
          "description": "bugprone-standalone-empty clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/standalone-empty.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityImplicitBoolConversion",
          "displayName": "readability-implicit-bool-conversion clang-tidy check",
          "enabled": false,
          "description": "readability-implicit-bool-conversion clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/implicit-bool-conversion.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaTrailingReturn",
          "displayName": "fuchsia-trailing-return clang-tidy check",
          "enabled": false,
          "description": "fuchsia-trailing-return clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/trailing-return.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUndefinedMemoryManipulation",
          "displayName": "bugprone-undefined-memory-manipulation clang-tidy check",
          "enabled": true,
          "description": "bugprone-undefined-memory-manipulation clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/undefined-memory-manipulation.html)"
        },
        {
          "shortName": "CppClangTidyBugproneArgumentComment",
          "displayName": "bugprone-argument-comment clang-tidy check",
          "enabled": true,
          "description": "bugprone-argument-comment clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/argument-comment.html)"
        },
        {
          "shortName": "CppClangTidyHicppSpecialMemberFunctions",
          "displayName": "hicpp-special-member-functions clang-tidy check",
          "enabled": false,
          "description": "hicpp-special-member-functions clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/special-member-functions.html)"
        },
        {
          "shortName": "CppClangTidyGoogleObjcGlobalVariableDeclaration",
          "displayName": "google-objc-global-variable-declaration clang-tidy check",
          "enabled": false,
          "description": "google-objc-global-variable-declaration clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-global-variable-declaration.html)"
        },
        {
          "shortName": "CppClangTidyMiscUnusedParameters",
          "displayName": "misc-unused-parameters clang-tidy check",
          "enabled": false,
          "description": "misc-unused-parameters clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-parameters.html)"
        },
        {
          "shortName": "CppClangTidyAlteraStructPackAlign",
          "displayName": "altera-struct-pack-align clang-tidy check",
          "enabled": false,
          "description": "altera-struct-pack-align clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/struct-pack-align.html)"
        },
        {
          "shortName": "CppClangTidyLlvmPreferRegisterOverUnsigned",
          "displayName": "llvm-prefer-register-over-unsigned clang-tidy check",
          "enabled": true,
          "description": "llvm-prefer-register-over-unsigned clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/prefer-register-over-unsigned.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesNoMalloc",
          "displayName": "cppcoreguidelines-no-malloc clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-no-malloc clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/no-malloc.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecSocket",
          "displayName": "android-cloexec-socket clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-socket clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-socket.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseOverride",
          "displayName": "hicpp-use-override clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-override clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-override.html)"
        },
        {
          "shortName": "CppClangTidyBugproneNotNullTerminatedResult",
          "displayName": "bugprone-not-null-terminated-result clang-tidy check",
          "enabled": true,
          "description": "bugprone-not-null-terminated-result clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/not-null-terminated-result.html)"
        },
        {
          "shortName": "CppClangTidyLinuxkernelMustCheckErrs",
          "displayName": "linuxkernel-must-check-errs clang-tidy check",
          "enabled": true,
          "description": "linuxkernel-must-check-errs clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/linuxkernel/must-check-errs.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaMultipleInheritance",
          "displayName": "fuchsia-multiple-inheritance clang-tidy check",
          "enabled": false,
          "description": "fuchsia-multiple-inheritance clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/multiple-inheritance.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMultipleStatementMacro",
          "displayName": "bugprone-multiple-statement-macro clang-tidy check",
          "enabled": true,
          "description": "bugprone-multiple-statement-macro clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/multiple-statement-macro.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecEpollCreate1",
          "displayName": "android-cloexec-epoll-create1 clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-epoll-create1 clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-epoll-create1.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSwappedArguments",
          "displayName": "bugprone-swapped-arguments clang-tidy check",
          "enabled": true,
          "description": "bugprone-swapped-arguments clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/swapped-arguments.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceUnnecessaryCopyInitialization",
          "displayName": "performance-unnecessary-copy-initialization clang-tidy check",
          "enabled": true,
          "description": "performance-unnecessary-copy-initialization clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/unnecessary-copy-initialization.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantSmartptrGet",
          "displayName": "readability-redundant-smartptr-get clang-tidy check",
          "enabled": true,
          "description": "readability-redundant-smartptr-get clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-smartptr-get.html)"
        },
        {
          "shortName": "CppClangTidyDarwinDispatchOnceNonstatic",
          "displayName": "darwin-dispatch-once-nonstatic clang-tidy check",
          "enabled": false,
          "description": "darwin-dispatch-once-nonstatic clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/darwin/dispatch-once-nonstatic.html)"
        },
        {
          "shortName": "CppClangTidyLlvmElseAfterReturn",
          "displayName": "llvm-else-after-return clang-tidy check",
          "enabled": false,
          "description": "llvm-else-after-return clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/else-after-return.html)"
        },
        {
          "shortName": "CppClangTidyCertExp42C",
          "displayName": "cert-exp42-c clang-tidy check",
          "enabled": false,
          "description": "cert-exp42-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/exp42-c.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceUnnecessaryValueParam",
          "displayName": "performance-unnecessary-value-param clang-tidy check",
          "enabled": true,
          "description": "performance-unnecessary-value-param clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/unnecessary-value-param.html)"
        },
        {
          "shortName": "CppClangTidyReadabilitySimplifySubscriptExpr",
          "displayName": "readability-simplify-subscript-expr clang-tidy check",
          "enabled": true,
          "description": "readability-simplify-subscript-expr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/simplify-subscript-expr.html)"
        },
        {
          "shortName": "CppClangTidyGoogleGlobalNamesInHeaders",
          "displayName": "google-global-names-in-headers clang-tidy check",
          "enabled": false,
          "description": "google-global-names-in-headers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/global-names-in-headers.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl51Cpp",
          "displayName": "cert-dcl51-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-dcl51-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl51-cpp.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseEqualsDelete",
          "displayName": "hicpp-use-equals-delete clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-equals-delete clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-equals-delete.html)"
        },
        {
          "shortName": "CppClangTidyFuchsiaHeaderAnonNamespaces",
          "displayName": "fuchsia-header-anon-namespaces clang-tidy check",
          "enabled": false,
          "description": "fuchsia-header-anon-namespaces clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/header-anon-namespaces.html)"
        },
        {
          "shortName": "CppClangTidyObjcForbiddenSubclassing",
          "displayName": "objc-forbidden-subclassing clang-tidy check",
          "enabled": true,
          "description": "objc-forbidden-subclassing clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/forbidden-subclassing.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUnusedReturnValue",
          "displayName": "bugprone-unused-return-value clang-tidy check",
          "enabled": true,
          "description": "bugprone-unused-return-value clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-return-value.html)"
        },
        {
          "shortName": "CppClangTidyModernizeRedundantVoidArg",
          "displayName": "modernize-redundant-void-arg clang-tidy check",
          "enabled": false,
          "description": "modernize-redundant-void-arg clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/redundant-void-arg.html)"
        },
        {
          "shortName": "CppClangTidyGoogleObjcAvoidNsobjectNew",
          "displayName": "google-objc-avoid-nsobject-new clang-tidy check",
          "enabled": false,
          "description": "google-objc-avoid-nsobject-new clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-avoid-nsobject-new.html)"
        },
        {
          "shortName": "CppClangTidyBugproneStringIntegerAssignment",
          "displayName": "bugprone-string-integer-assignment clang-tidy check",
          "enabled": true,
          "description": "bugprone-string-integer-assignment clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-integer-assignment.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseNodiscard",
          "displayName": "modernize-use-nodiscard clang-tidy check",
          "enabled": true,
          "description": "modernize-use-nodiscard clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-nodiscard.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceMoveConstructorInit",
          "displayName": "performance-move-constructor-init clang-tidy check",
          "enabled": true,
          "description": "performance-move-constructor-init clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/move-constructor-init.html)"
        },
        {
          "shortName": "CppClangTidyMiscConstCorrectness",
          "displayName": "misc-const-correctness clang-tidy check",
          "enabled": false,
          "description": "misc-const-correctness clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/const-correctness.html)"
        },
        {
          "shortName": "CppClangTidyAbseilStringFindStartswith",
          "displayName": "abseil-string-find-startswith clang-tidy check",
          "enabled": false,
          "description": "abseil-string-find-startswith clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/string-find-startswith.html)"
        },
        {
          "shortName": "CppClangTidyObjcSuperSelf",
          "displayName": "objc-super-self clang-tidy check",
          "enabled": true,
          "description": "objc-super-self clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/super-self.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl16C",
          "displayName": "cert-dcl16-c clang-tidy check",
          "enabled": false,
          "description": "cert-dcl16-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl16-c.html)"
        },
        {
          "shortName": "CppClangTidyOpenmpExceptionEscape",
          "displayName": "openmp-exception-escape clang-tidy check",
          "enabled": true,
          "description": "openmp-exception-escape clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/openmp/exception-escape.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousMemsetUsage",
          "displayName": "bugprone-suspicious-memset-usage clang-tidy check",
          "enabled": true,
          "description": "bugprone-suspicious-memset-usage clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-memset-usage.html)"
        },
        {
          "shortName": "CppClangTidyHicppStaticAssert",
          "displayName": "hicpp-static-assert clang-tidy check",
          "enabled": false,
          "description": "hicpp-static-assert clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/static-assert.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeVararg",
          "displayName": "cppcoreguidelines-pro-type-vararg clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-type-vararg clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-vararg.html)"
        },
        {
          "shortName": "CppClangTidyBugproneUncheckedOptionalAccess",
          "displayName": "bugprone-unchecked-optional-access clang-tidy check",
          "enabled": true,
          "description": "bugprone-unchecked-optional-access clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unchecked-optional-access.html)"
        },
        {
          "shortName": "CppClangTidyModernizeMacroToEnum",
          "displayName": "modernize-macro-to-enum clang-tidy check",
          "enabled": true,
          "description": "modernize-macro-to-enum clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/macro-to-enum.html)"
        },
        {
          "shortName": "CppClangTidyLlvmTwineLocal",
          "displayName": "llvm-twine-local clang-tidy check",
          "enabled": false,
          "description": "llvm-twine-local clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/twine-local.html)"
        },
        {
          "shortName": "CppClangTidyAbseilNoNamespace",
          "displayName": "abseil-no-namespace clang-tidy check",
          "enabled": false,
          "description": "abseil-no-namespace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/no-namespace.html)"
        },
        {
          "shortName": "CppClangTidyAlteraSingleWorkItemBarrier",
          "displayName": "altera-single-work-item-barrier clang-tidy check",
          "enabled": false,
          "description": "altera-single-work-item-barrier clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/single-work-item-barrier.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseBoolLiterals",
          "displayName": "modernize-use-bool-literals clang-tidy check",
          "enabled": true,
          "description": "modernize-use-bool-literals clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-bool-literals.html)"
        },
        {
          "shortName": "CppClangTidyCertFlp30C",
          "displayName": "cert-flp30-c clang-tidy check",
          "enabled": true,
          "description": "cert-flp30-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/flp30-c.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityIdentifierNaming",
          "displayName": "readability-identifier-naming clang-tidy check",
          "enabled": false,
          "description": "readability-identifier-naming clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/identifier-naming.html)"
        },
        {
          "shortName": "CppClangTidyHicppUseEmplace",
          "displayName": "hicpp-use-emplace clang-tidy check",
          "enabled": false,
          "description": "hicpp-use-emplace clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-emplace.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProBoundsArrayToPointerDecay",
          "displayName": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-array-to-pointer-decay.html)"
        },
        {
          "shortName": "CppClangTidyBugproneVirtualNearMiss",
          "displayName": "bugprone-virtual-near-miss clang-tidy check",
          "enabled": true,
          "description": "bugprone-virtual-near-miss clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/virtual-near-miss.html)"
        },
        {
          "shortName": "CppClangTidyModernizeUseAuto",
          "displayName": "modernize-use-auto clang-tidy check",
          "enabled": true,
          "description": "modernize-use-auto clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-auto.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceNoIntToPtr",
          "displayName": "performance-no-int-to-ptr clang-tidy check",
          "enabled": true,
          "description": "performance-no-int-to-ptr clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/no-int-to-ptr.html)"
        },
        {
          "shortName": "CppClangTidyBugproneMisplacedWideningCast",
          "displayName": "bugprone-misplaced-widening-cast clang-tidy check",
          "enabled": true,
          "description": "bugprone-misplaced-widening-cast clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-widening-cast.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityContainerDataPointer",
          "displayName": "readability-container-data-pointer clang-tidy check",
          "enabled": true,
          "description": "readability-container-data-pointer clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-data-pointer.html)"
        },
        {
          "shortName": "CppClangTidyBugproneSignedCharMisuse",
          "displayName": "bugprone-signed-char-misuse clang-tidy check",
          "enabled": true,
          "description": "bugprone-signed-char-misuse clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/signed-char-misuse.html)"
        },
        {
          "shortName": "CppClangTidyAbseilDurationSubtraction",
          "displayName": "abseil-duration-subtraction clang-tidy check",
          "enabled": false,
          "description": "abseil-duration-subtraction clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-subtraction.html)"
        },
        {
          "shortName": "CppClangTidyModernizeDeprecatedHeaders",
          "displayName": "modernize-deprecated-headers clang-tidy check",
          "enabled": true,
          "description": "modernize-deprecated-headers clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/deprecated-headers.html)"
        },
        {
          "shortName": "CppClangTidyBugproneTerminatingContinue",
          "displayName": "bugprone-terminating-continue clang-tidy check",
          "enabled": true,
          "description": "bugprone-terminating-continue clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/terminating-continue.html)"
        },
        {
          "shortName": "CppClangTidyCertDcl59Cpp",
          "displayName": "cert-dcl59-cpp clang-tidy check",
          "enabled": false,
          "description": "cert-dcl59-cpp clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl59-cpp.html)"
        },
        {
          "shortName": "CppClangTidyCertFlp37C",
          "displayName": "cert-flp37-c clang-tidy check",
          "enabled": false,
          "description": "cert-flp37-c clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/flp37-c.html)"
        },
        {
          "shortName": "CppClangTidyObjcNsdateFormatter",
          "displayName": "objc-nsdate-formatter clang-tidy check",
          "enabled": false,
          "description": "objc-nsdate-formatter clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/nsdate-formatter.html)"
        },
        {
          "shortName": "CppClangTidyHicppUppercaseLiteralSuffix",
          "displayName": "hicpp-uppercase-literal-suffix clang-tidy check",
          "enabled": false,
          "description": "hicpp-uppercase-literal-suffix clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/uppercase-literal-suffix.html)"
        },
        {
          "shortName": "CppClangTidyPerformanceForRangeCopy",
          "displayName": "performance-for-range-copy clang-tidy check",
          "enabled": true,
          "description": "performance-for-range-copy clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/for-range-copy.html)"
        },
        {
          "shortName": "CppClangTidyReadabilityConstReturnType",
          "displayName": "readability-const-return-type clang-tidy check",
          "enabled": false,
          "description": "readability-const-return-type clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/const-return-type.html)"
        },
        {
          "shortName": "CppClangTidyAndroidCloexecCreat",
          "displayName": "android-cloexec-creat clang-tidy check",
          "enabled": false,
          "description": "android-cloexec-creat clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-creat.html)"
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeConstCast",
          "displayName": "cppcoreguidelines-pro-type-const-cast clang-tidy check",
          "enabled": false,
          "description": "cppcoreguidelines-pro-type-const-cast clang-tidy check · [Learn more](https://releases.llvm.org/16.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-const-cast.html)"
        }
      ]
    },
    {
      "name": "Sass/SCSS",
      "inspections": [
        {
          "shortName": "SassScssResolvedByNameOnly",
          "displayName": "Missing import",
          "enabled": false,
          "description": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedPlaceholderSelector",
          "displayName": "Unresolved placeholder selector",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Incorrect boolean attribute",
          "enabled": false,
          "description": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "enabled": false,
          "description": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "Unresolved file in a link",
          "enabled": false,
          "description": "Reports an unresolved file in a link."
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown attribute",
          "enabled": false,
          "description": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag",
          "enabled": false,
          "description": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "enabled": false,
          "description": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown tag",
          "enabled": false,
          "description": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "enabled": false,
          "description": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlWrongAttributeValue",
          "displayName": "Wrong attribute value",
          "enabled": false,
          "description": "Reports an incorrect HTML attribute value."
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of 'script' tag",
          "enabled": false,
          "description": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Unresolved fragment in a link",
          "enabled": false,
          "description": "Reports an unresolved last part of an URL after the `#` sign."
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Unresolved web link",
          "enabled": false,
          "description": "Reports an unresolved web link. Works by making network requests in the background."
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational tag",
          "enabled": false,
          "description": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Obsolete tag",
          "enabled": false,
          "description": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Obsolete attribute",
          "enabled": false,
          "description": "Reports an obsolete HTML5 attribute."
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Mismatched image size",
          "enabled": false,
          "description": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
        }
      ]
    },
    {
      "name": "Flow type checker",
      "inspections": [
        {
          "shortName": "FlowJSError",
          "displayName": "Flow type checker",
          "enabled": false,
          "description": "Reports errors from [Flow](https://flowtype.org/)."
        },
        {
          "shortName": "FlowJSFlagCommentPlacement",
          "displayName": "Misplaced @flow flag",
          "enabled": false,
          "description": "Reports a `@flow` flag comment that is not located at the top of a file."
        },
        {
          "shortName": "FlowJSConfig",
          "displayName": "Missing .flowconfig",
          "enabled": false,
          "description": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
        },
        {
          "shortName": "FlowJSCoverage",
          "displayName": "Code is not covered by Flow",
          "enabled": false,
          "description": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in [Settings \\| Languages \\& Frameworks \\| JavaScript](settings://Settings.JavaScript)."
        }
      ]
    },
    {
      "name": "Common Practices and Code Improvements",
      "inspections": [
        {
          "shortName": "MemberCanBeMadeStatic.Global",
          "displayName": "Member can be made static (shared) (non-private accessibility)",
          "enabled": true,
          "description": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Global.html)"
        },
        {
          "shortName": "UseIsOperator.1",
          "displayName": "Use 'is' operator",
          "enabled": true,
          "description": "typeof($T$).IsAssignableFrom($expr$.GetType())"
        },
        {
          "shortName": "UseIsOperator.2",
          "displayName": "Use 'is' operator",
          "enabled": true,
          "description": "typeof($T$).IsInstanceOfType($expr$)"
        },
        {
          "shortName": "ReplaceWithOfType.Single.1",
          "displayName": "Replace with OfType<T>().Single()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Single($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "ReplaceWithOfType.Single.2",
          "displayName": "Replace with OfType<T>().Single() (replace with OfType<T>().Single(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Single($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "UseArrayEmptyMethod",
          "displayName": "Use 'Array.Empty<T>()'",
          "enabled": true,
          "description": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method"
        },
        {
          "shortName": "MethodHasAsyncOverloadWithCancellation",
          "displayName": "Method has async overload with cancellation support",
          "enabled": true,
          "description": "Method has async overload with 'CancellationToken'"
        },
        {
          "shortName": "EmptyStatement",
          "displayName": "Empty statement is redundant",
          "enabled": true,
          "description": "Empty statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyStatement.html)"
        },
        {
          "shortName": "UnassignedGetOnlyAutoProperty",
          "displayName": "Get-only auto-property is never assigned",
          "enabled": true,
          "description": "Auto-property without setter has no initializer or is never assigned in constructor"
        },
        {
          "shortName": "ReplaceWithSingleCallToSingle",
          "displayName": "Replace with single call to Single(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).Single()"
        },
        {
          "shortName": "ReplaceWithLastOrDefault.2",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true,
          "description": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Last($args$) : null"
        },
        {
          "shortName": "ReplaceWithLastOrDefault.3",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true,
          "description": "$seq$.Any($args$) ? $seq$.Last($args$) : default($T$)"
        },
        {
          "shortName": "ReplaceWithLastOrDefault.1",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true,
          "description": "$seq$.Any($args$) ? $seq$.Last($args$) : null"
        },
        {
          "shortName": "ReplaceWithLastOrDefault.4",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true,
          "description": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Last($args$) : default($T$)"
        },
        {
          "shortName": "ReplaceWithOfType.Any.2",
          "displayName": "Replace with OfType<T>().Any() (replace with OfType<T>().Any(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Any($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ReplaceWithOfType.Any.1",
          "displayName": "Replace with OfType<T>().Any()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Any($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "MemberCanBePrivate.Global",
          "displayName": "Member can be made private (non-private accessibility)",
          "enabled": true,
          "description": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)"
        },
        {
          "shortName": "AnnotateCanBeNullTypeMember",
          "displayName": "Declaration nullability inferred (type member is inferred to be nullable)",
          "enabled": false,
          "description": "Type member is inferred to be nullable: consider annotating it with \\[CanBeNull\\] or \\[ItemCanBeNull\\] attribute"
        },
        {
          "shortName": "UseThrowIfNullMethod",
          "displayName": "Use 'ArgumentNullException.ThrowIfNull'",
          "enabled": false,
          "description": "Replace throwing of 'ArgumentNullException' object with an invocation of the helper method"
        },
        {
          "shortName": "SimplifyConditionalTernaryExpression",
          "displayName": "Simplify conditional ternary expression",
          "enabled": true,
          "description": "Ternary expression contains 'true' or 'false' in result branch, for example\n\n```\n\r\n            condition ? true : elseBranch\r\n            condition ? thenBranch : true\r\n          \n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/SimplifyConditionalTernaryExpression.html)"
        },
        {
          "shortName": "InternalOrPrivateMemberNotDocumented",
          "displayName": "Missing XML comment for private or internal type or member",
          "enabled": false,
          "description": "Missing XML comment for private or internal type or member"
        },
        {
          "shortName": "NestedStringInterpolation",
          "displayName": "Nested string interpolation can be inlined",
          "enabled": true,
          "description": "Nested string interpolation can be inlined into containing one"
        },
        {
          "shortName": "TooWideLocalVariableScope",
          "displayName": "Local variable has too wide declaration scope",
          "enabled": true,
          "description": "Local variable is declared in a wider scope than the scope of its actual use [Learn more...](https://www.jetbrains.com/help/rider/TooWideLocalVariableScope.html)"
        },
        {
          "shortName": "RemoveConstructorInvocation",
          "displayName": "Remove constructor invocation",
          "enabled": false,
          "description": "new List\\<$T$\\>($seq$).ToArray()"
        },
        {
          "shortName": "AnnotationRedundancyAtValueType",
          "displayName": "Nullability attribute usage with declaration of void or value type",
          "enabled": true,
          "description": "Nullability attribute usage with declaration of void or value type does not affect code analysis [Learn more...](https://www.jetbrains.com/help/rider/AnnotationRedundancyAtValueType.html)"
        },
        {
          "shortName": "PropertyCanBeMadeInitOnly.Global",
          "displayName": "Property can be made init-only (non-private accessibility)",
          "enabled": true,
          "description": "Property setter can be replaced with 'init' accessor to enforce property immutability"
        },
        {
          "shortName": "AnnotateNotNullParameter",
          "displayName": "Declaration nullability inferred (parameter is inferred to be not null)",
          "enabled": false,
          "description": "Parameter is inferred always not to be null: consider annotating it with \\[NotNull\\] or \\[ItemNotNull\\] attribute"
        },
        {
          "shortName": "StringLiteralAsInterpolationArgument",
          "displayName": "String literal can be inlined",
          "enabled": true,
          "description": "String literal can be inlined into interpolation"
        },
        {
          "shortName": "ReplaceWithSimpleAssignment.False",
          "displayName": "Replace with simple assignment",
          "enabled": true,
          "description": "$bool1$ \\&= false"
        },
        {
          "shortName": "PropertyCanBeMadeInitOnly.Local",
          "displayName": "Property can be made init-only (private accessibility)",
          "enabled": true,
          "description": "Property setter can be replaced with 'init' accessor to enforce property immutability"
        },
        {
          "shortName": "SimplifyLinqExpressionUseMinByAndMaxBy",
          "displayName": "Use 'MinBy' or 'MaxBy' instead of ordering and taking 'First' or 'Last'",
          "enabled": true,
          "description": "Replace ordering and taking 'First' or 'Last' with 'MinBy' or 'MaxBy' invocation"
        },
        {
          "shortName": "JoinDeclarationAndInitializer",
          "displayName": "Join local variable declaration and assignment",
          "enabled": true,
          "description": "Join local variable declaration and assignment [Learn more...](https://www.jetbrains.com/help/rider/JoinDeclarationAndInitializer.html)"
        },
        {
          "shortName": "StringIndexOfIsCultureSpecific.2",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.IndexOf($sarg$, $iarg1$) [Learn more...](https://www.jetbrains.com/help/rider/StringIndexOfIsCultureSpecific.2.html)"
        },
        {
          "shortName": "StringIndexOfIsCultureSpecific.3",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$) [Learn more...](https://www.jetbrains.com/help/rider/StringIndexOfIsCultureSpecific.3.html)"
        },
        {
          "shortName": "StringIndexOfIsCultureSpecific.1",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)",
          "enabled": true,
          "description": "$s$.IndexOf($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringIndexOfIsCultureSpecific.1.html)"
        },
        {
          "shortName": "UseIndexedProperty",
          "displayName": "Use indexed property",
          "enabled": true,
          "description": "Use indexed property in COM import types instead of the accessor usage"
        },
        {
          "shortName": "StringCompareToIsCultureSpecific",
          "displayName": "String.CompareTo is culture-specific",
          "enabled": true,
          "description": "$s1$.CompareTo($s2$) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareToIsCultureSpecific.html)"
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.4",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true,
          "description": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Single($args$) : default($T$)"
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.2",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true,
          "description": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Single($args$) : null"
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.3",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true,
          "description": "$seq$.Any($args$) ? $seq$.Single($args$) : default($T$)"
        },
        {
          "shortName": "ReturnTypeCanBeEnumerable.Local",
          "displayName": "Return type can be IEnumerable<T> (private accessibility)",
          "enabled": true,
          "description": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ReturnTypeCanBeEnumerable.Local.html)"
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.1",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true,
          "description": "$seq$.Any($args$) ? $seq$.Single($args$) : null"
        },
        {
          "shortName": "MemberCanBeInternal",
          "displayName": "Member or type can be made internal (friend)",
          "enabled": false,
          "description": "Member or type can be made internal (friend)"
        },
        {
          "shortName": "ConvertToConstant.Local",
          "displayName": "Convert local variable or field into constant (private accessibility)",
          "enabled": true,
          "description": "Convert local variable or field into constant"
        },
        {
          "shortName": "TypeParameterCanBeVariant",
          "displayName": "Type parameter could be declared as covariant or contravariant",
          "enabled": true,
          "description": "Type parameter could be declared as covariant or contravariant"
        },
        {
          "shortName": "ReplaceWithSingleCallToFirstOrDefault",
          "displayName": "Replace with single call to FirstOrDefault(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).FirstOrDefault()"
        },
        {
          "shortName": "PossibleMistakenArgument",
          "displayName": "Possible mistaken argument",
          "enabled": true,
          "description": "$type$.IsInstanceOfType($type$)"
        },
        {
          "shortName": "AnnotateNotNullTypeMember",
          "displayName": "Declaration nullability inferred (type member is inferred to be not null)",
          "enabled": false,
          "description": "Type member is inferred always not to be null: consider annotating it with \\[NotNull\\] or \\[ItemNotNull\\] attribute"
        },
        {
          "shortName": "StructCanBeMadeReadOnly",
          "displayName": "Struct can be made readonly",
          "enabled": true,
          "description": "Struct has no mutable members and can be made readonly"
        },
        {
          "shortName": "SuggestBaseTypeForParameter",
          "displayName": "Parameter can be declared with the base type",
          "enabled": true,
          "description": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied."
        },
        {
          "shortName": "ReplaceWithOfType.FirstOrDefault.1",
          "displayName": "Replace with OfType<T>().FirstOrDefault()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).FirstOrDefault($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "ReplaceWithOfType.FirstOrDefault.2",
          "displayName": "Replace with OfType<T>().FirstOrDefault() (replace with OfType<T>().FirstOrDefault(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).FirstOrDefault($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ReplaceWithOfType.LastOrDefault.2",
          "displayName": "Replace with OfType<T>().LastOrDefault() (replace with OfType<T>().LastOrDefault(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).LastOrDefault($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ReplaceWithOfType.LastOrDefault.1",
          "displayName": "Replace with OfType<T>().LastOrDefault()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).LastOrDefault($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "ReplaceWithSingleAssignment.False",
          "displayName": "Replace with single assignment",
          "enabled": true,
          "description": "$T$ $x$ = false; if($bool1$) $x$ = true; [Learn more...](https://www.jetbrains.com/help/rider/ReplaceWithSingleAssignment.False.html)"
        },
        {
          "shortName": "StructMemberCanBeMadeReadOnly",
          "displayName": "Struct member can be made readonly",
          "enabled": false,
          "description": "Struct member does not change the containing struct through 'this' and can be made readonly"
        },
        {
          "shortName": "RemoveRedundantOrStatement.False",
          "displayName": "Remove redundant statement",
          "enabled": true,
          "description": "$bool1$ \\|= false;"
        },
        {
          "shortName": "UseMethodAny.0",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\> 0 [Learn more...](https://www.jetbrains.com/help/rider/UseMethodAny.0.html)"
        },
        {
          "shortName": "UseMethodAny.1",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\>= 1"
        },
        {
          "shortName": "UseMethodAny.4",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\< 1"
        },
        {
          "shortName": "UseMethodAny.2",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() == 0"
        },
        {
          "shortName": "UseMethodAny.3",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\<= 0"
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.1",
          "displayName": "Check for reference equality instead",
          "enabled": true,
          "description": "$type$.Equals($type2$)"
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.3",
          "displayName": "Check for reference equality instead",
          "enabled": true,
          "description": "!$type$.Equals($type2$)"
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.2",
          "displayName": "Check for reference equality instead",
          "enabled": true,
          "description": "Equals($type$,$type2$)"
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.4",
          "displayName": "Check for reference equality instead",
          "enabled": true,
          "description": "!Equals($type$,$type2$)"
        },
        {
          "shortName": "LocalFunctionCanBeMadeStatic",
          "displayName": "Local function can be made static",
          "enabled": false,
          "description": "A local function does not use 'this' object or variables from the outer scope and can be made static [Learn more...](https://www.jetbrains.com/help/rider/LocalFunctionCanBeMadeStatic.html)"
        },
        {
          "shortName": "ReplaceWithOfType.SingleOrDefault.2",
          "displayName": "Replace with OfType<T>().SingleOrDefault() (replace with OfType<T>().SingleOrDefault(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).SingleOrDefault($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ReplaceWithOfType.SingleOrDefault.1",
          "displayName": "Replace with OfType<T>().SingleOrDefault()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).SingleOrDefault($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "SeparateLocalFunctionsWithJumpStatement",
          "displayName": "Add explicit 'return' or 'continue' before local functions",
          "enabled": true,
          "description": "Separate local functions at the end of a block with explicit 'return' or 'continue'. This will help readers understand where a method or a loop really ends without checking whether there is any executable code left after or between local functions."
        },
        {
          "shortName": "NegationOfRelationalPattern",
          "displayName": "Simplify negated relational pattern",
          "enabled": true,
          "description": "Suggest to replace \\`x is not \\> 42\\` to \\` x is \\<= 42\\`"
        },
        {
          "shortName": "TryStatementsCanBeMerged",
          "displayName": "try-catch and try-finally statements can be merged",
          "enabled": true,
          "description": "try-catch and try-finally statements can be merged"
        },
        {
          "shortName": "UseEventArgsEmptyField",
          "displayName": "Use 'EventArgs.Empty'",
          "enabled": true,
          "description": "Replace an empty 'EventArgs' allocation with a use of the predefined 'EventArgs.Empty' field"
        },
        {
          "shortName": "InvertCondition.1",
          "displayName": "Invert condition",
          "enabled": true,
          "description": "!$seq$.Any($args$) ? $expr$ : $expr2$"
        },
        {
          "shortName": "UseMethodIsInstanceOfType",
          "displayName": "Use method IsInstanceOfType(..)",
          "enabled": true,
          "description": "$type$.IsAssignableFrom($expr$.GetType())"
        },
        {
          "shortName": "MemberCanBeMadeStatic.Local",
          "displayName": "Member can be made static (shared) (private accessibility)",
          "enabled": true,
          "description": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)"
        },
        {
          "shortName": "UseCancellationTokenForIAsyncEnumerable",
          "displayName": "Use cancellation token",
          "enabled": true,
          "description": "IAsyncEnumerable supports cancellation via 'WithCancellation' extension method"
        },
        {
          "shortName": "MemberCanBeFileLocal",
          "displayName": "Type can be made file-local",
          "enabled": false,
          "description": "Type can be made file-local"
        },
        {
          "shortName": "ReplaceWithOfType.Count.1",
          "displayName": "Replace with OfType<T>().Count()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Count($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "ReplaceWithOfType.Count.2",
          "displayName": "Replace with OfType<T>().Count() (replace with OfType<T>().Count(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Count($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "UseArrayCreationExpression.2",
          "displayName": "Use array creation expression",
          "enabled": true,
          "description": "Array.CreateInstance(typeof($T$), $long$, $long2$)"
        },
        {
          "shortName": "UseArrayCreationExpression.1",
          "displayName": "Use array creation expression",
          "enabled": true,
          "description": "Array.CreateInstance(typeof($T$), $long$)"
        },
        {
          "shortName": "AccessToStaticMemberViaDerivedType",
          "displayName": "Access to a static member of a type via a derived type",
          "enabled": true,
          "description": "Access to a static member of a type via a derived type [Learn more...](https://www.jetbrains.com/help/rider/AccessToStaticMemberViaDerivedType.html)"
        },
        {
          "shortName": "SpecifyACultureInStringConversionExplicitly",
          "displayName": "Specify string culture explicitly",
          "enabled": true,
          "description": "Specify a culture in string conversion explicitly [Learn more...](https://www.jetbrains.com/help/rider/SpecifyACultureInStringConversionExplicitly.html)"
        },
        {
          "shortName": "StringEndsWithIsCultureSpecific",
          "displayName": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)",
          "enabled": false,
          "description": "$s$.EndsWith($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringEndsWithIsCultureSpecific.html)"
        },
        {
          "shortName": "RemoveRedundantOrStatement.True",
          "displayName": "Remove redundant statement",
          "enabled": true,
          "description": "$bool1$ \\&= true;"
        },
        {
          "shortName": "MoveLocalFunctionAfterJumpStatement",
          "displayName": "Put local function after 'return' or 'continue'",
          "enabled": true,
          "description": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites."
        },
        {
          "shortName": "ReplaceWithOfType.2",
          "displayName": "Replace with OfType<T>()",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $x$ is $T$).Select($y$ =\\> $y$ as $T$)"
        },
        {
          "shortName": "ReplaceWithOfType.1",
          "displayName": "Replace with OfType<T>()",
          "enabled": true,
          "description": "$seq$.SelectNotNull($x$ =\\> $x$ as $T$)"
        },
        {
          "shortName": "ReplaceWithOfType.3",
          "displayName": "Replace with OfType<T>()",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $x$ is $T$).Select($y$ =\\> ($T$)$y$)"
        },
        {
          "shortName": "FieldCanBeMadeReadOnly.Global",
          "displayName": "Field can be made readonly (non-private accessibility)",
          "enabled": true,
          "description": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)"
        },
        {
          "shortName": "ParameterTypeCanBeEnumerable.Local",
          "displayName": "Parameter type can be IEnumerable<T> (private accessibility)",
          "enabled": true,
          "description": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ParameterTypeCanBeEnumerable.Local.html)"
        },
        {
          "shortName": "CanSimplifyDictionaryLookupWithTryAdd",
          "displayName": "Dictionary lookup can be simplified with 'TryAdd'",
          "enabled": true,
          "description": "Dictionary lookup can be simplified with 'TryAdd' [Learn more...](https://www.jetbrains.com/help/rider/CanSimplifyDictionaryLookupWithTryAdd.html)"
        },
        {
          "shortName": "RemoveToList.2",
          "displayName": "Remove ToList()",
          "enabled": true,
          "description": "$seq$.ToList().Count($x$ =\\> $expr$)"
        },
        {
          "shortName": "RemoveToList.1",
          "displayName": "Remove ToList()",
          "enabled": true,
          "description": "$seq$.ToList().ToArray()"
        },
        {
          "shortName": "MethodHasAsyncOverload",
          "displayName": "Method has async overload",
          "enabled": true,
          "description": "Method has async overload"
        },
        {
          "shortName": "StringStartsWithIsCultureSpecific",
          "displayName": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)",
          "enabled": false,
          "description": "$s$.StartsWith($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringStartsWithIsCultureSpecific.html)"
        },
        {
          "shortName": "AnnotationRedundancyInHierarchy",
          "displayName": "Annotation duplicate in hierarchy",
          "enabled": true,
          "description": "There is base member that has the same nullness annotation"
        },
        {
          "shortName": "RedundantIsBeforeRelationalPattern",
          "displayName": "Redundant 'is'",
          "enabled": true,
          "description": "Suggest to replace \\`x is \\> 42\\` to \\`x \\> 42\\` (if x is of type int)"
        },
        {
          "shortName": "MemberCanBeProtected.Global",
          "displayName": "Member can be made protected (non-private accessibility)",
          "enabled": true,
          "description": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)"
        },
        {
          "shortName": "StringLastIndexOfIsCultureSpecific.3",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$) [Learn more...](https://www.jetbrains.com/help/rider/StringLastIndexOfIsCultureSpecific.3.html)"
        },
        {
          "shortName": "StringLastIndexOfIsCultureSpecific.2",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.LastIndexOf($sarg$, $iarg1$) [Learn more...](https://www.jetbrains.com/help/rider/StringLastIndexOfIsCultureSpecific.2.html)"
        },
        {
          "shortName": "StringLastIndexOfIsCultureSpecific.1",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)",
          "enabled": true,
          "description": "$s$.LastIndexOf($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringLastIndexOfIsCultureSpecific.1.html)"
        },
        {
          "shortName": "PublicConstructorInAbstractClass",
          "displayName": "Make constructor in abstract class protected",
          "enabled": true,
          "description": "Make constructor in abstract class protected [Learn more...](https://www.jetbrains.com/help/rider/PublicConstructorInAbstractClass.html)"
        },
        {
          "shortName": "StringCompareIsCultureSpecific.6",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.6.html)"
        },
        {
          "shortName": "StringCompareIsCultureSpecific.4",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $i1$, $s2$, $i2$) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.4.html)"
        },
        {
          "shortName": "StringCompareIsCultureSpecific.5",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.5.html)"
        },
        {
          "shortName": "StringCompareIsCultureSpecific.2",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true,
          "description": "$string$.Compare($s1$, $s2$, false) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.2.html)"
        },
        {
          "shortName": "StringCompareIsCultureSpecific.3",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true,
          "description": "$string$.Compare($s1$, $s2$, true) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.3.html)"
        },
        {
          "shortName": "StringCompareIsCultureSpecific.1",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $s2$) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.1.html)"
        },
        {
          "shortName": "MultipleNullableAttributesUsage",
          "displayName": "Multiple nullable attributes usage",
          "enabled": true,
          "description": "It is incorrect to use \\[NotNull\\] and \\[CanBeNull\\] simultaneously [Learn more...](https://www.jetbrains.com/help/rider/MultipleNullableAttributesUsage.html)"
        },
        {
          "shortName": "SimplifyLinqExpressionUseAll",
          "displayName": "Simplify LINQ expression (use 'All')",
          "enabled": true,
          "description": "Simplify LINQ expression (use 'All' instead of 'Any')"
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.1",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true,
          "description": "$seq$.Any($args$) ? $seq$.First($args$) : null"
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.3",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true,
          "description": "$seq$.Any($args$) ? $seq$.First($args$) : default($T$)"
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.2",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true,
          "description": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.First($args$) : null"
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.4",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true,
          "description": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.First($args$) : default($T$)"
        },
        {
          "shortName": "ReplaceWithStringIsNullOrEmpty",
          "displayName": "Use 'String.IsNullOrEmpty'",
          "enabled": true,
          "description": "Replace direct comparison to null and empty string with 'String.IsNullOrEmpty' call [Learn more...](https://www.jetbrains.com/help/rider/ReplaceWithStringIsNullOrEmpty.html)"
        },
        {
          "shortName": "NegativeEqualityExpression",
          "displayName": "Simplify negative equality expression",
          "enabled": true,
          "description": "Suggest to replace !(expr1 != expr2) to expr1 == expr2 !(expr1 == expr2) to expr1 != expr2 [Learn more...](https://www.jetbrains.com/help/rider/NegativeEqualityExpression.html)"
        },
        {
          "shortName": "SimplifyLinqExpressionUseAny",
          "displayName": "Simplify LINQ expression (use 'Any')",
          "enabled": true,
          "description": "Simplify LINQ expression (use 'Any' instead of 'All')"
        },
        {
          "shortName": "ReplaceWithSingleCallToLast",
          "displayName": "Replace with single call to Last(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).Last()"
        },
        {
          "shortName": "AutoPropertyCanBeMadeGetOnly.Local",
          "displayName": "Auto-property can be made get-only (private accessibility)",
          "enabled": true,
          "description": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)"
        },
        {
          "shortName": "AnnotateCanBeNullParameter",
          "displayName": "Declaration nullability inferred (parameter is inferred to be nullable)",
          "enabled": false,
          "description": "\\[EXPERIMENTAL\\] Parameter is inferred to be nullable: consider annotating it with \\[CanBeNull\\] or \\[ItemCanBeNull\\] attribute. This inspection sometimes produces unsound results."
        },
        {
          "shortName": "MoreSpecificForeachVariableTypeAvailable",
          "displayName": "Iteration variable can be declared with a more specific type",
          "enabled": true,
          "description": "Type of iteration variable declared in 'foreach' statement is less specific than that which can be inferred from the collection type being iterated [Learn more...](https://www.jetbrains.com/help/rider/MoreSpecificForeachVariableTypeAvailable.html)"
        },
        {
          "shortName": "PossibleMistakenCallToGetType.2",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true,
          "description": "$type$.GetType()"
        },
        {
          "shortName": "PossibleMistakenCallToGetType.1",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true,
          "description": "$type$.IsInstanceOfType($expr$.GetType())"
        },
        {
          "shortName": "ConvertToConstant.Global",
          "displayName": "Convert local variable or field into constant (non-private accessibility)",
          "enabled": true,
          "description": "Convert local variable or field into constant"
        },
        {
          "shortName": "UseNullableAttributesSupportedByCompiler",
          "displayName": "Use compiler-supported nullable attributes",
          "enabled": true,
          "description": "Use compiler-supported attributes from System.Diagnostics.CodeAnalysis namespace to override annotations for nullable reference types"
        },
        {
          "shortName": "ParameterTypeCanBeEnumerable.Global",
          "displayName": "Parameter type can be IEnumerable<T> (non-private accessibility)",
          "enabled": true,
          "description": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ParameterTypeCanBeEnumerable.Global.html)"
        },
        {
          "shortName": "ReplaceWithOfType.LongCount",
          "displayName": "Replace with OfType<T>().LongCount()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).LongCount($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "DoubleNegationInPattern",
          "displayName": "Simplify negated pattern",
          "enabled": true,
          "description": "Suggest to replace \\`x is not not T\\` to \\`x is T\\` \\`!(x is not T)\\` to \\`x is T\\`"
        },
        {
          "shortName": "ReplaceWithSimpleAssignment.True",
          "displayName": "Replace with simple assignment",
          "enabled": true,
          "description": "$bool1$ \\|= true"
        },
        {
          "shortName": "ReplaceWithSingleCallToLastOrDefault",
          "displayName": "Replace with single call to LastOrDefault(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).LastOrDefault()"
        },
        {
          "shortName": "ReplaceWithSingleAssignment.True",
          "displayName": "Replace with single assignment",
          "enabled": true,
          "description": "$T$ $x$ = true; if($bool1$) $x$ = false; [Learn more...](https://www.jetbrains.com/help/rider/ReplaceWithSingleAssignment.True.html)"
        },
        {
          "shortName": "CanSimplifyDictionaryLookupWithTryGetValue",
          "displayName": "Dictionary lookup can be simplified with 'TryGetValue'",
          "enabled": true,
          "description": "Dictionary lookup can be simplified with 'TryGetValue'"
        },
        {
          "shortName": "ClassCanBeSealed.Local",
          "displayName": "Class can be made sealed (non-inheritable) (private accessibility)",
          "enabled": false,
          "description": "Class has no inheritors and can be marked sealed (non-inheritable)"
        },
        {
          "shortName": "ReplaceWithSingleCallToAny",
          "displayName": "Replace with single call to Any(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).Any()"
        },
        {
          "shortName": "AutoPropertyCanBeMadeGetOnly.Global",
          "displayName": "Auto-property can be made get-only (non-private accessibility)",
          "enabled": true,
          "description": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Global.html)"
        },
        {
          "shortName": "EmptyEmbeddedStatement",
          "displayName": "Empty control statement body",
          "enabled": true,
          "description": "Empty control statement body [Learn more...](https://www.jetbrains.com/help/rider/EmptyEmbeddedStatement.html)"
        },
        {
          "shortName": "MethodSupportsCancellation",
          "displayName": "Method supports cancellation",
          "enabled": true,
          "description": "Method has overload with 'CancellationToken'"
        },
        {
          "shortName": "MemberCanBeProtected.Local",
          "displayName": "Member can be made protected (private accessibility)",
          "enabled": true,
          "description": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Local.html)"
        },
        {
          "shortName": "SuggestBaseTypeForParameterInConstructor",
          "displayName": "Parameter can be declared with the base type",
          "enabled": true,
          "description": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied."
        },
        {
          "shortName": "NotObservableAnnotationRedundancy",
          "displayName": "Nullability attribute used with declaration that cannot be directly referenced from other code",
          "enabled": true,
          "description": "Redundant nullability attribute used with declaration that cannot be directly referenced from other code"
        },
        {
          "shortName": "FieldCanBeMadeReadOnly.Local",
          "displayName": "Field can be made readonly (private accessibility)",
          "enabled": true,
          "description": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)"
        },
        {
          "shortName": "BaseMemberHasParams",
          "displayName": "Base member has 'params' parameter, but the overrider does not have it",
          "enabled": true,
          "description": "Base member has 'params' parameter, but the overrider does not have it"
        },
        {
          "shortName": "ReturnTypeCanBeEnumerable.Global",
          "displayName": "Return type can be IEnumerable<T> (non-private accessibility)",
          "enabled": true,
          "description": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ReturnTypeCanBeEnumerable.Global.html)"
        },
        {
          "shortName": "ReplaceWithOfType.First.1",
          "displayName": "Replace with OfType<T>().First()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).First($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "ReplaceWithOfType.First.2",
          "displayName": "Replace with OfType<T>().First() (replace with OfType<T>().First(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).First($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ReplaceWithSingleCallToFirst",
          "displayName": "Replace with single call to First(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).First()"
        },
        {
          "shortName": "SpecifyStringComparison",
          "displayName": "Specify string comparison explicitly",
          "enabled": true,
          "description": "Specify string comparison explicitly [Learn more...](https://www.jetbrains.com/help/rider/SpecifyStringComparison.html)"
        },
        {
          "shortName": "ReplaceWithOfType.Where",
          "displayName": "Replace with OfType<T>().Where() (replace with OfType<T>().Where(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Where($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ReplaceWithOfType.Last.1",
          "displayName": "Replace with OfType<T>().Last()",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Last($y$ =\\> $y$ != null)"
        },
        {
          "shortName": "ReplaceWithOfType.Last.2",
          "displayName": "Replace with OfType<T>().Last() (replace with OfType<T>().Last(..))",
          "enabled": true,
          "description": "$seq$.Select($x$ =\\> $x$ as $T$).Last($y$ =\\> $y$ != null \\&\\& $expr$)"
        },
        {
          "shortName": "ConvertIfToOrExpression",
          "displayName": "Convert 'if' into '||'",
          "enabled": true,
          "description": "Suggest to replace bool result = x \\> 0; if (y \\> 0) result = true; To bool result = x \\> 0 \\|\\| y \\> 0; [Learn more...](https://www.jetbrains.com/help/rider/ConvertIfToOrExpression.html)"
        },
        {
          "shortName": "ReplaceWithSingleCallToCount",
          "displayName": "Replace with single call to Count(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).Count()"
        },
        {
          "shortName": "ContainerAnnotationRedundancy",
          "displayName": "Container nullability attribute usage with declaration of non-container type",
          "enabled": true,
          "description": "Container nullability attribute usage with declaration of non-container type does not affect code analysis"
        },
        {
          "shortName": "ConvertIfDoToWhile",
          "displayName": "Convert 'if do while' into 'while'",
          "enabled": true,
          "description": "Simplify statement"
        },
        {
          "shortName": "UseEmptyTypesField",
          "displayName": "Use 'Type.EmptyTypes'",
          "enabled": true,
          "description": "Replace an empty array allocation with a use of the predefined 'Type.EmptyTypes' field"
        },
        {
          "shortName": "ReplaceWithSingleCallToSingleOrDefault",
          "displayName": "Replace with single call to SingleOrDefault(..)",
          "enabled": true,
          "description": "$seq$.Where($x$ =\\> $expr$).SingleOrDefault()"
        },
        {
          "shortName": "ClassCanBeSealed.Global",
          "displayName": "Class can be made sealed (non-inheritable) (non-private accessibility)",
          "enabled": false,
          "description": "Class has no inheritors and can be marked sealed (non-inheritable)"
        },
        {
          "shortName": "ExtractCommonPropertyPattern",
          "displayName": "Extract common property pattern",
          "enabled": true,
          "description": "Simplify recursive pattern by extracting common property pattern"
        },
        {
          "shortName": "MemberCanBePrivate.Local",
          "displayName": "Member can be made private (private accessibility)",
          "enabled": true,
          "description": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Local.html)"
        },
        {
          "shortName": "CppUseElementsView",
          "displayName": "std::views::keys/values can be used",
          "enabled": true,
          "description": "For example, when iterating on key-value pairs, std::views::keys allows ignoring the values."
        },
        {
          "shortName": "CppThrowExpressionCanBeReplacedWithRethrow",
          "displayName": "Throw expression can be replaced with a rethrow expression",
          "enabled": true,
          "description": "Throw expression can be replaced with a rethrow expression"
        },
        {
          "shortName": "CppIfCanBeReplacedByConstexprIf",
          "displayName": "If statement with constant condition can be replaced with 'if constexpr'",
          "enabled": true,
          "description": "If statement with constant condition can be replaced with 'if constexpr'"
        },
        {
          "shortName": "CppDiscardedPostfixOperatorResult",
          "displayName": "Result of a postfix operator is discarded",
          "enabled": true,
          "description": "Result of a postfix operator is discarded. It might be more efficient to use a prefix form of the operator."
        },
        {
          "shortName": "CppParameterMayBeConst",
          "displayName": "Parameter can be made const",
          "enabled": true,
          "description": "Parameter can be made const"
        },
        {
          "shortName": "CppPassValueParameterByConstReference",
          "displayName": "Pass value parameters by const reference",
          "enabled": true,
          "description": "Parameter of a type that is expensive to copy is passed by value, but it can be passed by const reference instead"
        },
        {
          "shortName": "CppUseAssociativeContains",
          "displayName": "'contains' member function can be used",
          "enabled": true,
          "description": "'contains' member function can be used"
        },
        {
          "shortName": "CppNonExplicitConvertingConstructor",
          "displayName": "Non-explicit converting constructor",
          "enabled": true,
          "description": "Non-explicit converting constructor"
        },
        {
          "shortName": "CppForLoopCanBeReplacedWithWhile",
          "displayName": "For-loop can be replaced with while-loop",
          "enabled": true,
          "description": "For-loop without init-statement and update expression is equivalent to a while-loop"
        },
        {
          "shortName": "CppCStyleCast",
          "displayName": "C-style cast is used instead of a C++ cast",
          "enabled": true,
          "description": "C-style cast is used instead of a C++ cast"
        },
        {
          "shortName": "CppLocalVariableMayBeConst",
          "displayName": "Local variable can be made const",
          "enabled": true,
          "description": "Local variable can be made const"
        },
        {
          "shortName": "CppClassCanBeFinal",
          "displayName": "Class can be made final",
          "enabled": true,
          "description": "A class definition can be marked as final so it cannot be inherited from"
        },
        {
          "shortName": "CppUseRangeAlgorithm",
          "displayName": "Algorithm operating on ranges can be used",
          "enabled": true,
          "description": "Algorithm accepting iterators is used instead of the corresponding algorithm from std::ranges"
        },
        {
          "shortName": "CppMemberFunctionMayBeStatic",
          "displayName": "Member function can be made static",
          "enabled": true,
          "description": "Member function can be made static"
        },
        {
          "shortName": "CppConstValueFunctionReturnType",
          "displayName": "Function returns by const value",
          "enabled": true,
          "description": "Returning from a function by const value is usually not beneficial. Consider returning values as non-const to take advantage of move semantics."
        },
        {
          "shortName": "CppTooWideScopeInitStatement",
          "displayName": "Variable can be moved to init statement",
          "enabled": true,
          "description": "Don't introduce a variable before you need to use it"
        },
        {
          "shortName": "CppUseStdSize",
          "displayName": "std::size can be used",
          "enabled": true,
          "description": "std::size is type safe alternative to C idiom for array size calculation"
        },
        {
          "shortName": "CppTooWideScope",
          "displayName": "Variable can be moved to inner scope",
          "enabled": true,
          "description": "Don't introduce a variable before you need to use it"
        },
        {
          "shortName": "CppFunctionalStyleCast",
          "displayName": "Functional-style cast is used instead of a C++ cast",
          "enabled": true,
          "description": "Functional-style cast is used instead of a C++ cast"
        },
        {
          "shortName": "CppParameterMayBeConstPtrOrRef",
          "displayName": "Parameter can be made pointer/reference to const",
          "enabled": true,
          "description": "Parameter can be made pointer/reference to const"
        },
        {
          "shortName": "CppUseFamiliarTemplateSyntaxForGenericLambdas",
          "displayName": "Lambda can be rewritten to use explicit template parameters",
          "enabled": true,
          "description": "Lambda can be rewritten to use explicit template parameters"
        },
        {
          "shortName": "CppUseStructuredBinding",
          "displayName": "Structured binding can be used",
          "enabled": true,
          "description": "Structured binding can be used"
        },
        {
          "shortName": "CppJoinDeclarationAndAssignment",
          "displayName": "Declaration and assignment can be joined",
          "enabled": true,
          "description": "Declaration of a variable and assignment to it can be joined"
        },
        {
          "shortName": "CppReplaceTieWithStructuredBinding",
          "displayName": "Structured binding can be used instead of tie(..)",
          "enabled": true,
          "description": "Structured binding can be used instead of tie(..)"
        },
        {
          "shortName": "CppUseEraseAlgorithm",
          "displayName": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom",
          "enabled": true,
          "description": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom"
        },
        {
          "shortName": "CppUseAlgorithmWithCount",
          "displayName": "Algorithm accepting an iterator and a count can be used",
          "enabled": true,
          "description": "A standard algorithm accepting range iterators is used instead of the variant accepting an iterator and a count"
        },
        {
          "shortName": "ConstevalIfIsAlwaysConstant",
          "displayName": "consteval if is always constant",
          "enabled": true,
          "description": "consteval if is always constant"
        },
        {
          "shortName": "CppUseTypeTraitAlias",
          "displayName": "Type trait can be simplified using a template alias or a variable template",
          "enabled": true,
          "description": "A type trait can be simplified using a template alias or a variable template"
        },
        {
          "shortName": "CppSmartPointerVsMakeFunction",
          "displayName": "Constructor of smart pointer is used instead of its make function",
          "enabled": true,
          "description": "Constructor of a smart pointer (boost/std::shared_ptr/unique_ptr) is used instead of the corresponding make_shared/make_unique. Make functions are exception-safe and more efficient."
        },
        {
          "shortName": "StdIsConstantEvaluatedWillAlwaysEvaluateToConstant",
          "displayName": "'std::is_constant_evaluated' will always evaluate to constant",
          "enabled": true,
          "description": "'std::is_constant_evaluated' will always evaluate to constant"
        },
        {
          "shortName": "CppRedundantNamespaceDefinition",
          "displayName": "Namespace definition containing single class specialization",
          "enabled": true,
          "description": "Don't introduce a namespace definition only for class specialization, specialization can be defined using qualified class name"
        },
        {
          "shortName": "CppVariableCanBeMadeConstexpr",
          "displayName": "Variable can be made constexpr",
          "enabled": true,
          "description": "Variable can be made constexpr"
        },
        {
          "shortName": "CppMemberFunctionMayBeConst",
          "displayName": "Member function can be made const",
          "enabled": true,
          "description": "Member function can be made const"
        },
        {
          "shortName": "IfStdIsConstantEvaluatedCanBeReplaced",
          "displayName": "'if' can be replaced by 'if consteval'",
          "enabled": true,
          "description": "'if' can be replaced by 'if consteval'"
        },
        {
          "shortName": "CppZeroConstantCanBeReplacedWithNullptr",
          "displayName": "Zero constant can be replaced with nullptr",
          "enabled": true,
          "description": "Zero constant can be replaced with nullptr"
        },
        {
          "shortName": "CppReplaceMemsetWithZeroInitialization",
          "displayName": "Zero initialization can be used instead of memset",
          "enabled": true,
          "description": "Zero initialization can be used instead of memset"
        },
        {
          "shortName": "CppCompileTimeConstantCanBeReplacedWithBooleanConstant",
          "displayName": "Compile-time constant expression can be replaced with either 'true' or 'false'",
          "enabled": true,
          "description": "Compile-time integral constant expression or nullptr is converted to bool and can be replaced with 'true' or 'false'"
        },
        {
          "shortName": "CppNonExplicitConversionOperator",
          "displayName": "Non-explicit conversion operator",
          "enabled": true,
          "description": "Non-explicit conversion operator"
        },
        {
          "shortName": "CppReinterpretCastFromVoidPtr",
          "displayName": "reinterpret_cast is used instead of a static_cast",
          "enabled": true,
          "description": "reinterpret_cast is used instead of a static_cast"
        },
        {
          "shortName": "VBReplaceWithSingleCallToLast",
          "displayName": "Replace with single call to Last(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).Last()"
        },
        {
          "shortName": "VBReplaceWithOfType.Single.2",
          "displayName": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.Single.1",
          "displayName": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBUseMethodAny.1",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\> 0"
        },
        {
          "shortName": "VBUseMethodAny.2",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\>= 1"
        },
        {
          "shortName": "VBUseMethodAny.3",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() = 0"
        },
        {
          "shortName": "VBUseMethodAny.4",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\<= 0"
        },
        {
          "shortName": "VBUseMethodAny.5",
          "displayName": "Use method Any()",
          "enabled": true,
          "description": "$seq$.Count() \\< 1"
        },
        {
          "shortName": "VBReplaceWithOfType.Last.1",
          "displayName": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBReplaceWithOfType.Last.2",
          "displayName": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToFirstOrDefault",
          "displayName": "Replace with single call to FirstOrDefault(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).FirstOrDefault()"
        },
        {
          "shortName": "ConvertToVbAutoPropertyWhenPossible",
          "displayName": "Convert property to auto-property when possible",
          "enabled": true,
          "description": "Converts property declaration to VB.NET auto-property syntax."
        },
        {
          "shortName": "VBReplaceWithSingleAssignment.1",
          "displayName": "Replace with single assignment",
          "enabled": true,
          "description": "Dim $x$ = False If($bool1$) Then $x$ = True"
        },
        {
          "shortName": "VBReplaceWithSingleAssignment.2",
          "displayName": "Replace with single assignment",
          "enabled": true,
          "description": "Dim $x$ = True If($bool1$) Then $x$ = False"
        },
        {
          "shortName": "VBReplaceWithFirstOrDefault",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true,
          "description": "If ($seq$.Any($args$), $seq$.First($args$), Nothing)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.9",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.All(Function ($x$) $expr$ Is $expr2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.1",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.Any(Function ($x$) Not $expr$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.2",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.All(Function ($x$) Not $expr$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.3",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.Any(Function ($x$) $expr$ IsNot $expr2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.4",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.Any(Function ($x$) $expr$ \\<\\> $expr2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.5",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.All(Function ($x$) $expr$ IsNot $expr2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.6",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.All(Function ($x$) $expr$ \\<\\> $expr2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.7",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.Any(Function ($x$) $expr$ Is $expr2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.8",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.Any(Function ($x$) $expr$ = $expr2$)"
        },
        {
          "shortName": "VBReplaceWithLastOrDefault",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true,
          "description": "If ($seq$.Any($args$), $seq$.Last($args$), Nothing)"
        },
        {
          "shortName": "SimplifyIIf",
          "displayName": "Simplify 'IIf'",
          "enabled": true,
          "description": "'IIf' contains 'True' or 'False' in result branch, for example\n\n```\n\r\n                IIf(condition, True, elseBranch)\r\n                IIf(condition, thenBranch : True)\r\n              \n```"
        },
        {
          "shortName": "ConvertToVbAutoProperty",
          "displayName": "Convert property to auto-property",
          "enabled": true,
          "description": "Converts property declaration to VB.NET auto-property syntax."
        },
        {
          "shortName": "VBReplaceWithOfType.Where",
          "displayName": "Replace with OfType<T>().Where() (replace with OfType(Of ..)().Where(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Where(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBUseTypeOfIsOperator.1",
          "displayName": "Use 'TypeOf .. Is ..' operator",
          "enabled": true,
          "description": "GetType($T$).IsAssignableFrom($expr$.GetType())"
        },
        {
          "shortName": "VBUseTypeOfIsOperator.2",
          "displayName": "Use 'TypeOf .. Is ..' operator",
          "enabled": true,
          "description": "GetType($T$).IsInstanceOfType($expr$)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToAny",
          "displayName": "Replace with single call to Any(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).Any()"
        },
        {
          "shortName": "VBReplaceWithOfType.SingleOrDefault.2",
          "displayName": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.SingleOrDefault.1",
          "displayName": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToFirst",
          "displayName": "Replace with single call to First(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).First()"
        },
        {
          "shortName": "VBStringCompareToIsCultureSpecific",
          "displayName": "String.CompareTo is culture-specific",
          "enabled": true,
          "description": "$s1$.CompareTo($s2$)"
        },
        {
          "shortName": "VBReplaceWithSingleOrDefault",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true,
          "description": "If ($seq$.Any($args$), $seq$.Single($args$), Nothing)"
        },
        {
          "shortName": "VBStringEndsWithIsCultureSpecific",
          "displayName": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)",
          "enabled": false,
          "description": "$s$.EndsWith($sarg$)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToCount",
          "displayName": "Replace with single call to Count(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).Count()"
        },
        {
          "shortName": "VBRemoveToList.2",
          "displayName": "Remove ToList()",
          "enabled": true,
          "description": "$seq$.ToList().Count"
        },
        {
          "shortName": "VBRemoveToList.1",
          "displayName": "Remove ToList()",
          "enabled": true,
          "description": "$seq$.ToList().ToArray()"
        },
        {
          "shortName": "VBPossibleMistakenArgument",
          "displayName": "Possible mistaken argument",
          "enabled": true,
          "description": "$type$.IsInstanceOfType($type$)"
        },
        {
          "shortName": "VBReplaceWithOfType.First.2",
          "displayName": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.First.1",
          "displayName": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToLastOrDefault",
          "displayName": "Replace with single call to LastOrDefault(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).LastOrDefault()"
        },
        {
          "shortName": "VBStringLastIndexOfIsCultureSpecific.1",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)",
          "enabled": true,
          "description": "$s$.LastIndexOf($sarg$)"
        },
        {
          "shortName": "VBStringLastIndexOfIsCultureSpecific.2",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.LastIndexOf($sarg$, $iarg1$)"
        },
        {
          "shortName": "VBStringLastIndexOfIsCultureSpecific.3",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$)"
        },
        {
          "shortName": "VBUseMethodIsInstanceOfType",
          "displayName": "Use method IsInstanceOfType(..)",
          "enabled": true,
          "description": "$type$.IsAssignableFrom($expr$.GetType())"
        },
        {
          "shortName": "VBReplaceWithOfType.2",
          "displayName": "Replace with OfType<T>() (replace with OfType(Of ..)())",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) DirectCast($y$, $T$))"
        },
        {
          "shortName": "VBReplaceWithOfType.1",
          "displayName": "Replace with OfType<T>() (replace with OfType(Of ..)())",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) TryCast($y$, $T$))"
        },
        {
          "shortName": "VBPossibleMistakenCallToGetType.1",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true,
          "description": "$type$.IsInstanceOfType($expr$.GetType())"
        },
        {
          "shortName": "VBPossibleMistakenCallToGetType.2",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true,
          "description": "$type$.GetType()"
        },
        {
          "shortName": "VBReplaceWithOfType.LastOrDefault.1",
          "displayName": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBReplaceWithOfType.LastOrDefault.2",
          "displayName": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.Count.2",
          "displayName": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.Count.1",
          "displayName": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBCheckForReferenceEqualityInstead.2",
          "displayName": "Check for reference equality instead",
          "enabled": true,
          "description": "Equals($type$,$type2$)"
        },
        {
          "shortName": "VBCheckForReferenceEqualityInstead.1",
          "displayName": "Check for reference equality instead",
          "enabled": true,
          "description": "$type$.Equals($type2$)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToSingle",
          "displayName": "Replace with single call to Single(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).Single()"
        },
        {
          "shortName": "ConvertToVbAutoPropertyWithPrivateSetter",
          "displayName": "Convert property to auto-property with private setter",
          "enabled": true,
          "description": "Converts property declaration to VB.NET auto-property syntax with private setter declared."
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.5",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false)"
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.4",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $i1$, $s2$, $i2$)"
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.6",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true)"
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.1",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)",
          "enabled": true,
          "description": "$s$.Compare($s1$, $s2$)"
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.3",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true,
          "description": "$string$.Compare($s1$, $s2$, true)"
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.2",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true,
          "description": "$string$.Compare($s1$, $s2$, false)"
        },
        {
          "shortName": "VBReplaceWithOfType.Any.2",
          "displayName": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.Any.1",
          "displayName": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBUseFirstInstead",
          "displayName": "Use First() instead",
          "enabled": true,
          "description": "$enumerable$.FirstOrDefault().$method$(...)"
        },
        {
          "shortName": "VBStringIndexOfIsCultureSpecific.1",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)",
          "enabled": true,
          "description": "$s$.IndexOf($sarg$)"
        },
        {
          "shortName": "VBStringIndexOfIsCultureSpecific.3",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$)"
        },
        {
          "shortName": "VBStringIndexOfIsCultureSpecific.2",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true,
          "description": "$s$.IndexOf($sarg$, $iarg1$)"
        },
        {
          "shortName": "VBStringStartsWithIsCultureSpecific",
          "displayName": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)",
          "enabled": false,
          "description": "$s$.StartsWith($sarg$)"
        },
        {
          "shortName": "SimplifyConditionalOperator",
          "displayName": "Simplify conditional operator",
          "enabled": true,
          "description": "Conditional operator contains 'True' or 'False' in result branch, for example\n\n```\n\r\n                If(condition, True, elseBranch)\r\n                If(condition, thenBranch : True)\r\n              \n```"
        },
        {
          "shortName": "VBReplaceWithOfType.FirstOrDefault.2",
          "displayName": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault(..))",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
        },
        {
          "shortName": "VBReplaceWithOfType.FirstOrDefault.1",
          "displayName": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault())",
          "enabled": true,
          "description": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing)"
        },
        {
          "shortName": "VBUseArrayCreationExpression.1",
          "displayName": "Use array creation expression",
          "enabled": true,
          "description": "Array.CreateInstance(GetType($T$), $long$)"
        },
        {
          "shortName": "VBUseArrayCreationExpression.2",
          "displayName": "Use array creation expression",
          "enabled": true,
          "description": "Array.CreateInstance(GetType($T$), $long$, $long2$)"
        },
        {
          "shortName": "VBSimplifyLinqExpression.10",
          "displayName": "Simplify expression",
          "enabled": true,
          "description": "!$seq$.All(Function ($x$) $expr$ = $expr2$)"
        },
        {
          "shortName": "VBReplaceWithSingleCallToSingleOrDefault",
          "displayName": "Replace with single call to SingleOrDefault(..)",
          "enabled": true,
          "description": "$seq$.Where(Function ($x$) $expr$).SingleOrDefault()"
        },
        {
          "shortName": "MissingBodyTag",
          "displayName": "Important tags or attributes missing (missing <body>)",
          "enabled": false,
          "description": "\\<(\\[)html(\\]) $attr1$\\>$cont$"
        },
        {
          "shortName": "ClearAttributeIsObsolete",
          "displayName": "Obsolete tags and attributes (attribute 'clear' is obsolete)",
          "enabled": false,
          "description": "\\<$tag$ (\\[)clear=\"$val$\"(\\]) $a1$\\>"
        },
        {
          "shortName": "ClearAttributeIsObsolete.All",
          "displayName": "Obsolete tags and attributes (attribute 'clear' is obsolete)",
          "enabled": false,
          "description": "\\<$tag$ (\\[)clear=all(\\]) $a1$\\>"
        },
        {
          "shortName": "MissingAltAttributeInImgTag",
          "displayName": "Important tags or attributes missing (<img> should specify alternative text)",
          "enabled": false,
          "description": "\\<(\\[)img(\\]) $attrs$\\>"
        },
        {
          "shortName": "EmptyTitleTag",
          "displayName": "Important tags or attributes missing (empty <title>)",
          "enabled": false,
          "description": ""
        },
        {
          "shortName": "MissingHeadTag",
          "displayName": "Important tags or attributes missing (missing <head>)",
          "enabled": false,
          "description": "\\<(\\[)html(\\]) $attr1$\\>$cont$"
        },
        {
          "shortName": "MissingHeadAndBodyTags",
          "displayName": "Important tags or attributes missing (missing <head> and <body>)",
          "enabled": false,
          "description": "\\<(\\[)html(\\]) $attr1$\\>"
        },
        {
          "shortName": "CenterTagIsObsolete",
          "displayName": "Obsolete tags and attributes (<center> is obsolete)",
          "enabled": false,
          "description": "\\<(\\[)center(\\]) $attrs$\\>$content$"
        },
        {
          "shortName": "Asp.TagAttributeWithOptionalValue",
          "displayName": "Attribute with optional value problem",
          "enabled": true,
          "description": ""
        }
      ]
    },
    {
      "name": "PostCSS",
      "inspections": [
        {
          "shortName": "PostCssUnresolvedModuleValueReference",
          "displayName": "Unresolved CSS module value",
          "enabled": false,
          "description": "Reports an unresolved reference to a [CSS Module Value](https://github.com/css-modules/postcss-modules-values) (`@value` declaration).\n\nExample:\n\n\n    @value foo from unknown;\n"
        },
        {
          "shortName": "PostCssNesting",
          "displayName": "Invalid nested rule",
          "enabled": false,
          "description": "Reports a nested style rule whose syntax doesn't comply with the [PostCSS Nested](https://github.com/postcss/postcss-nested) or the [PostCSS Nesting](https://github.com/csstools/postcss-nesting) specification.\n\nExample:\n\n\n    .phone {\n      &_title {}\n    }\n"
        },
        {
          "shortName": "PostCssCustomMedia",
          "displayName": "Invalid custom media",
          "enabled": false,
          "description": "Reports a syntax error in a [PostCSS Custom Media](https://github.com/postcss/postcss-custom-media) query.\n\nExample:\n\n\n    @custom-media --small-viewport (max-width: 30em);\n"
        },
        {
          "shortName": "PostCssCustomSelector",
          "displayName": "Invalid custom selector",
          "enabled": false,
          "description": "Reports a syntax error in [PostCSS Custom Selector](https://github.com/postcss/postcss-custom-selectors).\n\nExample:\n\n\n    @custom-selector :--heading h1, h2, h3;\n"
        },
        {
          "shortName": "PostCssMediaRange",
          "displayName": "Invalid media query range",
          "enabled": false,
          "description": "Checks [range context](https://github.com/postcss/postcss-media-minmax) syntax, which may alternatively be used for media features with a 'range' type.\n\nExample:\n\n\n    @media screen and (500px <= width <= 1200px) {}\n"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRangeJS",
          "displayName": "Shift operation by possibly wrong constant",
          "enabled": false,
          "description": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
        },
        {
          "shortName": "IncompatibleMaskJS",
          "displayName": "Incompatible bitwise mask operation",
          "enabled": false,
          "description": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n\n    // Incompatible mask: as the last byte in mask is zero,\n    // something like 0x1200 would be possible, but not 0x1234\n    if ((mask & 0xFF00) == 0x1234) {...}\n"
        },
        {
          "shortName": "JSBitwiseOperatorUsage",
          "displayName": "Bitwise operator usage",
          "enabled": false,
          "description": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
        },
        {
          "shortName": "PointlessBitwiseExpressionJS",
          "displayName": "Bitwise expression can be simplified",
          "enabled": false,
          "description": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "JSClosureCompilerSyntax",
          "displayName": "Incorrect usage of JSDoc tags",
          "enabled": false,
          "description": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
        },
        {
          "shortName": "JSXSyntaxUsed",
          "displayName": "JSX syntax used",
          "enabled": false,
          "description": "Reports a usage of a JSX tag in JavaScript code."
        },
        {
          "shortName": "JSJoinVariableDeclarationAndAssignment",
          "displayName": "Variable declaration can be merged with the first assignment to the variable",
          "enabled": false,
          "description": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
        },
        {
          "shortName": "JSDuplicatedDeclaration",
          "displayName": "Duplicate declaration",
          "enabled": false,
          "description": "Reports multiple declarations in a scope."
        },
        {
          "shortName": "JSFileReferences",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
        },
        {
          "shortName": "ES6ClassMemberInitializationOrder",
          "displayName": "Use of possibly unassigned property in a static initializer",
          "enabled": false,
          "description": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
        },
        {
          "shortName": "JSCommentMatchesSignature",
          "displayName": "Mismatched JSDoc and function signature",
          "enabled": false,
          "description": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
        },
        {
          "shortName": "JSValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSUnresolvedLibraryURL",
          "displayName": "Missed locally stored library for HTTP link",
          "enabled": false,
          "description": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
        },
        {
          "shortName": "JSCheckFunctionSignatures",
          "displayName": "Signature mismatch",
          "enabled": false,
          "description": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSReferencingMutableVariableFromClosure",
          "displayName": "Referencing mutable variable from closure",
          "enabled": false,
          "description": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
        },
        {
          "shortName": "JSValidateJSDoc",
          "displayName": "Syntax errors and unresolved references in JSDoc",
          "enabled": false,
          "description": "Reports a syntax discrepancy in a documentation comment."
        },
        {
          "shortName": "JSAccessibilityCheck",
          "displayName": "Inaccessible @private and @protected members referenced",
          "enabled": false,
          "description": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
        },
        {
          "shortName": "JSUnfilteredForInLoop",
          "displayName": "Unfiltered for..in loop",
          "enabled": false,
          "description": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
        },
        {
          "shortName": "JSUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "enabled": false,
          "description": "Reports an unneeded semicolon."
        },
        {
          "shortName": "JSMethodCanBeStatic",
          "displayName": "Method can be made 'static'",
          "enabled": false,
          "description": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
        },
        {
          "shortName": "JSUndeclaredVariable",
          "displayName": "Implicitly declared global JavaScript variable",
          "enabled": false,
          "description": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
        },
        {
          "shortName": "JSMismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "enabled": false,
          "description": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
        },
        {
          "shortName": "ES6PreferShortImport",
          "displayName": "Import can be shortened",
          "enabled": false,
          "description": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
        },
        {
          "shortName": "ES6DestructuringVariablesMerge",
          "displayName": "Destructuring properties with the same key",
          "enabled": false,
          "description": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
        },
        {
          "shortName": "JSLastCommaInObjectLiteral",
          "displayName": "Unneeded last comma in object literal",
          "enabled": false,
          "description": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
        },
        {
          "shortName": "JSAnnotator",
          "displayName": "ECMAScript specification is not followed",
          "enabled": false,
          "description": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
        },
        {
          "shortName": "JSNonStrictModeUsed",
          "displayName": "Non-strict mode used",
          "enabled": false,
          "description": "Reports a JavaScript file that is not in the `strict` mode."
        },
        {
          "shortName": "JSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "enabled": false,
          "description": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
        },
        {
          "shortName": "JSUnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports an unresolved reference in JavaScript code. In TypeScript code, a problem is reported if the part of the reference before the dot is of the type `any`."
        },
        {
          "shortName": "ES6ShorthandObjectProperty",
          "displayName": "Property can be replaced with shorthand",
          "enabled": false,
          "description": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
        },
        {
          "shortName": "JSPrimitiveTypeWrapperUsage",
          "displayName": "Primitive type object wrapper used",
          "enabled": false,
          "description": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
        },
        {
          "shortName": "JSLastCommaInArrayLiteral",
          "displayName": "Unneeded last comma in array literal",
          "enabled": false,
          "description": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
        },
        {
          "shortName": "JSDeprecatedSymbols",
          "displayName": "Deprecated symbol used",
          "enabled": false,
          "description": "Reports a usage of a deprecated function variable."
        },
        {
          "shortName": "JSUnresolvedExtXType",
          "displayName": "Unresolved Ext JS xtype",
          "enabled": false,
          "description": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
        },
        {
          "shortName": "ES6RedundantNestingInTemplateLiteral",
          "displayName": "Redundant nesting in template literal",
          "enabled": false,
          "description": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
        },
        {
          "shortName": "JSJQueryEfficiency",
          "displayName": "JQuery selector can be optimized",
          "enabled": false,
          "description": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
        },
        {
          "shortName": "WebpackConfigHighlighting",
          "displayName": "Webpack config compliance with JSON Schema",
          "enabled": false,
          "description": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object."
        },
        {
          "shortName": "IncorrectFormatting",
          "displayName": "Incorrect formatting",
          "enabled": false,
          "description": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
        },
        {
          "shortName": "ReassignedToPlainText",
          "displayName": "Reassigned to plain text",
          "enabled": false,
          "description": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "enabled": false,
          "description": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n"
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "enabled": false,
          "description": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "enabled": false,
          "description": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "enabled": false,
          "description": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "enabled": false,
          "description": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "enabled": false,
          "description": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "enabled": false,
          "description": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details."
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "enabled": true,
          "description": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n"
        },
        {
          "shortName": "RoslynAnalyzersOutputInspection",
          "displayName": "Roslyn analyzers output",
          "enabled": false,
          "description": "Presents output of Roslyn analyzers"
        },
        {
          "shortName": "RiderSecurityErrorsInspection",
          "displayName": "Rider project security errors",
          "enabled": true,
          "description": "Reports potential security errors detected by Rider."
        },
        {
          "shortName": "RiderSolutionErrorsInspection",
          "displayName": "Rider toolset and environment errors",
          "enabled": false,
          "description": "Reports toolset and environment errors detected by Rider."
        }
      ]
    },
    {
      "name": "Unity",
      "inspections": [
        {
          "shortName": "Unity.Entities.SingletonMustBeRequested",
          "displayName": "To use the result of a 'GetSingleton<{0}>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call",
          "enabled": true,
          "description": "To use the result of a 'GetSingleton\\<{0}\\>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call"
        },
        {
          "shortName": "Unity.UnknownLayer",
          "displayName": "The layer is not defined in the 'Tags & Layers'",
          "enabled": true,
          "description": "The layer is not defined in the 'Tags \\& Layers'. The call is likely to fail at runtime."
        },
        {
          "shortName": "Unity.IncorrectScriptableObjectInstantiation",
          "displayName": "'ScriptableObject' instances must be instantiated with 'ScriptableObject.CreateInstance<T>()' instead of 'new'",
          "enabled": true,
          "description": "Using 'new' to instantiate a class derived from 'ScriptableObject' means that Unity will not call any event functions. Create a new instance using 'GameObject.AddComponent()'. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/ScriptableObjects-must-be-instantiated-with-ScriptableObject.CreateInstance-instead-of-new)"
        },
        {
          "shortName": "Unity.LoadSceneUnexistingScene",
          "displayName": "Scene does not exist",
          "enabled": true,
          "description": "There is no scene with the same name in the project."
        },
        {
          "shortName": "Unity.DuplicateShortcut",
          "displayName": "The same shortcut is defined for another menu item",
          "enabled": true,
          "description": "The same shortcut is defined for another menu item"
        },
        {
          "shortName": "Unity.UnknownTag",
          "displayName": "The tag is not defined in the 'Tags & Layers'",
          "enabled": true,
          "description": "The tag is not defined in the 'Tags \\& Layers'. Expression will return 'false'."
        },
        {
          "shortName": "Unity.LoadSceneAmbiguousSceneName",
          "displayName": "Short scene name is not unique",
          "enabled": true,
          "description": "There are several scenes with the same name in the Unity build settings. Only scene with smallest index will be used."
        },
        {
          "shortName": "Unity.LoadSceneDisabledSceneName",
          "displayName": "Scene is disabled in the build settings",
          "enabled": true,
          "description": "Scene is disabled in the Unity build settings, so it could not be loaded"
        },
        {
          "shortName": "Unity.IncorrectMethodSignatureInStringLiteral",
          "displayName": "Method referenced in string literal does not have the expected signature",
          "enabled": true,
          "description": "Method referenced in string literal does not have the expected signature."
        },
        {
          "shortName": "Unity.InstantiateWithoutParent",
          "displayName": "Setting 'parent' property immediately after object instantiation is inefficient",
          "enabled": true,
          "description": "Instantiating a Unity object and setting the 'parent' property as separate operations is inefficient, as the transform hierarchy is created and immediately replaced. Combine setting the 'parent' property with the call to instantiate the object. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-using-Object.Instantiate-without-“Transform-Parent”-parameter-and-using-SetParent-later)"
        },
        {
          "shortName": "Unity.ExpectedComponent",
          "displayName": "Expected a type derived from 'Component' or 'MonoBehaviour'",
          "enabled": true,
          "description": "A built-in type derived from 'Component' or a user-defined type derived from 'MonoBehaviour' is expected"
        },
        {
          "shortName": "Unity.LoadSceneWrongIndex",
          "displayName": "The index is missing in the build settings",
          "enabled": true,
          "description": "There is no scene with the same index in the Unity build settings."
        },
        {
          "shortName": "Unity.RedundantSerializeFieldAttribute",
          "displayName": "Redundant attribute usage (redundant 'SerializeField' attribute)",
          "enabled": true,
          "description": "Unity will ignore the 'SerializeField' attribute if a field is also marked with the 'NonSerialized' attribute [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-SerializeField-attribute)"
        },
        {
          "shortName": "Unity.InefficientPropertyAccess",
          "displayName": "Repeated access of property on built in component is inefficient",
          "enabled": true,
          "description": "Some Unity object properties result in native methods calls, and repeatedly accessing such properties is inefficient. Introduce a variable to locally cache the property value. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-multiple-unnecessary-property-accesses)"
        },
        {
          "shortName": "Unity.DuplicateEventFunction",
          "displayName": "Event function with the same name is already declared",
          "enabled": true,
          "description": "Event function with the same name is already declared."
        },
        {
          "shortName": "Unity.RedundantHideInInspectorAttribute",
          "displayName": "Redundant attribute usage (redundant 'HideInInspector' attribute)",
          "enabled": true,
          "description": "The 'HideInInspector' attribute only applies to serialized fields [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-HideInInspector-attribute)"
        },
        {
          "shortName": "Unity.LoadSceneUnknownSceneName",
          "displayName": "There is no scene with the same name in the build settings",
          "enabled": true,
          "description": "The scene is missing in the Unity build settings."
        },
        {
          "shortName": "Unity.Entities.InconsistentModifiersForDotsInheritor",
          "displayName": "{0}'s inheritor '{1}' must be '{2}{3}{4}'",
          "enabled": true,
          "description": "{0}'s inheritor '{1}' must be '{2}{3}{4}'"
        },
        {
          "shortName": "Unity.Entities.NotUpdatedComponentLookup",
          "displayName": "Field of 'ComponentLookup' type must be updated before being used.",
          "enabled": true,
          "description": "Field of 'ComponentLookup' type must be updated before being used."
        },
        {
          "shortName": "Unity.IncorrectMonoBehaviourInstantiation",
          "displayName": "'MonoBehaviour' instances must be instantiated with 'GameObject.AddComponent<T>()' instead of 'new'",
          "enabled": true,
          "description": "Using 'new' to instantiate a class derived from 'MonoBehaviour' will not attach it to a 'GameObject' instance, and Unity will not call any event functions. Create a new instance using 'GameObject.AddComponent()'. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/MonoBehaviors-must-be-instantiated-with-GameObject.AddComponent-instead-of-new)"
        },
        {
          "shortName": "Unity.ExpectedScriptableObject",
          "displayName": "Expected a type derived from 'ScriptableObject'",
          "enabled": true,
          "description": "Expected a type derived from 'ScriptableObject'"
        },
        {
          "shortName": "Unity.PossibleMisapplicationOfAttributeToMultipleFields",
          "displayName": "Possible incorrect application of attribute to multiple fields",
          "enabled": true,
          "description": "Applying an attribute to a single declaration containing multiple fields will apply the attribute to each field. The highlighted attribute (e.g. 'FormerlySerializedAs') is intended to be applied only to a single field. Prefer an explicit application to a single field in a single declaration. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Possible-mis-application-of-FormerlySerializedAs-attribute-to-multiple-fields)"
        },
        {
          "shortName": "Unity.RedundantInitializeOnLoadAttribute",
          "displayName": "Redundant attribute usage (redundant 'InitializeOnLoad' attribute)",
          "enabled": true,
          "description": "The 'InitializeOnLoad' attribute is redundant when the static constructor is missing [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-InitializeOnLoad-attribute)"
        },
        {
          "shortName": "Unity.Entities.AspectWrongFieldsType",
          "displayName": "{0}'s field '{1}' must be of type RefRW, RefRO, EnabledRefRW, EnabledRefRO, DynamicBuffer, or Entity",
          "enabled": true,
          "description": "{0}'s field '{1}' must be of type RefRW, RefRO, EnabledRefRW, EnabledRefRO, DynamicBuffer, or Entity"
        },
        {
          "shortName": "Unity.UnknownResource",
          "displayName": "The resource is not defined in the project",
          "enabled": true,
          "description": "The resource is not defined in the project. Expression will return 'null'."
        },
        {
          "shortName": "Unity.ParameterNotDerivedFromComponent",
          "displayName": "Parameter should be derived from 'Component'",
          "enabled": true,
          "description": "Parameter should be derived from 'Component'."
        },
        {
          "shortName": "Unity.UnknownAnimatorStateName",
          "displayName": "There is no animator state with the same name in the project.",
          "enabled": true,
          "description": "There is no animator state with the same name in the project."
        },
        {
          "shortName": "Unity.UnknownInputAxes",
          "displayName": "The input name is not defined in the Input manager",
          "enabled": true,
          "description": "The name is not defined in the Input manager. The call is likely to fail at runtime."
        },
        {
          "shortName": "Unity.IncorrectMethodSignature",
          "displayName": "Incorrect method signature",
          "enabled": true,
          "description": "Method does not match expected signature."
        },
        {
          "shortName": "Unity.PropertyDrawerOnGUIBase",
          "displayName": "Avoid 'base.OnGUI()' in classes derived from 'PropertyDrawer'",
          "enabled": true,
          "description": "The default implementation for 'OnGUI' in 'PropertyDrawer' will print 'No GUI Implemented' in the Unity inspector. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/base.OnGUI()-will-print-%22no-GUI-implemented%22-in-the-Unity-inspector)"
        },
        {
          "shortName": "Unity.NoNullPropagation",
          "displayName": "Possible unintended bypass of lifetime check of underlying Unity engine object ('?.' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)",
          "enabled": true,
          "description": "The null propagating operator does not call the custom equality operators defined on 'UnityEngine.Object', which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()' for a standard (and quicker) CLR null check. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Possible-unintended-bypass-of-lifetime-check-of-underlying-Unity-engine-object)"
        },
        {
          "shortName": "Unity.PreferGuidReference",
          "displayName": "Prefer GUID-based assembly references",
          "enabled": true,
          "description": "References in a .asmdef file can be by name or by asset GUID. Using an asset GUID protects against renaming the assembly definition."
        },
        {
          "shortName": "Unity.PreferNonAllocApi",
          "displayName": "Alternative non-allocating method available",
          "enabled": true,
          "description": "An alternative method is available that avoids allocation and reuses an existing buffer. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-using-allocating-versions-of-Physics-Raycast-functions)"
        },
        {
          "shortName": "Unity.Entities.MustBeStructForDotsInheritor",
          "displayName": "{0}'s inheritor '{1}' must be struct",
          "enabled": true,
          "description": "{0}'s inheritor '{1}' must be struct"
        },
        {
          "shortName": "Unity.NoNullCoalescing",
          "displayName": "Possible unintended bypass of lifetime check of underlying Unity engine object ('??' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)",
          "enabled": true,
          "description": "The null coalescing operator does not call the custom equality operators defined on 'UnityEngine.Object', which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()' for a standard (and quicker) CLR null check. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Possible-unintended-bypass-of-lifetime-check-of-underlying-Unity-engine-object)"
        },
        {
          "shortName": "Unity.ExplicitTagComparison",
          "displayName": "Use 'CompareTag' instead of explicit string comparison",
          "enabled": true,
          "description": "Explicit string comparison with 'GameObject.tag' or 'Component.tag' is inefficient. Use the 'CompareTag' method instead. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Use-CompareTag-instead-of-explicit-string-comparison)"
        },
        {
          "shortName": "Unity.RedundantEventFunction",
          "displayName": "Redundant Unity event function",
          "enabled": true,
          "description": "Empty Unity event functions are still called from native code, which affects performance. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-Unity-event-function)"
        },
        {
          "shortName": "Unity.PreferGenericMethodOverload",
          "displayName": "String based lookup of component type is inefficient",
          "enabled": true,
          "description": "Using a string type name to look up a component is slower than specifying the type as a generic type parameter [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Prefer-using-generic-method-overload-instead-of-string)"
        },
        {
          "shortName": "MISMATCHED_ASMDEF_FILENAME",
          "displayName": "File name should match the name of the assembly",
          "enabled": true,
          "description": "To avoid confusion, the name of the assembly definition file should match the name of the assembly being defined."
        },
        {
          "shortName": "Unity.PreferAddressByIdToGraphicsParams",
          "displayName": "String based graphics property lookup is inefficient",
          "enabled": true,
          "description": "String based property lookup is inefficient, as each time the method is called, the string name is converted into an integer value. Prefer calculating the integer value once and caching the result. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-using-string-based-names-for-setting-and-getting-properties-on-Animators,-Shaders-and-Materials)"
        },
        {
          "shortName": "Unity.RedundantAttributeOnTarget",
          "displayName": "Redundant attribute usage (attribute is redundant when applied to this declaration type)",
          "enabled": true,
          "description": "The attribute does not define any restrictions on valid targets, but is only useful when applied to specific declarations, e.g. field, class or method. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Attribute-is-redundant-when-applied-to-this-declaration-type)"
        },
        {
          "shortName": "Unity.RedundantFormerlySerializedAsAttribute",
          "displayName": "Redundant attribute usage (redundant 'FormerlySerializedAs' attribute)",
          "enabled": true,
          "description": "The 'FormerlySerializedAs' attribute is only valid on Unity serialized fields. It can also be redundant if the name argument matches the current name of the field. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-FormerlySerializedAs-attribute)"
        },
        {
          "shortName": "Unity.UnresolvedComponentOrScriptableObject",
          "displayName": "Cannot resolve component or scriptable object",
          "enabled": true,
          "description": "The class referred to in the call to 'GetComponent', 'AddComponent' or 'ScriptableObject.CreateInstance' cannot be found in the current project or referenced assemblies. The call is likely to fail at runtime and return null."
        }
      ]
    },
    {
      "name": "EditorConfig",
      "inspections": [
        {
          "shortName": "EditorConfigNumerousWildcards",
          "displayName": "Too many wildcards",
          "enabled": false,
          "description": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
        },
        {
          "shortName": "EditorConfigKeyCorrectness",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
        },
        {
          "shortName": "EditorConfigEncoding",
          "displayName": "File encoding doesn't match EditorConfig charset",
          "enabled": false,
          "description": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
        },
        {
          "shortName": "EditorConfigEmptyHeader",
          "displayName": "Empty header",
          "enabled": false,
          "description": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
        },
        {
          "shortName": "EditorConfigSpaceInHeader",
          "displayName": "Space in file pattern",
          "enabled": false,
          "description": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
        },
        {
          "shortName": "EditorConfigOptionRedundancy",
          "displayName": "Redundant property",
          "enabled": false,
          "description": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
        },
        {
          "shortName": "EditorConfigWildcardRedundancy",
          "displayName": "Redundant wildcard",
          "enabled": false,
          "description": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
        },
        {
          "shortName": "EditorConfigUnusedDeclaration",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "Reports unused declarations. Such declarations can be removed."
        },
        {
          "shortName": "EditorConfigRootDeclarationUniqueness",
          "displayName": "Extra top-level declaration",
          "enabled": false,
          "description": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
        },
        {
          "shortName": "EditorConfigShadowedOption",
          "displayName": "Overridden property",
          "enabled": false,
          "description": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
        },
        {
          "shortName": "EditorConfigValueUniqueness",
          "displayName": "Non-unique list value",
          "enabled": false,
          "description": "Reports duplicates in lists of values."
        },
        {
          "shortName": "EditorConfigUnexpectedComma",
          "displayName": "Unexpected comma",
          "enabled": false,
          "description": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
        },
        {
          "shortName": "EditorConfigShadowingOption",
          "displayName": "Overriding property",
          "enabled": false,
          "description": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
        },
        {
          "shortName": "EditorConfigReferenceCorrectness",
          "displayName": "Invalid reference",
          "enabled": false,
          "description": "Reports identifiers that are either unknown or have a wrong type."
        },
        {
          "shortName": "EditorConfigCharClassLetterRedundancy",
          "displayName": "Duplicate character class letter",
          "enabled": false,
          "description": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
        },
        {
          "shortName": "EditorConfigMissingRequiredDeclaration",
          "displayName": "Required declarations are missing",
          "enabled": false,
          "description": "Reports properties that miss the required declarations. Refer to the documentation for more information."
        },
        {
          "shortName": "EditorConfigPartialOverride",
          "displayName": "Overlapping sections",
          "enabled": false,
          "description": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
        },
        {
          "shortName": "EditorConfigListAcceptability",
          "displayName": "Unexpected value list",
          "enabled": false,
          "description": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
        },
        {
          "shortName": "EditorConfigPatternEnumerationRedundancy",
          "displayName": "Unnecessary braces",
          "enabled": false,
          "description": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
        },
        {
          "shortName": "EditorConfigPairAcceptability",
          "displayName": "Unexpected key-value pair",
          "enabled": false,
          "description": "Reports key-value pairs that are not allowed in the current context."
        },
        {
          "shortName": "EditorConfigNoMatchingFiles",
          "displayName": "No matching files",
          "enabled": false,
          "description": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
        },
        {
          "shortName": "EditorConfigHeaderUniqueness",
          "displayName": "EditorConfig section is not unique",
          "enabled": false,
          "description": "Reports sections that define the same file pattern as other sections."
        },
        {
          "shortName": "EditorConfigValueCorrectness",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
        },
        {
          "shortName": "EditorConfigRootDeclarationCorrectness",
          "displayName": "Unexpected top-level declaration",
          "enabled": false,
          "description": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
        },
        {
          "shortName": "EditorConfigPatternRedundancy",
          "displayName": "Duplicate or redundant pattern",
          "enabled": false,
          "description": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
        },
        {
          "shortName": "EditorConfigDeprecatedDescriptor",
          "displayName": "Deprecated property",
          "enabled": false,
          "description": "Reports EditorConfig properties that are no longer supported."
        },
        {
          "shortName": "EditorConfigCharClassRedundancy",
          "displayName": "Unnecessary character class",
          "enabled": false,
          "description": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
        },
        {
          "shortName": "EditorConfigEmptySection",
          "displayName": "Empty section",
          "enabled": false,
          "description": "Reports sections that do not contain any EditorConfig properties."
        },
        {
          "shortName": "EditorConfigVerifyByCore",
          "displayName": "Invalid .editorconfig file",
          "enabled": false,
          "description": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied."
        }
      ]
    },
    {
      "name": "Syntax Style",
      "inspections": [
        {
          "shortName": "ArrangeModifiersOrder",
          "displayName": "Adjust modifiers declaration order",
          "enabled": true,
          "description": "The order of declaration modifiers does not match code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeModifiersOrder.html)"
        },
        {
          "shortName": "ArrangeTypeModifiers",
          "displayName": "Use explicit or implicit modifier definition for types",
          "enabled": true,
          "description": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)"
        },
        {
          "shortName": "ArrangeConstructorOrDestructorBody",
          "displayName": "Use preferred body style (convert into constructor or destructor with preferred body style)",
          "enabled": false,
          "description": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeConstructorOrDestructorBody.html)"
        },
        {
          "shortName": "ArrangeRedundantParentheses",
          "displayName": "Remove redundant parentheses",
          "enabled": true,
          "description": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)"
        },
        {
          "shortName": "ArrangeVarKeywordsInDeconstructingDeclaration",
          "displayName": "Join or separate 'var' in deconstruction declarations",
          "enabled": true,
          "description": "Use preferred code style to check joined/separate 'var' usages in deconstruction declarations [Learn more...](https://www.jetbrains.com/help/rider/ArrangeVarKeywordsInDeconstructingDeclaration.html)"
        },
        {
          "shortName": "ArgumentsStyleOther",
          "displayName": "Use preferred argument style",
          "enabled": false,
          "description": "Prefer using named/positional argument for all expressions except literal, named and anonymous function [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleOther.html)"
        },
        {
          "shortName": "EnforceDoWhileStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'do-while' statement)",
          "enabled": false,
          "description": "Use braces to separate 'do-while' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceDoWhileStatementBraces.html)"
        },
        {
          "shortName": "SuggestVarOrType_SimpleTypes",
          "displayName": "Use preferred 'var' style (when type is simple)",
          "enabled": true,
          "description": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)"
        },
        {
          "shortName": "ArrangeThisQualifier",
          "displayName": "Add/remove 'this.' qualifier",
          "enabled": true,
          "description": "'this.' qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeThisQualifier.html)"
        },
        {
          "shortName": "ArrangeNamespaceBody",
          "displayName": "Use preferred namespace body style",
          "enabled": true,
          "description": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)"
        },
        {
          "shortName": "ArrangeObjectCreationWhenTypeNotEvident",
          "displayName": "Use preferred style of 'new' expression when created type is not evident",
          "enabled": true,
          "description": "Add or remove explicit type specification in 'new' expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeNotEvident.html)"
        },
        {
          "shortName": "ArrangeAccessorOwnerBody",
          "displayName": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
          "enabled": true,
          "description": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)"
        },
        {
          "shortName": "SuggestDiscardDeclarationVarStyle",
          "displayName": "Use preferred style for discard declaration",
          "enabled": true,
          "description": "Use preferred style for discard declaration [Learn more...](https://www.jetbrains.com/help/rider/SuggestDiscardDeclarationVarStyle.html)"
        },
        {
          "shortName": "UnnecessaryWhitespace",
          "displayName": "Unnecessary whitespace at the end of line",
          "enabled": false,
          "description": "Remove unnecessary whitespace at the end of line"
        },
        {
          "shortName": "EnforceLockStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'lock' statement)",
          "enabled": false,
          "description": "Use braces to separate 'lock' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceLockStatementBraces.html)"
        },
        {
          "shortName": "RemoveRedundantBraces",
          "displayName": "Use preferred braces style (remove redundant braces)",
          "enabled": false,
          "description": "Braces can be safely removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/RemoveRedundantBraces.html)"
        },
        {
          "shortName": "ArrangeStaticMemberQualifier",
          "displayName": "Add/remove qualifier for static members",
          "enabled": true,
          "description": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)"
        },
        {
          "shortName": "EnforceUsingStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'using' statement)",
          "enabled": false,
          "description": "Use braces to separate 'using' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceUsingStatementBraces.html)"
        },
        {
          "shortName": "ArrangeMethodOrOperatorBody",
          "displayName": "Use preferred body style (convert into method or operator with preferred body style)",
          "enabled": false,
          "description": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeMethodOrOperatorBody.html)"
        },
        {
          "shortName": "ArrangeAttributes",
          "displayName": "Join or separate attributes in section",
          "enabled": false,
          "description": "Attributes have to be declared in separate sections or in a single sections [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAttributes.html)"
        },
        {
          "shortName": "BuiltInTypeReferenceStyle",
          "displayName": "Replace built-in type reference with a CLR type name or a keyword",
          "enabled": true,
          "description": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)"
        },
        {
          "shortName": "ArrangeTrailingCommaInSinglelineLists",
          "displayName": "Use preferred style for trailing comma when the last element is not followed by a new line",
          "enabled": true,
          "description": "Add or remove trailing comma when the last element is not followed by a new line according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInSinglelineLists.html)"
        },
        {
          "shortName": "SuggestVarOrType_Elsewhere",
          "displayName": "Use preferred 'var' style (elsewhere)",
          "enabled": true,
          "description": "Convert if declaration is not of a built-in or simple type and is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_Elsewhere.html)"
        },
        {
          "shortName": "ArgumentsStyleLiteral",
          "displayName": "Use preferred argument style for literal values",
          "enabled": false,
          "description": "Prefer using named/positional argument when boolean, numeric, 'byte', or 'char' literal value is passed [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleLiteral.html)"
        },
        {
          "shortName": "SuggestVarOrType_DeconstructionDeclarations",
          "displayName": "Use preferred 'var' style (in deconstruction declarations)",
          "enabled": true,
          "description": "Convert if declaration is a part of a deconstruction [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_DeconstructionDeclarations.html)"
        },
        {
          "shortName": "ArrangeDefaultValueWhenTypeEvident",
          "displayName": "Use preferred style of default value expression when type is evident",
          "enabled": true,
          "description": "Add or remove explicit type specification in default value expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeEvident.html)"
        },
        {
          "shortName": "ArgumentsStyleAnonymousFunction",
          "displayName": "Use preferred argument style for anonymous functions",
          "enabled": false,
          "description": "Prefer using named/positional argument when anonymous function (lambda or delegate) is passed [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleAnonymousFunction.html)"
        },
        {
          "shortName": "SuggestVarOrType_BuiltInTypes",
          "displayName": "Use preferred 'var' style (for built-in types)",
          "enabled": true,
          "description": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)"
        },
        {
          "shortName": "EnforceWhileStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'while' statement)",
          "enabled": false,
          "description": "Use braces to separate 'while' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceWhileStatementBraces.html)"
        },
        {
          "shortName": "ArrangeLocalFunctionBody",
          "displayName": "Use preferred body style (convert into local function with preferred body style)",
          "enabled": false,
          "description": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeLocalFunctionBody.html)"
        },
        {
          "shortName": "ArgumentsStyleStringLiteral",
          "displayName": "Use preferred argument style for string literal values",
          "enabled": false,
          "description": "Prefer using named/positional argument when 'string' literal value is passed [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleStringLiteral.html)"
        },
        {
          "shortName": "EnforceFixedStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'fixed' statement)",
          "enabled": false,
          "description": "Use braces to separate 'fixed' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceFixedStatementBraces.html)"
        },
        {
          "shortName": "ArrangeObjectCreationWhenTypeEvident",
          "displayName": "Use preferred style of 'new' expression when created type is evident",
          "enabled": true,
          "description": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)"
        },
        {
          "shortName": "PlaceAssignmentExpressionIntoBlock",
          "displayName": "Place assignment expression into block",
          "enabled": false,
          "description": "Place assignment expression into block to indicate the side-effect"
        },
        {
          "shortName": "EnforceIfStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'if' statement)",
          "enabled": false,
          "description": "Use braces to separate 'if' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceIfStatementBraces.html)"
        },
        {
          "shortName": "ArrangeMissingParentheses",
          "displayName": "Add parentheses to avoid non-obvious precedence",
          "enabled": false,
          "description": "Parentheses can be safely added to expressions to clarify precedence [Learn more...](https://www.jetbrains.com/help/rider/ArrangeMissingParentheses.html)"
        },
        {
          "shortName": "SeparateControlTransferStatement",
          "displayName": "Separate control transfer statement with blank line",
          "enabled": false,
          "description": "Introduce vertical spacing to highlight control transfer statement"
        },
        {
          "shortName": "TabsAreDisallowed",
          "displayName": "Usage of tabulation character for indentation is prohibited",
          "enabled": false,
          "description": "Use this inspection to prohibit use of tabulation character for code indentation"
        },
        {
          "shortName": "ArrangeTypeMemberModifiers",
          "displayName": "Use explicit or implicit modifier definition for type members",
          "enabled": true,
          "description": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)"
        },
        {
          "shortName": "ArgumentsStyleNamedExpression",
          "displayName": "Use preferred argument style for named expressions",
          "enabled": false,
          "description": "Prefer using named/positional argument for named expressions [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleNamedExpression.html)"
        },
        {
          "shortName": "ArrangeNullCheckingPattern",
          "displayName": "Arrange null checking pattern",
          "enabled": true,
          "description": "Use preferred null checking pattern style (either 'not null' or '{ }') [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNullCheckingPattern.html)"
        },
        {
          "shortName": "EnforceForeachStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'foreach' statement)",
          "enabled": false,
          "description": "Use braces to separate 'foreach' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceForeachStatementBraces.html)"
        },
        {
          "shortName": "ArrangeDefaultValueWhenTypeNotEvident",
          "displayName": "Use preferred style of default value expression when type is not evident",
          "enabled": true,
          "description": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)"
        },
        {
          "shortName": "BuiltInTypeReferenceStyleForMemberAccess",
          "displayName": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
          "enabled": true,
          "description": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)"
        },
        {
          "shortName": "ArrangeTrailingCommaInMultilineLists",
          "displayName": "Use preferred style for trailing comma before new line in multiline lists",
          "enabled": true,
          "description": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)"
        },
        {
          "shortName": "EnforceForStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'for' statement)",
          "enabled": false,
          "description": "Use braces to separate 'for' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceForStatementBraces.html)"
        },
        {
          "shortName": "CppRemoveRedundantBraces",
          "displayName": "Use preferred braces style (remove redundant braces)",
          "enabled": false,
          "description": "Braces can be safely removed without changing code semantics"
        },
        {
          "shortName": "CppWrongSlashesInIncludeDirective",
          "displayName": "Use preferred include directive style (slash symbol used in #include directive does not match code style settings)",
          "enabled": true,
          "description": "Slash symbol used in #include directive does not match code style settings"
        },
        {
          "shortName": "CppEnforceOverridingFunctionStyle",
          "displayName": "Use preferred overriding function style (enforce overriding function style)",
          "enabled": true,
          "description": "Enforce the 'virtual' and 'override' specifiers on overriding functions"
        },
        {
          "shortName": "CppUseAutoForNumeric",
          "displayName": "Use preferred 'auto' style (numeric type can be replaced with auto)",
          "enabled": true,
          "description": "A numeric type can be replaced with 'auto'"
        },
        {
          "shortName": "CppEnforceFunctionDeclarationStyle",
          "displayName": "Use preferred declaration style (enforce function declaration style)",
          "enabled": false,
          "description": "Enforce usage of the trailing return type or the regular return type syntax"
        },
        {
          "shortName": "CppEnforceForStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'for' statement)",
          "enabled": false,
          "description": "Use braces to separate 'for' statement body"
        },
        {
          "shortName": "CppMemberInitializersOrder",
          "displayName": "Use preferred initialization style (order of member initializers does not match the initialization order)",
          "enabled": true,
          "description": "Order of member initializers does not match the initialization order"
        },
        {
          "shortName": "CppEnforceIfStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'if' statement)",
          "enabled": false,
          "description": "Use braces to separate 'if' statement body"
        },
        {
          "shortName": "CppEnforceCVQualifiersOrder",
          "displayName": "Use preferred cv-qualifiers style (enforce the order of cv-qualifiers)",
          "enabled": false,
          "description": ""
        },
        {
          "shortName": "CppEnforceCVQualifiersPlacement",
          "displayName": "Use preferred cv-qualifiers style (enforce the placement of cv-qualifiers)",
          "enabled": false,
          "description": ""
        },
        {
          "shortName": "CppEnforceTypeAliasCodeStyle",
          "displayName": "Use preferred declaration style (enforce type alias code style)",
          "enabled": false,
          "description": "Enforce usage of typedefs or type aliases depending on the syntax style setting"
        },
        {
          "shortName": "CppEnforceNestedNamespacesStyle",
          "displayName": "Use preferred declaration style (enforce nested namespaces style)",
          "enabled": true,
          "description": "Enforce the syntax used to define nested namespaces"
        },
        {
          "shortName": "CppEnforceOverridingDestructorStyle",
          "displayName": "Use preferred overriding function style (enforce overriding destructor style)",
          "enabled": true,
          "description": "Enforce the 'virtual' and 'override' specifiers on overriding destructors"
        },
        {
          "shortName": "CppEnforceDoStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'do-while' statement)",
          "enabled": false,
          "description": "Use braces to separate 'do-while' statement body"
        },
        {
          "shortName": "CppUseAuto",
          "displayName": "Use preferred 'auto' style (type can be replaced with auto)",
          "enabled": true,
          "description": "Type can be replaced with 'auto'"
        },
        {
          "shortName": "CppEnforceWhileStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'while' statement)",
          "enabled": false,
          "description": "Use braces to separate 'while' statement body"
        },
        {
          "shortName": "CppWrongIncludesOrder",
          "displayName": "Use preferred include directive style (order of #include directives does not match code style settings)",
          "enabled": true,
          "description": "Order of #include directives does not match code style settings"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "BadExpressionStatementJS",
          "displayName": "Expression statement which is not assignment or call",
          "enabled": false,
          "description": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
        },
        {
          "shortName": "FunctionWithInconsistentReturnsJS",
          "displayName": "Function with inconsistent returns",
          "enabled": false,
          "description": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
        },
        {
          "shortName": "ReservedWordUsedAsNameJS",
          "displayName": "Reserved word used as name",
          "enabled": false,
          "description": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
        },
        {
          "shortName": "ThisExpressionReferencesGlobalObjectJS",
          "displayName": "'this' expression which references the global object",
          "enabled": false,
          "description": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
        },
        {
          "shortName": "JSOctalInteger",
          "displayName": "Octal integer",
          "enabled": false,
          "description": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
        },
        {
          "shortName": "StringLiteralBreaksHTMLJS",
          "displayName": "String literal which breaks HTML parsing",
          "enabled": false,
          "description": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
        },
        {
          "shortName": "JSConstantReassignment",
          "displayName": "Attempt to assign to const or readonly variable",
          "enabled": false,
          "description": "Reports reassigning a value to a constant or a readonly variable."
        }
      ]
    },
    {
      "name": "Redundancies in Code",
      "inspections": [
        {
          "shortName": "RedundantDelegateCreation",
          "displayName": "Explicit delegate creation expression is redundant",
          "enabled": true,
          "description": "Explicit delegate creation expression is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDelegateCreation.html)"
        },
        {
          "shortName": "RedundantExplicitParamsArrayCreation",
          "displayName": "Redundant explicit array creation in argument of 'params' parameter",
          "enabled": true,
          "description": "Array creation in argument passed to 'params' parameter is redundant"
        },
        {
          "shortName": "UnusedAnonymousMethodSignature",
          "displayName": "Anonymous method signature is not necessary",
          "enabled": true,
          "description": "Specifying signature in an anonymous method is not necessary because none of its parameters are used in the body"
        },
        {
          "shortName": "RedundantSetContainsBeforeAdding",
          "displayName": "Redundant set 'Contains' before 'Add'",
          "enabled": true,
          "description": "Redundant set 'Contains' before 'Add'. If the element is already in the set, it won't be added again."
        },
        {
          "shortName": "DoubleNegationOperator",
          "displayName": "Double negation operator",
          "enabled": true,
          "description": "Double negation is meaningless\n\n```\nbool b = !!condition;\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/DoubleNegationOperator.html)"
        },
        {
          "shortName": "RedundantEnumCaseLabelForDefaultSection",
          "displayName": "Redundant 'case' label before default section",
          "enabled": false,
          "description": "'case' label statement with enum value in front of default section is redundant"
        },
        {
          "shortName": "RedundantPropertyPatternClause",
          "displayName": "Redundant property pattern clause",
          "enabled": true,
          "description": "Empty property pattern clause can be omitted"
        },
        {
          "shortName": "RedundantExplicitPositionalPropertyDeclaration",
          "displayName": "Redundant explicit positional property declaration",
          "enabled": true,
          "description": "Redundant explicit positional property declaration in record type with primary constructor"
        },
        {
          "shortName": "RedundantExplicitArraySize",
          "displayName": "Redundant explicit size specification in array creation",
          "enabled": true,
          "description": "When array initializer has the same number of elements as specified in size expression, explicit size specification is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantExplicitArraySize.html)"
        },
        {
          "shortName": "RedundantCast",
          "displayName": "Redundant cast",
          "enabled": true,
          "description": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)"
        },
        {
          "shortName": "RedundantLogicalConditionalExpressionOperand",
          "displayName": "Redundant operand in logical conditional expression",
          "enabled": true,
          "description": "Redundant operand in logical conditional expression, for example\n\n```\n\r\n  expr || false\r\n  expr && true\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/RedundantLogicalConditionalExpressionOperand.html)"
        },
        {
          "shortName": "RedundantReadonlyModifier",
          "displayName": "Redundant 'readonly' modifier",
          "enabled": true,
          "description": "Readonly 'redundant' member/accessor modifier in struct declaration"
        },
        {
          "shortName": "RedundantPatternParentheses",
          "displayName": "Remove redundant pattern-matching parentheses",
          "enabled": true,
          "description": "Parentheses surrounding a pattern are redundant if they do not change precedence of \\`or\\`-/\\`and\\`-patterns"
        },
        {
          "shortName": "UselessComparisonToIntegralConstant",
          "displayName": "Comparison to integral constant is useless",
          "enabled": true,
          "description": "Comparison to integral constant is useless; the constant is outside the range of the target type"
        },
        {
          "shortName": "RedundantUsingDirective.Global",
          "displayName": "Redundant global using directive",
          "enabled": true,
          "description": "Global using directive is not required by the code and can be safely removed"
        },
        {
          "shortName": "EmptyForStatement",
          "displayName": "Empty 'for' loop is redundant",
          "enabled": true,
          "description": "Empty 'for' loop is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyForStatement.html)"
        },
        {
          "shortName": "RedundantNullnessAttributeWithNullableReferenceTypes",
          "displayName": "[NotNull] or [CanBeNull] attribute is applied to a type that already has the same annotation from nullable reference types",
          "enabled": true,
          "description": "\\[NotNull\\] or \\[CanBeNull\\] attribute has no effect because the target type already has the same annotation from nullable reference types"
        },
        {
          "shortName": "ConditionIsAlwaysTrueOrFalse",
          "displayName": "Expression is always 'true' or always 'false'",
          "enabled": true,
          "description": "Value of a boolean expression is always the same at this point [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalse.html)"
        },
        {
          "shortName": "RedundantExplicitArrayCreation",
          "displayName": "Redundant explicit type in array creation",
          "enabled": true,
          "description": "When array type can be inferred from the initializer, you can use an implicitly-typed array [Learn more...](https://www.jetbrains.com/help/rider/RedundantExplicitArrayCreation.html)"
        },
        {
          "shortName": "HeuristicUnreachableCode",
          "displayName": "Heuristically unreachable code",
          "enabled": true,
          "description": "Heuristically unreachable code detected"
        },
        {
          "shortName": "RedundantSuppressNullableWarningExpression",
          "displayName": "Redundant nullable warning suppression expression",
          "enabled": true,
          "description": "Nullable warning suppression expression does not suppress any warnings and is applied to an already non-nullable operand"
        },
        {
          "shortName": "MathAbsMethodIsRedundant",
          "displayName": "Math.Abs() argument is always non-negative",
          "enabled": true,
          "description": "Math.Abs() method invocation can be removed"
        },
        {
          "shortName": "RedundantEmptyFinallyBlock",
          "displayName": "Redundant empty finally block",
          "enabled": true,
          "description": "Empty 'finally' block is redundant"
        },
        {
          "shortName": "PrivateFieldCanBeConvertedToLocalVariable",
          "displayName": "Private field can be converted into local variable",
          "enabled": true,
          "description": "Private field is always assigned before being used and can be converted into a local variable [Learn more...](https://www.jetbrains.com/help/rider/PrivateFieldCanBeConvertedToLocalVariable.html)"
        },
        {
          "shortName": "RedundantTypeDeclarationBody",
          "displayName": "Redundant type declaration body",
          "enabled": true,
          "description": "Empty type declaration body can be replaced with semicolon"
        },
        {
          "shortName": "RedundantNotNullConstraint",
          "displayName": "Redundant 'notnull' constraint on type parameter constrained by non-nullable base type",
          "enabled": true,
          "description": "The 'notnull' constraint is redundant because type parameter is constrained by non-nullable base type"
        },
        {
          "shortName": "RedundantDiscardDesignation",
          "displayName": "Redundant discard designation",
          "enabled": true,
          "description": "Discard designation can be omitted in this context"
        },
        {
          "shortName": "RedundantDeclarationSemicolon",
          "displayName": "Redundant semicolon after type or namespace declaration",
          "enabled": true,
          "description": "Semicolon after class/struct/enum/interface/namespace declarations is redundant in C#"
        },
        {
          "shortName": "RedundantCheckBeforeAssignment",
          "displayName": "Redundant condition check before assignments",
          "enabled": true,
          "description": "Check for inequality before assignment is redundant\n\n```\n\r\n  if (x != value)\r\n    x = value;\r\n```"
        },
        {
          "shortName": "RedundantScopedParameterModifier",
          "displayName": "Redundant 'scoped' parameter modifier",
          "enabled": true,
          "description": "'scoped' parameter modifier is redundant because the target parameter is already implicitly 'scoped' by the language rules"
        },
        {
          "shortName": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseType",
          "displayName": "Redundant nullable annotation on base type constraint of type parameter constrained by another non-nullable base type",
          "enabled": true,
          "description": "The nullable annotation on base type constraint is redundant because type parameter is constrained by another non-nullable base type"
        },
        {
          "shortName": "RedundantNullableFlowAttribute",
          "displayName": "Redundant nullable attribute",
          "enabled": true,
          "description": "Nullable attribute has no effect and can be safely removed. This can be caused by the target element already having the desired nullable annotation."
        },
        {
          "shortName": "RedundantNullableDirective",
          "displayName": "Redundant nullable directive",
          "enabled": true,
          "description": "A nullable directive does not change a context and can be safely removed"
        },
        {
          "shortName": "RedundantUnsafeContext",
          "displayName": "Unsafe context declaration is redundant",
          "enabled": true,
          "description": "Unsafe context declaration is redundant because it is declared in unsafe context, or it does not contain unsafe constructs"
        },
        {
          "shortName": "RedundantVirtualModifier",
          "displayName": "Redundant 'virtual' modifier",
          "enabled": true,
          "description": "Redundant 'virtual' modifier in interface declaration"
        },
        {
          "shortName": "RedundantOverflowCheckingContext",
          "displayName": "Redundant arithmetic overflow checking context",
          "enabled": true,
          "description": "Arithmetic overflow checking context contains no operators or conversions with overflow checks"
        },
        {
          "shortName": "RedundantCallerArgumentExpressionDefaultValue",
          "displayName": "Redundant argument passed to caller argument expression parameter",
          "enabled": true,
          "description": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted"
        },
        {
          "shortName": "RedundantNameQualifier",
          "displayName": "Redundant name qualifier",
          "enabled": true,
          "description": "Redundant use of qualifier for a type name or static member usage"
        },
        {
          "shortName": "RedundantConfigureAwait",
          "displayName": "Redundant 'ConfigureAwait(true)'",
          "enabled": true,
          "description": "Redundant 'ConfigureAwait(true)' can be removed. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'UI' to analyze 'await' expressions and statements for redundant 'ConfigureAwait(true)' calls. [Learn more...](https://www.jetbrains.com/help/rider/RedundantConfigureAwait.html)"
        },
        {
          "shortName": "RedundantAlwaysMatchSubpattern",
          "displayName": "Subpattern that always matches is redundant",
          "enabled": true,
          "description": "Subpattern containing discard pattern or empty object pattern can be removed"
        },
        {
          "shortName": "RedundantAssignment",
          "displayName": "Assignment is not used",
          "enabled": true,
          "description": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)"
        },
        {
          "shortName": "RedundantAttributeSuffix",
          "displayName": "Redundant 'Attribute' suffix",
          "enabled": true,
          "description": "Redundant 'Attribute' suffix can be omitted when referencing attribute type"
        },
        {
          "shortName": "ConstantConditionalAccessQualifier",
          "displayName": "Conditional access qualifier expression is known to be null or not null",
          "enabled": true,
          "description": "Conditional access qualifier expression is known to be null or not null"
        },
        {
          "shortName": "RedundantLambdaSignatureParentheses",
          "displayName": "Redundant lambda signature parentheses",
          "enabled": true,
          "description": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)"
        },
        {
          "shortName": "ConstantNullCoalescingCondition",
          "displayName": "'??' condition is known to be null or not null",
          "enabled": true,
          "description": "Operand of '??' expression condition is known to be null or not null [Learn more...](https://www.jetbrains.com/help/rider/ConstantNullCoalescingCondition.html)"
        },
        {
          "shortName": "RedundantExplicitNullableCreation",
          "displayName": "Redundant explicit nullable type creation",
          "enabled": true,
          "description": "Value type is implicitly convertible to its nullable form, therefore explicit nullable type creation is redundant"
        },
        {
          "shortName": "RedundantBaseQualifier",
          "displayName": "Redundant 'base.' qualifier",
          "enabled": true,
          "description": "'base.' qualifier is redundant and can be safely removed without changing code semantics"
        },
        {
          "shortName": "RedundantAttributeUsageProperty",
          "displayName": "Redundant [AttributeUsage] attribute property assignment",
          "enabled": true,
          "description": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value"
        },
        {
          "shortName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract",
          "displayName": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
          "enabled": true,
          "description": "Expression is always 'true' or 'false' according to nullable reference types' annotations [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html)"
        },
        {
          "shortName": "RedundantLambdaParameterType",
          "displayName": "Redundant lambda expression parameter type specification",
          "enabled": true,
          "description": "Lambda expression explicit parameter type specification is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaParameterType.html)"
        },
        {
          "shortName": "RedundantNullableTypeMark",
          "displayName": "Type check for nullable type is equal to underlying type check",
          "enabled": true,
          "description": "Type check for nullable type in 'is' expression is equal to underlying type check"
        },
        {
          "shortName": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract",
          "displayName": "'??' condition is never null according to nullable reference types' annotations",
          "enabled": true,
          "description": "'??' condition is never null according to nullable reference types' annotations"
        },
        {
          "shortName": "RedundantIfElseBlock",
          "displayName": "Redundant 'else' keyword",
          "enabled": true,
          "description": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)"
        },
        {
          "shortName": "RedundantRangeBound",
          "displayName": "Redundant range bound",
          "enabled": true,
          "description": "Zero index can be omitted in range expression"
        },
        {
          "shortName": "RedundantToStringCallForValueType",
          "displayName": "Redundant 'object.ToString()' call for value types",
          "enabled": true,
          "description": "Use of ToString() call in a context where it would be generated by the compiler automatically. For example, in a concatenation with a string or as an argument of a string.Format() call."
        },
        {
          "shortName": "RedundantCaseLabel",
          "displayName": "Redundant 'case' label",
          "enabled": true,
          "description": "'case' label statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCaseLabel.html)"
        },
        {
          "shortName": "RedundantStringInterpolation",
          "displayName": "Redundant string interpolation",
          "enabled": true,
          "description": "String interpolation expression without arguments is redundant"
        },
        {
          "shortName": "RedundantEnumerableCastCall",
          "displayName": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call",
          "enabled": true,
          "description": "Redundant 'IEnumerable.Cast' or 'IEnumerable.OfType' call"
        },
        {
          "shortName": "RedundantArgumentDefaultValue",
          "displayName": "Redundant argument with default value",
          "enabled": true,
          "description": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)"
        },
        {
          "shortName": "RedundantTypeArgumentsOfMethod",
          "displayName": "Redundant type arguments of method",
          "enabled": true,
          "description": "Specification of method type arguments is redundant because they are inferred from argument types"
        },
        {
          "shortName": "SuspiciousMathSignMethod",
          "displayName": "Math.Sign() method always gives the same result",
          "enabled": true,
          "description": "Math.Sign() method invocation can be replaced with a constant"
        },
        {
          "shortName": "RedundantAbstractModifier",
          "displayName": "Redundant 'abstract' modifier",
          "enabled": true,
          "description": "Redundant 'abstract' modifier in interface declaration [Learn more...](https://www.jetbrains.com/help/rider/RedundantAbstractModifier.html)"
        },
        {
          "shortName": "RedundantCollectionInitializerElementBraces",
          "displayName": "Redundant braces in collection initializer",
          "enabled": true,
          "description": "When collection initializer element has only one expression, the braces are redundant"
        },
        {
          "shortName": "AssignmentIsFullyDiscarded",
          "displayName": "Assignment results are fully discarded",
          "enabled": true,
          "description": "The values of deconstructing assignment are all discarded and cannot be used in any execution path"
        },
        {
          "shortName": "EmptyRegion",
          "displayName": "Empty region",
          "enabled": true,
          "description": "Region doesn't contain any code and can be removed"
        },
        {
          "shortName": "UnusedNullableDirective",
          "displayName": "Unused nullable directive",
          "enabled": true,
          "description": "A nullable directive has no impact and can be safely removed"
        },
        {
          "shortName": "RedundantAnonymousTypePropertyName",
          "displayName": "Redundant anonymous type property explicit name",
          "enabled": true,
          "description": "Explicit name specification of anonymous type property is redundant. It is inferred from the initializer expression."
        },
        {
          "shortName": "RedundantNullableAnnotationOnReferenceTypeConstraint",
          "displayName": "Redundant nullable annotation on 'class?' constraint of type parameter constrained by non-nullable base type",
          "enabled": true,
          "description": "The nullable annotation on 'class?' constraint is redundant because type parameter is constrained by non-nullable base type"
        },
        {
          "shortName": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKind",
          "displayName": "Redundant nullable annotation on base type constraint of type parameter having non-nullable type kind",
          "enabled": true,
          "description": "The nullable annotation on base type constraint is redundant because type parameter has 'class' or 'struct' or 'unmanaged' constraint"
        },
        {
          "shortName": "PatternIsAlwaysTrueOrFalse",
          "displayName": "Pattern is always 'true' or always 'false'",
          "enabled": true,
          "description": "Pattern check result is always the same"
        },
        {
          "shortName": "RedundantWithCancellation",
          "displayName": "Redundant 'WithCancellation()' invocation",
          "enabled": true,
          "description": "A 'WithCancellation()' call is redundant because the specified cancellation token is already applied to the async stream"
        },
        {
          "shortName": "RedundantTypeCheckInPattern",
          "displayName": "Redundant type check in a pattern",
          "enabled": true,
          "description": "A pattern contains a redundant type check that matches any non-nullable values that are already handled in the pattern"
        },
        {
          "shortName": "RedundantEmptyObjectCreationArgumentList",
          "displayName": "Redundant empty argument list on object creation expression",
          "enabled": true,
          "description": "When object creation uses object or collection initializer, empty argument list is redundant"
        },
        {
          "shortName": "RedundantTernaryExpression",
          "displayName": "Redundant conditional ternary expression usage",
          "enabled": true,
          "description": "Redundant conditional ternary expression usage:\n\n```\n\r\n  condition ? true : false\r\n```"
        },
        {
          "shortName": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract",
          "displayName": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
          "enabled": true,
          "description": "Conditional access qualifier expression is not null according to nullable reference types' annotations"
        },
        {
          "shortName": "RedundantEmptyObjectOrCollectionInitializer",
          "displayName": "Redundant empty object or collection initializer",
          "enabled": true,
          "description": "Redundant empty object or collection initializer"
        },
        {
          "shortName": "RedundantArrayCreationExpression",
          "displayName": "Array creation can be replaced with array initializer",
          "enabled": true,
          "description": "When initializing explicitly typed local variable or field of array type, array creation expression can be replaced with array initializer"
        },
        {
          "shortName": "RedundantImmediateDelegateInvocation",
          "displayName": "Immediate delegate invocation",
          "enabled": true,
          "description": "Immediate delegate invocation is redundant"
        },
        {
          "shortName": "RedundantFixedPointerDeclaration",
          "displayName": "Redundant fixed pointer declaration",
          "enabled": true,
          "description": "Fixed pointer declaration is redundant because accessing elements of fixed size buffer does not require pinning [Learn more...](https://www.jetbrains.com/help/rider/RedundantFixedPointerDeclaration.html)"
        },
        {
          "shortName": "RawStringCanBeSimplified",
          "displayName": "Raw string can be simplified",
          "enabled": true,
          "description": "String presentation has redundant quotes or dollar signs"
        },
        {
          "shortName": "ExpressionIsAlwaysNull",
          "displayName": "Expression is always 'null'",
          "enabled": true,
          "description": "The expression is always evaluated to 'null' at this point"
        },
        {
          "shortName": "RedundantJumpStatement",
          "displayName": "Redundant control flow jump statement",
          "enabled": true,
          "description": "Redundant control flow jump statement [Learn more...](https://www.jetbrains.com/help/rider/RedundantJumpStatement.html)"
        },
        {
          "shortName": "RedundantUsingDirective",
          "displayName": "Redundant using directive",
          "enabled": false,
          "description": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)"
        },
        {
          "shortName": "RedundantQueryOrderByAscendingKeyword",
          "displayName": "Redundant 'orderby' clause 'ascending' keyword",
          "enabled": true,
          "description": "LINQ query syntax 'orderby' clause sorting is 'ascending' by default"
        },
        {
          "shortName": "RedundantVerbatimStringPrefix",
          "displayName": "Redundant verbatim string prefix",
          "enabled": true,
          "description": "String can be converted into a regular string without any changes"
        },
        {
          "shortName": "RedundantBoolCompare",
          "displayName": "Redundant boolean comparison",
          "enabled": true,
          "description": "Comparison of a boolean value with 'true' or 'false' constant"
        },
        {
          "shortName": "RedundantStringFormatCall",
          "displayName": "Redundant 'string.Format()' call",
          "enabled": true,
          "description": "Redundant 'string.Format()' call [Learn more...](https://www.jetbrains.com/help/rider/RedundantStringFormatCall.html)"
        },
        {
          "shortName": "RedundantAttributeParentheses",
          "displayName": "Parentheses are redundant if attribute has no arguments",
          "enabled": true,
          "description": "Parentheses are redundant if attribute has no arguments [Learn more...](https://www.jetbrains.com/help/rider/RedundantAttributeParentheses.html)"
        },
        {
          "shortName": "RedundantVerbatimPrefix",
          "displayName": "Redundant verbatim prefix",
          "enabled": true,
          "description": "'@' prefix can be safely removed from identifier"
        },
        {
          "shortName": "RedundantEmptySwitchSection",
          "displayName": "Redundant empty switch section",
          "enabled": true,
          "description": "Redundant default switch branch:\n\n```\n\r\n  switch (foo)\r\n  {\r\n    case Bar:\r\n      DoSomething;\r\n      break;\r\n    default: // here\r\n      break;\r\n  }\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/RedundantEmptySwitchSection.html)"
        },
        {
          "shortName": "RedundantCatchClause",
          "displayName": "Redundant catch clause",
          "enabled": true,
          "description": "Catch clause with single 'throw' statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCatchClause.html)"
        },
        {
          "shortName": "RedundantToStringCall",
          "displayName": "Redundant 'object.ToString()' call",
          "enabled": true,
          "description": "Use of ToString() call in a context where it would be generated by the compiler automatically. For example, in a concatenation with a string or as an argument of a string.Format() call."
        },
        {
          "shortName": "RedundantStringToCharArrayCall",
          "displayName": "Redundant 'string.ToCharArray()' call",
          "enabled": true,
          "description": "Redundant 'string.ToCharArray()' call"
        },
        {
          "shortName": "RedundantRecordClassKeyword",
          "displayName": "Redundant 'class' keyword in record declaration",
          "enabled": true,
          "description": "Redundant 'class' keyword in record declaration: records are classes by default"
        },
        {
          "shortName": "ForStatementConditionIsTrue",
          "displayName": "'true' is redundant as 'for'-statement condition",
          "enabled": true,
          "description": "'true' is redundant as 'for'-statement condition, and it can be safely omitted"
        },
        {
          "shortName": "RedundantExplicitTupleComponentName",
          "displayName": "Redundant explicit tuple component name",
          "enabled": true,
          "description": "Explicit name specification of value tuple component is redundant. It is inferred from the initializer expression."
        },
        {
          "shortName": "RedundantDictionaryContainsKeyBeforeAdding",
          "displayName": "Redundant dictionary 'ContainsKey' before adding to the collection",
          "enabled": true,
          "description": "Redundant dictionary 'ContainsKey' before adding to the collection."
        },
        {
          "shortName": "CppRedundantConstSpecifier",
          "displayName": "Redundant 'const' specifier",
          "enabled": true,
          "description": "The 'const' specifier on a variable definition is redundant"
        },
        {
          "shortName": "CppRedundantTypenameKeyword",
          "displayName": "Redundant 'typename' keyword",
          "enabled": true,
          "description": "Redundant 'typename' keyword"
        },
        {
          "shortName": "CppRedundantElseKeyword",
          "displayName": "Redundant 'else' keyword",
          "enabled": true,
          "description": "Redundant 'else' keyword"
        },
        {
          "shortName": "CppRedundantDereferencingAndTakingAddress",
          "displayName": "Redundant dereferencing and taking address",
          "enabled": true,
          "description": "Redundant dereferencing and taking address"
        },
        {
          "shortName": "CppRedundantMemberInitializer",
          "displayName": "Redundant member initializer in constructor initialization list",
          "enabled": true,
          "description": "Redundant member initializer in constructor initialization list"
        },
        {
          "shortName": "CppRedundantEmptyDeclaration",
          "displayName": "Redundant empty declaration",
          "enabled": true,
          "description": "Redundant empty declaration"
        },
        {
          "shortName": "CppRedundantParentheses",
          "displayName": "Redundant parentheses",
          "enabled": true,
          "description": "Parentheses do not change the order of operations and can be deleted"
        },
        {
          "shortName": "CppRedundantEmptyStatement",
          "displayName": "Redundant empty statement",
          "enabled": true,
          "description": "Redundant empty statement"
        },
        {
          "shortName": "CppVolatileParameterInDeclaration",
          "displayName": "Volatile-qualified parameter in a function declaration",
          "enabled": true,
          "description": "Volatile-qualification of parameters has an effect only in function definitions"
        },
        {
          "shortName": "CppRedundantCastExpression",
          "displayName": "Redundant cast expression",
          "enabled": true,
          "description": "Cast is redundant and can be deleted"
        },
        {
          "shortName": "CppRedundantVoidArgumentList",
          "displayName": "Redundant void argument list",
          "enabled": true,
          "description": "Redundant void argument list"
        },
        {
          "shortName": "CppRedundantInlineSpecifier",
          "displayName": "Redundant 'inline' specifier",
          "enabled": true,
          "description": "The 'inline' specifier on a function definition is redundant"
        },
        {
          "shortName": "CppRedundantElseKeywordInsideCompoundStatement",
          "displayName": "Redundant 'else' keyword inside compound statement",
          "enabled": true,
          "description": "Redundant 'else' keyword inside compound statement"
        },
        {
          "shortName": "CppUnreachableCode",
          "displayName": "Unreachable code",
          "enabled": true,
          "description": "Unreachable code"
        },
        {
          "shortName": "CppFinalFunctionInFinalClass",
          "displayName": "Final function in a final class",
          "enabled": true,
          "description": "Redundant 'final' specifier on a function in a final class"
        },
        {
          "shortName": "CppRedundantLambdaParameterList",
          "displayName": "Redundant parameter list in lambda declarator",
          "enabled": true,
          "description": "Empty parameter list in lambda declarator can be deleted"
        },
        {
          "shortName": "CppConstParameterInDeclaration",
          "displayName": "Const-qualified parameter in a function declaration",
          "enabled": true,
          "description": "Const-qualification of parameters has an effect only in function definitions"
        },
        {
          "shortName": "CppRedundantBaseClassAccessSpecifier",
          "displayName": "Redundant base class access specifier",
          "enabled": true,
          "description": "Redundant base class access specifier"
        },
        {
          "shortName": "CppRedundantQualifier",
          "displayName": "Redundant qualifier",
          "enabled": true,
          "description": "Qualifier is redundant and can be deleted"
        },
        {
          "shortName": "CppRedundantAccessSpecifier",
          "displayName": "Access specifier does not change accessibility level",
          "enabled": true,
          "description": "An access specifier does not change accessibility level and is redundant"
        },
        {
          "shortName": "CppHeaderHasBeenAlreadyIncluded",
          "displayName": "Guarded header has already been included",
          "enabled": true,
          "description": "Guarded header has already been included"
        },
        {
          "shortName": "CppStaticSpecifierOnAnonymousNamespaceMember",
          "displayName": "Redundant 'static' specifier on an anonymous namespace member",
          "enabled": true,
          "description": "Redundant 'static' specifier on an anonymous namespace member"
        },
        {
          "shortName": "CppRedundantBooleanExpressionArgument",
          "displayName": "Redundant argument in conditional expression",
          "enabled": true,
          "description": "Redundant argument in conditional expression"
        },
        {
          "shortName": "CppRedundantBaseClassInitializer",
          "displayName": "Redundant base class initializer",
          "enabled": true,
          "description": "Redundant base class initializer in a member initializer list"
        },
        {
          "shortName": "CppRedundantControlFlowJump",
          "displayName": "Redundant control flow jump statement",
          "enabled": true,
          "description": "Redundant control flow jump statement"
        },
        {
          "shortName": "CppRedundantStaticSpecifierOnMemberAllocationFunction",
          "displayName": "Redundant 'static' specifier on a member allocation/deallocation function",
          "enabled": true,
          "description": "The 'static' specifier is optional for member allocation/deallocation functions"
        },
        {
          "shortName": "CppRedundantTemplateKeyword",
          "displayName": "Redundant 'template' keyword",
          "enabled": true,
          "description": "Redundant 'template' keyword"
        },
        {
          "shortName": "CppRedundantTemplateArguments",
          "displayName": "Redundant template arguments",
          "enabled": true,
          "description": "Redundant template arguments"
        },
        {
          "shortName": "CppRedundantElaboratedTypeSpecifier",
          "displayName": "Redundant elaborated type specifier",
          "enabled": true,
          "description": "Elaborated type specifier is redundant and can be deleted"
        },
        {
          "shortName": "CppAccessSpecifierWithNoDeclarations",
          "displayName": "Access specifier does not affect any declaration",
          "enabled": true,
          "description": "An access specifier does not affect any declaration and is redundant"
        },
        {
          "shortName": "CppRedundantStaticSpecifierOnThreadLocalLocalVariable",
          "displayName": "Redundant 'static' specifier on a 'thread_local' local variable",
          "enabled": true,
          "description": "Redundant 'static' specifier on a 'thread_local' local variable"
        },
        {
          "shortName": "CppTemplateArgumentsCanBeDeduced",
          "displayName": "Template arguments can be deduced",
          "enabled": true,
          "description": "Template arguments can be deduced"
        },
        {
          "shortName": "CppFinalNonOverridingVirtualFunction",
          "displayName": "Final non-overriding virtual function",
          "enabled": true,
          "description": "A virtual function is marked 'final' and does not override a base function"
        },
        {
          "shortName": "FSharpInterpolatedString",
          "displayName": "Format string can be replaced with an interpolated string",
          "enabled": true,
          "description": "Format string can be replaced with an interpolated string."
        },
        {
          "shortName": "FSharpRedundantNew",
          "displayName": "Redundant 'new' keyword",
          "enabled": true,
          "description": "'new' keyword is not required and can be safely removed."
        },
        {
          "shortName": "FSharpRedundantUnionCaseFieldPatterns",
          "displayName": "Redundant union case fields matching",
          "enabled": true,
          "description": "Explicit fields matching is redundant and can be replaced with '_'."
        },
        {
          "shortName": "FSharpRedundantRequireQualifiedAccessAttribute",
          "displayName": "Redundant RequireQualifiedAccess attribute",
          "enabled": true,
          "description": "Enum type always requires qualified access."
        },
        {
          "shortName": "FSharpUseWildSelfId",
          "displayName": "Use `_` self id",
          "enabled": true,
          "description": "Use \\`_\\` self id."
        },
        {
          "shortName": "FSharpRedundantNameQualifier",
          "displayName": "Redundant name qualifier",
          "enabled": true,
          "description": "Redundant use of qualifier for name."
        },
        {
          "shortName": "FSharpRedundantParens",
          "displayName": "Remove redundant parentheses",
          "enabled": true,
          "description": "Parentheses can be safely removed without changing code semantics."
        },
        {
          "shortName": "FSharpRedundantDotInIndexer",
          "displayName": "Redundant '.' in indexer",
          "enabled": true,
          "description": "'.' can be removed in indexers."
        },
        {
          "shortName": "FSharpRedundantApplication",
          "displayName": "Redundant application",
          "enabled": true,
          "description": "Application is redundant and can be replaced with its argument."
        },
        {
          "shortName": "FSharpRedundantOpen",
          "displayName": "Redundant 'open' directive",
          "enabled": true,
          "description": "Open directive is not required by the code and can be safely removed."
        },
        {
          "shortName": "FSharpRedundantAttributeParens",
          "displayName": "Redundant attribute parentheses argument",
          "enabled": true,
          "description": "Parentheses are redundant if attribute has no arguments."
        },
        {
          "shortName": "FSharpLambdaCanBeSimplified",
          "displayName": "Lambda expression can be simplified",
          "enabled": true,
          "description": "Lambda expression can be simplified."
        },
        {
          "shortName": "FSharpBuiltinFunctionReimplementation",
          "displayName": "Lambda expression can be replaced with built-in function",
          "enabled": true,
          "description": "Lambda expression can be replaced with built-in function."
        },
        {
          "shortName": "FSharpExpressionCanBeReplacedWithCondition",
          "displayName": "'if' expression can be replaced with its condition",
          "enabled": true,
          "description": "'if' expression can be replaced with its condition."
        },
        {
          "shortName": "FSharpConsWithEmptyListPat",
          "displayName": "Redundant concatenation with empty list",
          "enabled": true,
          "description": "Redundant concatenation with empty list."
        },
        {
          "shortName": "FSharpRedundantBackticks",
          "displayName": "Redundant identifier escaping",
          "enabled": true,
          "description": "Redundant use of \\`\\` escaping sequences."
        },
        {
          "shortName": "FSharpRedundantStringInterpolation",
          "displayName": "Redundant string interpolation",
          "enabled": true,
          "description": "String interpolation expression without arguments is redundant."
        },
        {
          "shortName": "FSharpRedundantAttributeSuffix",
          "displayName": "Redundant 'Attribute' suffix",
          "enabled": true,
          "description": "Redundant 'Attribute' suffix."
        },
        {
          "shortName": "FSharpRedundantAsPattern",
          "displayName": "Redundant 'as' pattern",
          "enabled": true,
          "description": "'as' pattern can be replaced with its name."
        },
        {
          "shortName": "FSharpLambdaCanBeReplacedWithInnerExpression",
          "displayName": "Lambda expression can be replaced with inner expression",
          "enabled": true,
          "description": "Lambda expression can be replaced with inner expression."
        },
        {
          "shortName": "Xaml.RedundantFreezeAttribute",
          "displayName": "Redundant 'Freeze' attribute",
          "enabled": true,
          "description": "Freeze attribute is not used and can be safely removed"
        },
        {
          "shortName": "Xaml.RedundantGridSpan",
          "displayName": "Single-cell grid column/row span is redundant",
          "enabled": true,
          "description": "Single-cell grid column/row span is redundant"
        },
        {
          "shortName": "Xaml.RedundantModifiersAttribute",
          "displayName": "Redundant modifiers attribute",
          "enabled": true,
          "description": "Accessibility set by attribute coincides with the default one, thus the attribute can be safely removed"
        },
        {
          "shortName": "Xaml.RedundantStyledValue",
          "displayName": "Property value is equal to style-provided",
          "enabled": true,
          "description": "Property value is equal to the value provided by explicit style and can be removed"
        },
        {
          "shortName": "Xaml.RedundantPropertyTypeQualifier",
          "displayName": "Redundant property type qualifier",
          "enabled": true,
          "description": "Property owner type qualifier is redundant and can be safely removed"
        },
        {
          "shortName": "Xaml.RedundantResource",
          "displayName": "Redundant resource",
          "enabled": true,
          "description": "Resource is not used and can be safely removed"
        },
        {
          "shortName": "Xaml.RedundantAttachedProperty",
          "displayName": "Remove redundant attached property setter",
          "enabled": true,
          "description": "Attached property setter has no effect in the current context and can be removed"
        },
        {
          "shortName": "Xaml.RedundantUpdateSourceTriggerAttribute",
          "displayName": "UpdateSourceTrigger=Default is redundant",
          "enabled": true,
          "description": "UpdateSourceTrigger=Default is redundant"
        },
        {
          "shortName": "Xaml.RedundantNameAttribute",
          "displayName": "Redundant name attribute",
          "enabled": true,
          "description": "Name attribute in resource declaration is negligible and can be safely removed"
        },
        {
          "shortName": "Xaml.RedundantGridDefinitions",
          "displayName": "Single grid row/column definition is redundant",
          "enabled": true,
          "description": "Single grid row/column definition is redundant"
        },
        {
          "shortName": "Xaml.RedundantNamespaceAlias",
          "displayName": "Redundant namespace alias",
          "enabled": true,
          "description": "Namespace alias is not required by code and can be safely removed"
        },
        {
          "shortName": "Xaml.RedundantBindingModeAttribute",
          "displayName": "Binding mode is equal to default",
          "enabled": true,
          "description": "Binding mode is equal to default"
        },
        {
          "shortName": "Xaml.RedundantCollectionProperty",
          "displayName": "Redundant empty collection property setter",
          "enabled": true,
          "description": "Empty collection property setter is redundant and can be safely removed"
        },
        {
          "shortName": "RedundantQualifier",
          "displayName": "Redundant qualifier",
          "enabled": true,
          "description": "Qualifier is redundant"
        },
        {
          "shortName": "RedundantArrayLowerBoundSpecification",
          "displayName": "Redundant array lower bound specification",
          "enabled": true,
          "description": "Array lower bound specification is redundant"
        },
        {
          "shortName": "RedundantEmptyCaseElse",
          "displayName": "Redundant empty 'Case Else' statement",
          "enabled": true,
          "description": "Redundant empty 'Case Else' statement"
        },
        {
          "shortName": "RedundantIfStatementThenKeyword",
          "displayName": "Keyword 'Then' is redundant in multiline 'If' statement",
          "enabled": false,
          "description": "Keyword 'Then' is redundant in multiline 'If' statement"
        },
        {
          "shortName": "UseImplicitlyTypedVariableEvident",
          "displayName": "Use implicitly typed variable declaration (evident)",
          "enabled": true,
          "description": "Use implicitly typed variable declaration when variable type is evident from initializer expression"
        },
        {
          "shortName": "RedundantMyClassQualifier",
          "displayName": "Redundant 'MyClass.' qualifier",
          "enabled": true,
          "description": "'MyClass.' qualifier is redundant and can be safely removed without changing code semantics."
        },
        {
          "shortName": "VbUnreachableCode",
          "displayName": "Unreachable code",
          "enabled": true,
          "description": "Code is unreachable"
        },
        {
          "shortName": "RedundantMyBaseQualifier",
          "displayName": "Redundant 'MyBase.' qualifier",
          "enabled": true,
          "description": "'MyBase.' qualifier is redundant and can be safely removed without changing code semantics."
        },
        {
          "shortName": "RedundantMeQualifier",
          "displayName": "Redundant 'Me.' qualifier",
          "enabled": true,
          "description": "'Me.' qualifier is redundant and can be safely removed without changing code semantics."
        },
        {
          "shortName": "RedundantIteratorKeyword",
          "displayName": "Iterator function without 'Yield' statements",
          "enabled": true,
          "description": "Iterator function without 'Yield' statements"
        },
        {
          "shortName": "RedundantParentheses",
          "displayName": "Remove redundant parentheses",
          "enabled": false,
          "description": "Parentheses can be safely removed from expressions without changing code semantics"
        },
        {
          "shortName": "UseImplicitByValModifier",
          "displayName": "Use implicit 'ByVal' modifier",
          "enabled": true,
          "description": "Use implicit 'ByVal' modifier in parameter declaration"
        },
        {
          "shortName": "UnusedImportClause",
          "displayName": "Unused import clause",
          "enabled": true,
          "description": "Import clause is not used in the file and could be safely removed"
        },
        {
          "shortName": "UseImplicitlyTypedVariable",
          "displayName": "Use implicitly typed variable declaration",
          "enabled": false,
          "description": "Use implicitly typed variable declaration"
        },
        {
          "shortName": "RedundantSetterValueParameterDeclaration",
          "displayName": "Explicit 'value' parameter declaration is redundant",
          "enabled": true,
          "description": "Explicit set accessor 'value' parameter declaration is redundant"
        },
        {
          "shortName": "RedundantPropertyParentheses",
          "displayName": "Parameterless property parentheses are redundant",
          "enabled": true,
          "description": "Parameterless property parameter parentheses are redundant"
        },
        {
          "shortName": "WebConfig.UnusedElementDueToConfigSourceAttribute",
          "displayName": "Redundant element or attribute because of 'configSource' attribute",
          "enabled": true,
          "description": "Element or attribute is not applied because of 'configSource' attribute and can be safely removed"
        },
        {
          "shortName": "WebConfig.RedundantAddNamespaceTag",
          "displayName": "Redundant add namespace element",
          "enabled": true,
          "description": "Add namespace element is redundant because it duplicates another element of is cleared later and can be safely removed"
        },
        {
          "shortName": "WebConfig.TagPrefixRedundand",
          "displayName": "Redundant tagPrefix declaration",
          "enabled": true,
          "description": "Tag prefix does not declare any new alias and can be removed safely"
        },
        {
          "shortName": "WebConfig.UnusedRemoveOrClearTag",
          "displayName": "Redundant remove or clear element",
          "enabled": true,
          "description": "Element does not clear anything and can be safely removed"
        },
        {
          "shortName": "WebConfig.UnusedAddTag",
          "displayName": "Redundant add element",
          "enabled": true,
          "description": "Add element is redundant because it is cleared later and can be safely removed"
        },
        {
          "shortName": "WebConfig.RedundantLocationTag",
          "displayName": "Redundant location element",
          "enabled": true,
          "description": "Location element does not correspond to any path in the web site and can be safely removed"
        },
        {
          "shortName": "OverriddenWithSameValue",
          "displayName": "Resource is overridden with identical value",
          "enabled": true,
          "description": "Base resource item and the current item have the same value [Learn more...](https://www.jetbrains.com/help/rider/OverriddenWithSameValue.html)"
        },
        {
          "shortName": "RedundantStringType",
          "displayName": "Redundant string type",
          "enabled": true,
          "description": "Explicitly specifying System.String as the type of a data entry is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantStringType.html)"
        },
        {
          "shortName": "AspUnusedRegisterDirectiveHighlighting",
          "displayName": "Unused register directive",
          "enabled": true,
          "description": "Register directive is unused and can be safely removed"
        }
      ]
    },
    {
      "name": "Formatting",
      "inspections": [
        {
          "shortName": "BadSemicolonSpaces",
          "displayName": "Incorrect spacing (around semicolon)",
          "enabled": false,
          "description": "Around semicolon [Learn more...](https://www.jetbrains.com/help/rider/BadSemicolonSpaces.html)"
        },
        {
          "shortName": "BadIndent",
          "displayName": "Incorrect indent (redundant indent/outdent elsewhere)",
          "enabled": false,
          "description": "Redundant indent/outdent elsewhere [Learn more...](https://www.jetbrains.com/help/rider/BadIndent.html)"
        },
        {
          "shortName": "BadAttributeBracketsSpaces",
          "displayName": "Incorrect spacing (around attributes)",
          "enabled": false,
          "description": "Around attributes [Learn more...](https://www.jetbrains.com/help/rider/BadAttributeBracketsSpaces.html)"
        },
        {
          "shortName": "BadBracesSpaces",
          "displayName": "Incorrect spacing (around braces)",
          "enabled": false,
          "description": "Around braces [Learn more...](https://www.jetbrains.com/help/rider/BadBracesSpaces.html)"
        },
        {
          "shortName": "BadParensLineBreaks",
          "displayName": "Incorrect line breaks (around parenthesis)",
          "enabled": false,
          "description": "Around parenthesis [Learn more...](https://www.jetbrains.com/help/rider/BadParensLineBreaks.html)"
        },
        {
          "shortName": "BadSquareBracketsSpaces",
          "displayName": "Incorrect spacing (around square brackets within a statement)",
          "enabled": false,
          "description": "Around square brackets within a statement [Learn more...](https://www.jetbrains.com/help/rider/BadSquareBracketsSpaces.html)"
        },
        {
          "shortName": "BadExpressionBracesLineBreaks",
          "displayName": "Incorrect line breaks (around expression braces)",
          "enabled": false,
          "description": "Around expression braces [Learn more...](https://www.jetbrains.com/help/rider/BadExpressionBracesLineBreaks.html)"
        },
        {
          "shortName": "MissingSpace",
          "displayName": "Incorrect spacing (space is missing elsewhere)",
          "enabled": false,
          "description": "Space is missing elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingSpace.html)"
        },
        {
          "shortName": "TabsAndSpacesMismatch",
          "displayName": "Incorrect indent (tabs/spaces mismatch)",
          "enabled": false,
          "description": "Tabs/spaces mismatch [Learn more...](https://www.jetbrains.com/help/rider/TabsAndSpacesMismatch.html)"
        },
        {
          "shortName": "MissingIndent",
          "displayName": "Incorrect indent (missing indent/outdent elsewhere)",
          "enabled": false,
          "description": "Missing indent/outdent elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingIndent.html)"
        },
        {
          "shortName": "RedundantBlankLines",
          "displayName": "Incorrect blank lines (blank lines are redundant elsewhere)",
          "enabled": false,
          "description": "Blank lines are redundant elsewhere [Learn more...](https://www.jetbrains.com/help/rider/RedundantBlankLines.html)"
        },
        {
          "shortName": "MultipleTypeMembersOnOneLine",
          "displayName": "Incorrect line breaks (multiple type members on one line)",
          "enabled": false,
          "description": "Multiple type members on one line [Learn more...](https://www.jetbrains.com/help/rider/MultipleTypeMembersOnOneLine.html)"
        },
        {
          "shortName": "BadListLineBreaks",
          "displayName": "Incorrect line breaks (around comma in lists)",
          "enabled": false,
          "description": "Around comma in lists [Learn more...](https://www.jetbrains.com/help/rider/BadListLineBreaks.html)"
        },
        {
          "shortName": "RedundantSpace",
          "displayName": "Incorrect spacing (space is redundant elsewhere)",
          "enabled": false,
          "description": "Space is redundant elsewhere [Learn more...](https://www.jetbrains.com/help/rider/RedundantSpace.html)"
        },
        {
          "shortName": "WrongIndentSize",
          "displayName": "Incorrect indent (incorrect indent size)",
          "enabled": false,
          "description": "Incorrect indent size [Learn more...](https://www.jetbrains.com/help/rider/WrongIndentSize.html)"
        },
        {
          "shortName": "BadSwitchBracesIndent",
          "displayName": "Incorrect indent (around switch statement)",
          "enabled": false,
          "description": "Around switch statement [Learn more...](https://www.jetbrains.com/help/rider/BadSwitchBracesIndent.html)"
        },
        {
          "shortName": "BadNamespaceBracesIndent",
          "displayName": "Incorrect indent (around namespace braces)",
          "enabled": false,
          "description": "Around namespace braces [Learn more...](https://www.jetbrains.com/help/rider/BadNamespaceBracesIndent.html)"
        },
        {
          "shortName": "BadControlBracesLineBreaks",
          "displayName": "Incorrect line breaks (around statement braces)",
          "enabled": false,
          "description": "Around statement braces [Learn more...](https://www.jetbrains.com/help/rider/BadControlBracesLineBreaks.html)"
        },
        {
          "shortName": "BadDeclarationBracesLineBreaks",
          "displayName": "Incorrect line breaks (around declaration braces)",
          "enabled": false,
          "description": "Around declaration braces [Learn more...](https://www.jetbrains.com/help/rider/BadDeclarationBracesLineBreaks.html)"
        },
        {
          "shortName": "MissingLinebreak",
          "displayName": "Incorrect line breaks (line break is missing elsewhere)",
          "enabled": false,
          "description": "Line break is missing elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingLinebreak.html)"
        },
        {
          "shortName": "BadEmptyBracesLineBreaks",
          "displayName": "Incorrect line breaks (around empty braces)",
          "enabled": false,
          "description": "Around empty braces [Learn more...](https://www.jetbrains.com/help/rider/BadEmptyBracesLineBreaks.html)"
        },
        {
          "shortName": "BadExpressionBracesIndent",
          "displayName": "Incorrect indent (around expression braces)",
          "enabled": false,
          "description": "Around expression braces [Learn more...](https://www.jetbrains.com/help/rider/BadExpressionBracesIndent.html)"
        },
        {
          "shortName": "BadDeclarationBracesIndent",
          "displayName": "Incorrect indent (around declaration braces)",
          "enabled": false,
          "description": "Around declaration braces [Learn more...](https://www.jetbrains.com/help/rider/BadDeclarationBracesIndent.html)"
        },
        {
          "shortName": "BadParensSpaces",
          "displayName": "Incorrect spacing (around parenthesis)",
          "enabled": false,
          "description": "Around parenthesis [Learn more...](https://www.jetbrains.com/help/rider/BadParensSpaces.html)"
        },
        {
          "shortName": "BadCommaSpaces",
          "displayName": "Incorrect spacing (around comma)",
          "enabled": false,
          "description": "Around comma [Learn more...](https://www.jetbrains.com/help/rider/BadCommaSpaces.html)"
        },
        {
          "shortName": "RedundantLinebreak",
          "displayName": "Incorrect line breaks (line break is redundant elsewhere)",
          "enabled": false,
          "description": "Line break is redundant elsewhere [Learn more...](https://www.jetbrains.com/help/rider/RedundantLinebreak.html)"
        },
        {
          "shortName": "IncorrectBlankLinesNearBraces",
          "displayName": "Incorrect blank lines (incorrect number of blank lines near braces)",
          "enabled": false,
          "description": "Incorrect number of blank lines near braces [Learn more...](https://www.jetbrains.com/help/rider/IncorrectBlankLinesNearBraces.html)"
        },
        {
          "shortName": "BadSymbolSpaces",
          "displayName": "Incorrect spacing (around operator symbols)",
          "enabled": false,
          "description": "Around operator symbols [Learn more...](https://www.jetbrains.com/help/rider/BadSymbolSpaces.html)"
        },
        {
          "shortName": "BadLinqLineBreaks",
          "displayName": "Incorrect line breaks (around LINQ queries)",
          "enabled": false,
          "description": "Around LINQ queries [Learn more...](https://www.jetbrains.com/help/rider/BadLinqLineBreaks.html)"
        },
        {
          "shortName": "OutdentIsOffPrevLevel",
          "displayName": "Incorrect indent (indent level is not restored)",
          "enabled": false,
          "description": "Indent level is not restored [Learn more...](https://www.jetbrains.com/help/rider/OutdentIsOffPrevLevel.html)"
        },
        {
          "shortName": "MissingBlankLines",
          "displayName": "Incorrect blank lines (blank lines are missing elsewhere)",
          "enabled": false,
          "description": "Blank lines are missing elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingBlankLines.html)"
        },
        {
          "shortName": "MultipleStatementsOnOneLine",
          "displayName": "Incorrect line breaks (multiple statements on one line)",
          "enabled": false,
          "description": "Multiple statements on one line [Learn more...](https://www.jetbrains.com/help/rider/MultipleStatementsOnOneLine.html)"
        },
        {
          "shortName": "BadChildStatementIndent",
          "displayName": "Incorrect indent (around child statement)",
          "enabled": true,
          "description": "Around child statement [Learn more...](https://www.jetbrains.com/help/rider/BadChildStatementIndent.html)"
        },
        {
          "shortName": "BadPreprocessorIndent",
          "displayName": "Incorrect indent (around preprocessor directive)",
          "enabled": false,
          "description": "Around preprocessor directive [Learn more...](https://www.jetbrains.com/help/rider/BadPreprocessorIndent.html)"
        },
        {
          "shortName": "BadSpacesAfterKeyword",
          "displayName": "Incorrect spacing (between keyword and parenthesis)",
          "enabled": false,
          "description": "Between keyword and parenthesis [Learn more...](https://www.jetbrains.com/help/rider/BadSpacesAfterKeyword.html)"
        },
        {
          "shortName": "MultipleSpaces",
          "displayName": "Incorrect spacing (multiple spaces are prohibited)",
          "enabled": false,
          "description": "Multiple spaces are prohibited [Learn more...](https://www.jetbrains.com/help/rider/MultipleSpaces.html)"
        },
        {
          "shortName": "BadGenericBracketsSpaces",
          "displayName": "Incorrect spacing (around generic brackets)",
          "enabled": false,
          "description": "Around generic brackets [Learn more...](https://www.jetbrains.com/help/rider/BadGenericBracketsSpaces.html)"
        },
        {
          "shortName": "BadColonSpaces",
          "displayName": "Incorrect spacing (around colon)",
          "enabled": false,
          "description": "Around colon [Learn more...](https://www.jetbrains.com/help/rider/BadColonSpaces.html)"
        },
        {
          "shortName": "BadMemberAccessSpaces",
          "displayName": "Incorrect spacing (around member access symbols)",
          "enabled": false,
          "description": "Around member access symbols [Learn more...](https://www.jetbrains.com/help/rider/BadMemberAccessSpaces.html)"
        },
        {
          "shortName": "TabsOutsideIndent",
          "displayName": "Incorrect spacing (tabs are prohibited here)",
          "enabled": false,
          "description": "Tabs are prohibited here [Learn more...](https://www.jetbrains.com/help/rider/TabsOutsideIndent.html)"
        },
        {
          "shortName": "BadControlBracesIndent",
          "displayName": "Incorrect indent (around statement braces)",
          "enabled": true,
          "description": "Around statement braces [Learn more...](https://www.jetbrains.com/help/rider/BadControlBracesIndent.html)"
        },
        {
          "shortName": "CppBadSwitchBracesIndent",
          "displayName": "Incorrect indent (around switch statement)",
          "enabled": false,
          "description": "Around switch statement"
        },
        {
          "shortName": "CppBadColonSpaces",
          "displayName": "Incorrect spacing (around colon)",
          "enabled": false,
          "description": "Around colon"
        },
        {
          "shortName": "CppMissingIndent",
          "displayName": "Incorrect indent (missing indent/outdent elsewhere)",
          "enabled": false,
          "description": "Missing indent/outdent elsewhere"
        },
        {
          "shortName": "CppBadCommaSpaces",
          "displayName": "Incorrect spacing (around comma)",
          "enabled": false,
          "description": "Around comma"
        },
        {
          "shortName": "CppBadParensSpaces",
          "displayName": "Incorrect spacing (around parenthesis)",
          "enabled": false,
          "description": "Around parenthesis"
        },
        {
          "shortName": "CppWrongIndentSize",
          "displayName": "Incorrect indent (incorrect indent size)",
          "enabled": false,
          "description": "Incorrect indent size"
        },
        {
          "shortName": "CppBadParensLineBreaks",
          "displayName": "Incorrect line breaks (around parenthesis)",
          "enabled": false,
          "description": "Around parenthesis"
        },
        {
          "shortName": "CppBadSymbolSpaces",
          "displayName": "Incorrect spacing (around operator symbols)",
          "enabled": false,
          "description": "Around operator symbols"
        },
        {
          "shortName": "CppBadControlBracesIndent",
          "displayName": "Incorrect indent (around statement braces)",
          "enabled": false,
          "description": "Around statement braces"
        },
        {
          "shortName": "CppBadEmptyBracesLineBreaks",
          "displayName": "Incorrect line breaks (around empty braces)",
          "enabled": false,
          "description": "Around empty braces"
        },
        {
          "shortName": "CppRedundantLinebreak",
          "displayName": "Incorrect line breaks (line break is redundant elsewhere)",
          "enabled": false,
          "description": "Line break is redundant elsewhere"
        },
        {
          "shortName": "CppBadAngleBracketsSpaces",
          "displayName": "Incorrect spacing (around angle brackets)",
          "enabled": false,
          "description": "Around angle brackets"
        },
        {
          "shortName": "CppBadExpressionBracesIndent",
          "displayName": "Incorrect indent (around expression braces)",
          "enabled": false,
          "description": "Around expression braces"
        },
        {
          "shortName": "CppIncorrectBlankLinesNearBraces",
          "displayName": "Incorrect blank lines (incorrect number of blank lines near braces)",
          "enabled": false,
          "description": "Incorrect number of blank lines near braces"
        },
        {
          "shortName": "CppUnnecessaryWhitespace",
          "displayName": "Incorrect spacing (redundant whitespaces at the end of a line)",
          "enabled": false,
          "description": "Redundant whitespace characters at the end of a line"
        },
        {
          "shortName": "CppBadSquareBracketsSpaces",
          "displayName": "Incorrect spacing (around square brackets within a statement)",
          "enabled": false,
          "description": "Around square brackets within a statement"
        },
        {
          "shortName": "CppTabsAreDisallowed",
          "displayName": "Incorrect spacing (tabs are prohibited)",
          "enabled": false,
          "description": "Prohibits the use of tabulation character everywhere in file"
        },
        {
          "shortName": "CppMultipleSpaces",
          "displayName": "Incorrect spacing (multiple spaces are prohibited)",
          "enabled": false,
          "description": "Multiple spaces are prohibited"
        },
        {
          "shortName": "CppBadIndent",
          "displayName": "Incorrect indent (redundant indent/outdent elsewhere)",
          "enabled": false,
          "description": "Redundant indent/outdent elsewhere"
        },
        {
          "shortName": "CppRedundantBlankLines",
          "displayName": "Incorrect blank lines (blank lines are redundant elsewhere)",
          "enabled": false,
          "description": "Blank lines are redundant elsewhere"
        },
        {
          "shortName": "CppRedundantSpace",
          "displayName": "Incorrect spacing (space is redundant elsewhere)",
          "enabled": false,
          "description": "Space is redundant elsewhere"
        },
        {
          "shortName": "CppBadMemberAccessSpaces",
          "displayName": "Incorrect spacing (around member access symbols)",
          "enabled": false,
          "description": "Around member access symbols"
        },
        {
          "shortName": "CppBadBracesSpaces",
          "displayName": "Incorrect spacing (around braces)",
          "enabled": false,
          "description": "Around braces"
        },
        {
          "shortName": "CppMissingSpace",
          "displayName": "Incorrect spacing (space is missing elsewhere)",
          "enabled": false,
          "description": "Space is missing elsewhere"
        },
        {
          "shortName": "CppBadNamespaceBracesIndent",
          "displayName": "Incorrect indent (around namespace braces)",
          "enabled": false,
          "description": "Around namespace braces"
        },
        {
          "shortName": "CppTabsAndSpacesMismatch",
          "displayName": "Incorrect indent (tabs/spaces mismatch)",
          "enabled": false,
          "description": "Tabs/spaces mismatch"
        },
        {
          "shortName": "CppBadDeclarationBracesIndent",
          "displayName": "Incorrect indent (around declaration braces)",
          "enabled": false,
          "description": "Around declaration braces"
        },
        {
          "shortName": "CppBadSemicolonSpaces",
          "displayName": "Incorrect spacing (around semicolon)",
          "enabled": false,
          "description": "Around semicolon"
        },
        {
          "shortName": "CppBadControlBracesLineBreaks",
          "displayName": "Incorrect line breaks (around statement braces)",
          "enabled": false,
          "description": "Around statement braces"
        },
        {
          "shortName": "CppBadListLineBreaks",
          "displayName": "Incorrect line breaks (around comma in lists)",
          "enabled": false,
          "description": "Around comma in lists"
        },
        {
          "shortName": "CppTabsOutsideIndent",
          "displayName": "Incorrect spacing (tabs are prohibited except for indentation)",
          "enabled": false,
          "description": "Tabs are prohibited except for indentation"
        },
        {
          "shortName": "CppBadDeclarationBracesLineBreaks",
          "displayName": "Incorrect line breaks (around declaration braces)",
          "enabled": false,
          "description": "Around declaration braces"
        },
        {
          "shortName": "CppBadExpressionBracesLineBreaks",
          "displayName": "Incorrect line breaks (around expression braces)",
          "enabled": false,
          "description": "Around expression braces"
        },
        {
          "shortName": "CppBadChildStatementIndent",
          "displayName": "Incorrect indent (around child statement)",
          "enabled": false,
          "description": "Around child statement"
        },
        {
          "shortName": "CppBadSpacesAfterKeyword",
          "displayName": "Incorrect spacing (between keyword and parenthesis)",
          "enabled": false,
          "description": "Between keyword and parenthesis"
        },
        {
          "shortName": "CppOutdentIsOffPrevLevel",
          "displayName": "Incorrect indent (indent level is not restored)",
          "enabled": false,
          "description": "Indent level is not restored"
        },
        {
          "shortName": "CppMissingBlankLines",
          "displayName": "Incorrect blank lines (blank lines are missing elsewhere)",
          "enabled": false,
          "description": "Blank lines are missing elsewhere"
        },
        {
          "shortName": "CppMissingLinebreak",
          "displayName": "Incorrect line breaks (line break is missing elsewhere)",
          "enabled": false,
          "description": "Line break is missing elsewhere"
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "enabled": false,
          "description": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "enabled": false,
          "description": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "enabled": false,
          "description": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "enabled": false,
          "description": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "enabled": false,
          "description": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "enabled": false,
          "description": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "enabled": false,
          "description": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "enabled": false,
          "description": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "enabled": false,
          "description": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "enabled": false,
          "description": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "enabled": false,
          "description": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "enabled": false,
          "description": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "enabled": false,
          "description": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "enabled": false,
          "description": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "enabled": false,
          "description": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "enabled": false,
          "description": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "enabled": false,
          "description": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "enabled": false,
          "description": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "enabled": false,
          "description": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "enabled": false,
          "description": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
        },
        {
          "shortName": "SqlDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "enabled": false,
          "description": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "enabled": false,
          "description": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "enabled": false,
          "description": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "enabled": false,
          "description": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
        },
        {
          "shortName": "SqlConstantExpressionInspection",
          "displayName": "Constant expression",
          "enabled": false,
          "description": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "enabled": false,
          "description": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "enabled": false,
          "description": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe 'join' clause in 'delete' statement",
          "enabled": false,
          "description": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "enabled": false,
          "description": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "enabled": false,
          "description": "Reports type-related errors."
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "enabled": false,
          "description": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "enabled": false,
          "description": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "enabled": false,
          "description": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "enabled": false,
          "description": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "enabled": false,
          "description": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "enabled": false,
          "description": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "enabled": false,
          "description": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
        },
        {
          "shortName": "SqlCallNotationInspection",
          "displayName": "Using of named and positional arguments",
          "enabled": false,
          "description": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
        },
        {
          "shortName": "SqlShadowingAliasInspection",
          "displayName": "Column is shadowed by alias",
          "enabled": false,
          "description": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
        },
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "enabled": false,
          "description": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
        },
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "enabled": false,
          "description": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
        },
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "enabled": false,
          "description": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "enabled": false,
          "description": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "enabled": false,
          "description": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "enabled": false,
          "description": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "enabled": false,
          "description": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "enabled": false,
          "description": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "enabled": false,
          "description": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "enabled": false,
          "description": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
        }
      ]
    },
    {
      "name": "NUnit",
      "inspections": [
        {
          "shortName": "NUnit.ImplicitUnspecifiedNullValues",
          "displayName": "NUnit. Implicitly unspecified null values.",
          "enabled": true,
          "description": "NUnit. No enough values are provided in the Values attribute so NUnit implicitly adds 'null' values to fill test data."
        },
        {
          "shortName": "NUnit.TestCaseSourceShouldImplementIEnumerable",
          "displayName": "NUnit. Test case source must be non-abstract and implement IEnumerable.",
          "enabled": true,
          "description": "NUnit. Test case source must refer to non-abstract class implementing IEnumerable. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceShouldImplementIEnumerable.html)"
        },
        {
          "shortName": "NUnit.RangeAttributeBoundsAreOutOfRange",
          "displayName": "NUnit. Values in range do not fit the type of the test parameter.",
          "enabled": true,
          "description": "NUnit. Values specified in \\[Range\\] are out range for the type of the test parameter. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeAttributeBoundsAreOutOfRange.html)"
        },
        {
          "shortName": "NUnit.RedundantExpectedResultInTestCaseAttribute",
          "displayName": "NUnit. Redundant expected result for void test method.",
          "enabled": true,
          "description": "Specifying expected result for void NUnit test methods through the \\[TestCase\\] attribute is redundant. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RedundantExpectedResultInTestCaseAttribute.html)"
        },
        {
          "shortName": "NUnit.IgnoredParameterAttribute",
          "displayName": "NUnit. Ignored parameter attribute.",
          "enabled": true,
          "description": "NUnit. Parameter attribute is ignored by NUnit framework."
        },
        {
          "shortName": "NUnit.RangeToValueIsNotReachable",
          "displayName": "NUnit. The maximum range value is not reachable with the step value.",
          "enabled": true,
          "description": "NUnit. The maximum value of \\[Range\\] is not reachable, check range and step values. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeToValueIsNotReachable.html)"
        },
        {
          "shortName": "NUnit.TestCaseResultPropertyIsObsolete",
          "displayName": "NUnit. Test case Result property is obsolete.",
          "enabled": true,
          "description": "NUnit. Test case Result property is obsolete since NUnit 2.6. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseResultPropertyIsObsolete.html)"
        },
        {
          "shortName": "NUnit.NonPublicMethodWithTestAttribute",
          "displayName": "NUnit. Non-public test method.",
          "enabled": true,
          "description": "NUnit test methods must have public visibility [Learn more...](https://www.jetbrains.com/help/rider/NUnit.NonPublicMethodWithTestAttribute.html)"
        },
        {
          "shortName": "NUnit.TestCaseSourceMustBeFieldPropertyMethod",
          "displayName": "NUnit. Test case source must be field, property, or method.",
          "enabled": true,
          "description": "NUnit test case source specified in \\[TestCaseSource\\] or \\[ValueSource\\] attributes must only refer to field, property, or method [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceMustBeFieldPropertyMethod.html)"
        },
        {
          "shortName": "NUnit.AutoFixture.IncorrectArgumentType",
          "displayName": "NUnit.AutoFixture. Incompatible argument type or incorrect argument value.",
          "enabled": true,
          "description": "NUnit.AutoFixture. Argument value in the \\[InlineAutoData\\] attribute is incorrect or is not compatible with the test method parameter type."
        },
        {
          "shortName": "NUnit.RedundantArgumentInsteadOfExpectedResult",
          "displayName": "NUnit. Redundant argument instead of ExpectedResult.",
          "enabled": true,
          "description": "Redundant argument is found instead of 'ExpectedResult' [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RedundantArgumentInsteadOfExpectedResult.html)"
        },
        {
          "shortName": "NUnit.RedundantArgumentInTestCaseAttribute",
          "displayName": "NUnit. Redundant argument in TestCase attribute.",
          "enabled": true,
          "description": "According to the test method signature, the argument in the \\[TestCase\\] attribute is redundant [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RedundantArgumentInTestCaseAttribute.html)"
        },
        {
          "shortName": "NUnit.ParameterTypeIsNotCompatibleWithAttribute",
          "displayName": "NUnit. Specified values are not compatible with the test parameter type.",
          "enabled": true,
          "description": "NUnit. Values specified in the attribute are not compatible with the corresponding test parameter type. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.ParameterTypeIsNotCompatibleWithAttribute.html)"
        },
        {
          "shortName": "NUnit.TestCaseAttributeRequiresExpectedResult",
          "displayName": "NUnit. Missing expected result for non-void test method.",
          "enabled": true,
          "description": "Expected result of a compatible type must be provided for non-void NUnit test methods through the \\[TestCase\\] attribute [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseAttributeRequiresExpectedResult.html)"
        },
        {
          "shortName": "NUnit.MissingArgumentsInTestCaseAttribute",
          "displayName": "NUnit. Missing arguments in TestCase attribute.",
          "enabled": true,
          "description": "According to the test method signature, there are missing arguments in the \\[TestCase\\] attribute [Learn more...](https://www.jetbrains.com/help/rider/NUnit.MissingArgumentsInTestCaseAttribute.html)"
        },
        {
          "shortName": "NUnit.DuplicateValues",
          "displayName": "NUnit. Duplicate values.",
          "enabled": true,
          "description": "NUnit. Duplicate values produce unnecessary duplicate tests."
        },
        {
          "shortName": "NUnit.AutoFixture.MissedTestOrTestFixtureAttribute",
          "displayName": "NUnit.AutoFixture. Missing Test or TestFixture attribute.",
          "enabled": true,
          "description": "NUnit.AutoFixture. Missing \\[Test\\] or \\[TestFixture\\] attribute, test method will not be run."
        },
        {
          "shortName": "NUnit.RangeStepValueMustNotBeZero",
          "displayName": "NUnit. Range 'step' parameter value must be non-zero.",
          "enabled": true,
          "description": "NUnit. 'step' parameter value of \\[Range\\] is incorrect, it must be non-zero. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeStepValueMustNotBeZero.html)"
        },
        {
          "shortName": "NUnit.AttributeProducesTooManyTests",
          "displayName": "NUnit. Specified attribute values produce too many tests.",
          "enabled": false,
          "description": "NUnit. Values of the attribute produce too many tests, which may lead NUnit test runner to 'Out of Memory'. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.AttributeProducesTooManyTests.html)"
        },
        {
          "shortName": "NUnit.TestCaseResultPropertyDuplicatesExpectedResult",
          "displayName": "NUnit. Test case Result property duplicates ExpectedResult.",
          "enabled": true,
          "description": "NUnit. Test case Result property duplicates specified ExpectedResult. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseResultPropertyDuplicatesExpectedResult.html)"
        },
        {
          "shortName": "NUnit.IncorrectArgumentType",
          "displayName": "NUnit. Incompatible argument type or incorrect argument value.",
          "enabled": true,
          "description": "Argument value in the \\[TestCase\\] attribute is incorrect or is not compatible with the test method parameter type [Learn more...](https://www.jetbrains.com/help/rider/NUnit.IncorrectArgumentType.html)"
        },
        {
          "shortName": "NUnit.AsyncMethodMustBeTask",
          "displayName": "NUnit. Async test method must return Task or Task<T>",
          "enabled": true,
          "description": "NUnit supports only async test methods that return Task or Task [Learn more...](https://www.jetbrains.com/help/rider/NUnit.AsyncMethodMustBeTask.html)"
        },
        {
          "shortName": "NUnit.NoValuesProvided",
          "displayName": "NUnit. No values provided in the attributes.",
          "enabled": true,
          "description": "NUnit. No values are provided in the attribute or the current NUnit version does not support automatic generation of values for the parameter type. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.NoValuesProvided.html)"
        },
        {
          "shortName": "NUnit.TestCaseSourceMustBeStatic",
          "displayName": "NUnit. Test case source must be static.",
          "enabled": true,
          "description": "NUnit test case source field/property/method specified in \\[TestCaseSource\\] or \\[ValuesSource\\] attributes must be static. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceMustBeStatic.html)"
        },
        {
          "shortName": "NUnit.IncorrectRangeBounds",
          "displayName": "NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'.",
          "enabled": true,
          "description": "NUnit. Incorrect \\[Range\\] bounds. The value of 'to' parameter must be greater than or equal to 'from', or there must be a negative step. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.IncorrectRangeBounds.html)"
        },
        {
          "shortName": "NUnit.TestCaseSourceCannotBeResolved",
          "displayName": "NUnit. Cannot resolve symbol in TestCaseSource or ValueSource attribute.",
          "enabled": true,
          "description": "Cannot resolve symbol specified in \\[TestCaseSource\\] or \\[ValueSource\\] attributes [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceCannotBeResolved.html)"
        },
        {
          "shortName": "NUnit.RangeStepSignMismatch",
          "displayName": "NUnit. Mismatch of the range step sign.",
          "enabled": true,
          "description": "NUnit. The sign of the 'step' parameter of \\[Range\\] does not match the range values. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeStepSignMismatch.html)"
        },
        {
          "shortName": "NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute",
          "displayName": "NUnit.AutoFixture. Redundant argument in InlineAutoData attribute.",
          "enabled": true,
          "description": "NUnit.AutoFixture. According to the test method signature, the argument in the \\[InlineAutoData\\] attribute is redundant."
        },
        {
          "shortName": "NUnit.MethodWithParametersAndTestAttribute",
          "displayName": "NUnit. Values for test method parameters are not provided.",
          "enabled": true,
          "description": "Parameters of NUnit test method must be provided with values through either \\[Values\\] or \\[TestCase\\] attribute. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.MethodWithParametersAndTestAttribute.html)"
        },
        {
          "shortName": "NUnit.IncorrectExpectedResultType",
          "displayName": "NUnit. Incompatible expected result type or incorrect value.",
          "enabled": true,
          "description": "ExpectedResult value in \\[TestCase\\] or \\[Test\\] attributes is incorrect or is not compatible with the test method return type [Learn more...](https://www.jetbrains.com/help/rider/NUnit.IncorrectExpectedResultType.html)"
        }
      ]
    },
    {
      "name": "Compiler Warnings",
      "inspections": [
        {
          "shortName": "CSharpWarnings__CS4014",
          "displayName": "Async method invocation without await expression",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/hh873131.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1574,CS1584,CS1581,CS1580",
          "displayName": "Cannot resolve reference in XML comment",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8425",
          "displayName": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8424",
          "displayName": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0420",
          "displayName": "Reference to a volatile field will not be treated as volatile",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/4bw5ewxy.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8383",
          "displayName": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1723",
          "displayName": "XML comment has cref attribute that refers to a type parameter",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228603.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS7023",
          "displayName": "Static type in 'is' or 'as' operator.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS7022",
          "displayName": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0458",
          "displayName": "The result of the expression is always 'null' of nullable type",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0469",
          "displayName": "'goto case' value is not implicitly convertible to required type",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228370.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0464",
          "displayName": "Comparing with null of nullable value type always produces 'false'",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0465",
          "displayName": "Introducing a 'Finalize' method can interfere with destructor invocation",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/02wtfwbt.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS7095",
          "displayName": "Filter expression is a constant, consider removing the filter",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0472",
          "displayName": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1717",
          "displayName": "Assignment made to same variable",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/a1kzfw0z.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1711",
          "displayName": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1712",
          "displayName": "Type parameter has no matching typeparam tag in the XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/t8zca749.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1710",
          "displayName": "Duplicate typeparam tag in XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/k5ya7w1x.aspx)"
        },
        {
          "shortName": "UnusedField.Compiler",
          "displayName": "Field is never used",
          "enabled": true,
          "description": "Field is never used (compiler warning)"
        },
        {
          "shortName": "CSharpWarnings__WME006",
          "displayName": "Namespace should be default namespace of this project",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8619",
          "displayName": "Nullability of reference types in source type doesn't match target type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8618",
          "displayName": "Non-nullable member is uninitialized.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8617",
          "displayName": "Nullability of reference types in type of parameter doesn't match implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8616",
          "displayName": "Nullability of reference types in return type doesn't match implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8615",
          "displayName": "Nullability of reference types in type doesn't match implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8614",
          "displayName": "Nullability of reference types in type of parameter doesn't match implicitly implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8613",
          "displayName": "Nullability of reference types in return type doesn't match implicitly implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8612",
          "displayName": "Nullability of reference types in type doesn't match implicitly implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8611",
          "displayName": "Nullability of reference types in type of parameter doesn't match partial method declaration.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8610",
          "displayName": "Nullability of reference types in type of parameter doesn't match overridden member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8629",
          "displayName": "Nullable value type may be null.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8625",
          "displayName": "Cannot convert null literal to non-nullable reference type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8624",
          "displayName": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8622",
          "displayName": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8621",
          "displayName": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8620",
          "displayName": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8609",
          "displayName": "Nullability of reference types in return type doesn't match overridden member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8608",
          "displayName": "Nullability of reference types in type doesn't match overridden member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8607",
          "displayName": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull].",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8605",
          "displayName": "Unboxing a possibly null value.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8604",
          "displayName": "Possible null reference argument for a parameter.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8603",
          "displayName": "Possible null reference return.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8602",
          "displayName": "Dereference of a possibly null reference.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8601",
          "displayName": "Possible null reference assignment.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8600",
          "displayName": "Converting null literal or possible null value to non-nullable type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "NotAccessedVariable.Compiler",
          "displayName": "Non-accessed local variable",
          "enabled": true,
          "description": "Local variable is assigned but its value is never used (compiler warning)"
        },
        {
          "shortName": "CSharpWarnings__CS8656",
          "displayName": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8655",
          "displayName": "The switch expression does not handle some null inputs (it is not exhaustive).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8669",
          "displayName": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8667",
          "displayName": "Partial method declarations have inconsistent nullability for type parameter.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8634",
          "displayName": "Nullability of type argument doesn't match 'class' constraint.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8633",
          "displayName": "Nullability mismatch in constraints for type parameter.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8632",
          "displayName": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8631",
          "displayName": "Nullability of type argument doesn't match constraint type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8645",
          "displayName": "Type is already listed in the interface list with different nullability of reference types.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8644",
          "displayName": "Nullability of reference types in interface implemented by the base type doesn't match.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8643",
          "displayName": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0252,CS0253",
          "displayName": "Possible unintended reference comparison",
          "enabled": true,
          "description": "[Learn more...](https://www.jetbrains.com/help/rider/CSharpWarnings_CS0252_CS0253.html)"
        },
        {
          "shortName": "CSharpWarnings__CS8670",
          "displayName": "Object or collection initializer implicitly dereferences possibly null member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0659",
          "displayName": "Class overrides Object.Equals(object o) but not Object.GetHashCode()",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/xxhbfytk.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0657",
          "displayName": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/c6hdfbk4.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0658",
          "displayName": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/4ky08ezz.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0652",
          "displayName": "Comparison to integral constant is useless; the constant is outside the range of type 'type'.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1981",
          "displayName": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1998",
          "displayName": "Async function without await expression",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0665",
          "displayName": "Assignment in conditional expression",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/c1sde1ax.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8597",
          "displayName": "Thrown value may be null.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0642",
          "displayName": "Possible mistaken empty statement",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/9x19t380.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0693",
          "displayName": "Type parameter has the same name as a type parameter from the outer type",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/0ah54ze5.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0675",
          "displayName": "Bitwise-or operator used on a sign-extended operand.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0672",
          "displayName": "Member overrides obsolete member",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/9dzeyth8.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS9073",
          "displayName": "The 'scoped' modifier of a parameter doesn't match target delegate.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9074",
          "displayName": "The 'scoped' modifier of parameter doesn't match overridden or implemented member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9080",
          "displayName": "Use of a variable in this context may expose referenced variables outside of their declaration scope.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9081",
          "displayName": "A result of a stackalloc expression in this context may be exposed outside of the containing method.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9082",
          "displayName": "A local variable is returned by reference but was initialized to a value that cannot be returned by reference.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9042",
          "displayName": "Obsolete members should not be required.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9094",
          "displayName": "This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9095",
          "displayName": "This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9097",
          "displayName": "This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9099",
          "displayName": "The default parameter value does not match in the target delegate type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9083",
          "displayName": "A member of a variable is returned by reference but was initialized to a value that cannot be returned by reference",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9084",
          "displayName": "Struct member returns 'this' or other instance members by reference.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9085",
          "displayName": "This ref-assigns an expression to a variable with a narrower escape scope.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9086",
          "displayName": "The branches of the ref conditional operator refer to variables with incompatible declaration scopes.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9087",
          "displayName": "This returns a parameter by reference but it is not a ref parameter.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9088",
          "displayName": "This returns a parameter by reference but it is scoped to the current method.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9089",
          "displayName": "This returns by reference a member of parameter that is not a ref or out parameter.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9090",
          "displayName": "This returns by reference a member of parameter that is scoped to the current method.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9091",
          "displayName": "This returns local by reference but it is not a ref local.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9092",
          "displayName": "This returns a member of local by reference but it is not a ref local.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9093",
          "displayName": "This ref-assigns a value that can only escape the current method through a return statement.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1066",
          "displayName": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1058",
          "displayName": "A previous catch clause already catches all exceptions",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228623.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8509",
          "displayName": "The switch expression does not handle all possible inputs (it is not exhaustive).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8500",
          "displayName": "This takes the address of, gets the size of, or declares a pointer to a managed type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1911",
          "displayName": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228459.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8519",
          "displayName": "The given expression never matches the provided pattern.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8524",
          "displayName": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8520",
          "displayName": "The given expression always matches the provided constant.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0618",
          "displayName": "Use of obsolete symbol",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/x5ye6x1e.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0612",
          "displayName": "Use of obsolete symbol (without message)",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/h0h063ka.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1957",
          "displayName": "Multiple override candidates at run-time",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/bb882562.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0628",
          "displayName": "Declaring new protected member in sealed class is the same as declaring it as private",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/7x8ekes3.aspx)"
        },
        {
          "shortName": "NotAccessedField.Compiler",
          "displayName": "Non-accessed field",
          "enabled": true,
          "description": "Field is assigned but its value is never used (compiler warning)"
        },
        {
          "shortName": "UnassignedField.Compiler",
          "displayName": "Unassigned field",
          "enabled": true,
          "description": "Field is never assigned (compiler warning)"
        },
        {
          "shortName": "UnassignedReadonlyField.Compiler",
          "displayName": "Unassigned readonly field",
          "enabled": true,
          "description": "Readonly field is never assigned (compiler warning)"
        },
        {
          "shortName": "CSharpWarnings__CS0660,CS0661",
          "displayName": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden",
          "enabled": true,
          "description": "[Learn more...](https://www.jetbrains.com/help/rider/CSharpWarnings_CS0660_CS0661.html)"
        },
        {
          "shortName": "CSharpWarnings__CS1030",
          "displayName": "'#warning' directive",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/ckcykyd4.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8819",
          "displayName": "Nullability of reference types in return type doesn't match partial method declaration.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8825",
          "displayName": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8824",
          "displayName": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0078",
          "displayName": "The 'l' suffix is easily confused with the digit '1'",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/s74dtt7k.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8851",
          "displayName": "Record defined 'Equals' but not 'GetHashCode'",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8860",
          "displayName": "Types and aliases should not be named 'record'",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8847",
          "displayName": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8846",
          "displayName": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8892",
          "displayName": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0108,CS0114",
          "displayName": "Keyword 'new' is required",
          "enabled": true,
          "description": "[Learn more...](https://www.jetbrains.com/help/rider/CSharpWarnings_CS0108_CS0114.html)"
        },
        {
          "shortName": "CSharpWarnings__CS8714",
          "displayName": "Nullability of type argument doesn't match 'notnull' constraint.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8777",
          "displayName": "Parameter must have a non-null value when exiting.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8776",
          "displayName": "Member cannot be used in this attribute.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8775",
          "displayName": "Member must conditionally have a non-null value when exiting a function.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8774",
          "displayName": "Member must have a non-null value when exiting.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8770",
          "displayName": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8769",
          "displayName": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8768",
          "displayName": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8767",
          "displayName": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8766",
          "displayName": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8765",
          "displayName": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8764",
          "displayName": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes).",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8763",
          "displayName": "A method marked [DoesNotReturn] should not return.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8762",
          "displayName": "Parameter must conditionally have a non-null value when exiting a function.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8794",
          "displayName": "Given expression always matches the provided pattern",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS9100",
          "displayName": "Parameter has params modifier in lambda but not in target delegate type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "UnusedVariable.Compiler",
          "displayName": "Unused local variable",
          "enabled": true,
          "description": "Local variable is never used (compiler warning)"
        },
        {
          "shortName": "CSharpWarnings__CS8123",
          "displayName": "The tuple element name is ignored because a different name or no name is specified by the target type.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1522",
          "displayName": "Empty switch block",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/x68b4s45.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1587",
          "displayName": "XML comment is not placed on a valid language element",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/d3x6ez1z.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1589",
          "displayName": "Unable to include XML fragment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/3y857kz5.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1584",
          "displayName": "Syntax error in XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/hz13h4se.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1580",
          "displayName": "Incorrect signature in XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/03t96cfx.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1590",
          "displayName": "Invalid XML include element",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/549c3y6s.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1591",
          "displayName": "Missing XML comment for publicly visible type or member",
          "enabled": true,
          "description": "Compiler only produces XML documentation related warnings when 'XML Documentation' output generation option is enabled in project configuration settings (Project \\| Properties) [Learn more...](https://msdn.microsoft.com/en-us/library/zk18c1w9.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1592",
          "displayName": "Badly formed XML in included comments file",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/89c331t3.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1571",
          "displayName": "Duplicate param tag in XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/a5c6cbk0.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1572",
          "displayName": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS1573",
          "displayName": "Parameter has no matching param tag in the XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/01248w2b.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1574",
          "displayName": "Ambiguous reference in XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/26x4hk2a.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS1570",
          "displayName": "Invalid XML in XML comment",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/c20zzdxx.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CA2252",
          "displayName": "Opt in to preview features before using them.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0282",
          "displayName": "There is no defined ordering between fields in multiple declarations of partial struct. To specify an ordering, all instance fields must be in the same declaration.",
          "enabled": true,
          "description": "[Learn more...](https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0282)"
        },
        {
          "shortName": "CSharpWarnings__CS8947",
          "displayName": "Parameter occurs after interpolated string handler parameter in the parameter list.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0197",
          "displayName": "Taking address of marshal-by-reference class field",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/y545659k.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8974",
          "displayName": "Converting method group to non-delegate type 'object'.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8971",
          "displayName": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8981",
          "displayName": "The type name only contains lower-cased ASCII characters. Such names may become reserved for the language",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8966",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8965",
          "displayName": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8963",
          "displayName": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8962",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8961",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8960",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0109",
          "displayName": "Keyword 'new' is redundant",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/css4y2c4.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS8094",
          "displayName": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS8073",
          "displayName": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "CSharpWarnings__CS0183",
          "displayName": "Given expression is always of the provided type",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/sb7782xb.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0184",
          "displayName": "Given expression is never of the provided type",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/230kb9yt.aspx)"
        },
        {
          "shortName": "CSharpWarnings__CS0162",
          "displayName": "Code is unreachable",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/c0h4st1x.aspx)"
        },
        {
          "shortName": "ObsoleteElementError",
          "displayName": "Use of obsolete type or type member (error)",
          "enabled": true,
          "description": "Use of obsolete type or type member in XAML markup (error)"
        },
        {
          "shortName": "ObsoleteElement",
          "displayName": "Use of obsolete type or type member",
          "enabled": true,
          "description": "Use of obsolete type or type member in XAML markup"
        },
        {
          "shortName": "CppOutParameterMustBeWritten",
          "displayName": "The 'out' parameter must be assigned",
          "enabled": true,
          "description": "In HLSL 'out' parameters must be assigned before exiting the function"
        },
        {
          "shortName": "CppWarningDirective",
          "displayName": "#warning directive",
          "enabled": true,
          "description": "#warning preprocessor directive"
        },
        {
          "shortName": "CppCoroutineCallResolveError",
          "displayName": "Cannot resolve a required coroutine function",
          "enabled": true,
          "description": "A coroutine-related function which is required by the C++20 standard cannot be resolved"
        },
        {
          "shortName": "CppUninitializedDependentBaseClass",
          "displayName": "Uninitialized dependent base class",
          "enabled": true,
          "description": "Possibly uninitialized dependent base class"
        },
        {
          "shortName": "CppClassIsIncomplete",
          "displayName": "Use of an incomplete type inside a template",
          "enabled": true,
          "description": "An incomplete type is used inside a template declaration or definition"
        },
        {
          "shortName": "CppUnionMemberOfReferenceType",
          "displayName": "Union member of reference type",
          "enabled": true,
          "description": "Unions cannot contain non-static data members of reference types"
        },
        {
          "shortName": "CppTemplateParameterShadowing",
          "displayName": "Redeclaration of a template parameter from an outer scope",
          "enabled": true,
          "description": "A template parameter from an outer scope is shadowed by a declaration with the same name"
        },
        {
          "shortName": "CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore",
          "displayName": "User-defined literal suffixes must start with an underscore",
          "enabled": true,
          "description": "User-defined literal suffixes must start with an underscore. The suffixes that do not begin with an underscore are reserved for the literal operators provided by the standard library."
        },
        {
          "shortName": "CppMutableSpecifierOnReferenceMember",
          "displayName": "Reference class member with 'mutable' specifier",
          "enabled": true,
          "description": "Reference class members cannot have 'mutable' specifier"
        },
        {
          "shortName": "CppPrecompiledHeaderNotFound",
          "displayName": "Precompiled header is not found",
          "enabled": true,
          "description": "No corresponding file with the 'Precompiled Header' property set to 'Create' (/Yc) is found"
        },
        {
          "shortName": "CppDefaultInitializationWithNoUserConstructor",
          "displayName": "Default initialization of a const-qualified object of a type without a user-provided default constructor",
          "enabled": true,
          "description": "Default initialization of a const-qualified object of a type without a user-provided default constructor"
        },
        {
          "shortName": "CppPrecompiledHeaderIsNotIncluded",
          "displayName": "Precompiled header is not included",
          "enabled": true,
          "description": "Precompiled header must be included at the top of source file"
        },
        {
          "shortName": "CppStaticAssertFailure",
          "displayName": "static_assert failed",
          "enabled": true,
          "description": "static_assert failed"
        },
        {
          "shortName": "CppExplicitSpecializationInNonNamespaceScope",
          "displayName": "Explicit specialization in non-namespace scope",
          "enabled": true,
          "description": "Explicit specializations of a template in non-namespace scope"
        },
        {
          "shortName": "CppAwaiterTypeIsNotClass",
          "displayName": "Awaiter type is not a class",
          "enabled": true,
          "description": "The awaiter type must be a a class according to the C++20 standard"
        },
        {
          "shortName": "VBWarnings__BC42505",
          "displayName": "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name.",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42504",
          "displayName": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42353,BC42354,BC42355",
          "displayName": "Function doesn't return a struct value on all code paths",
          "enabled": true,
          "description": "[Learn more...](https://www.jetbrains.com/help/rider/VBWarnings_BC42353_BC42354_BC42355.html)"
        },
        {
          "shortName": "VBWarnings__BC400005",
          "displayName": "Member shadows an overriable member",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/fs06ef5d.aspx)"
        },
        {
          "shortName": "VBWarnings__BC42356",
          "displayName": "Async method lacks 'Await' operators",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42358",
          "displayName": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call.",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/hh965065.aspx)"
        },
        {
          "shortName": "VBWarnings__BC42322",
          "displayName": "Runtime errors are likely to occur when converting X to Y",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42349",
          "displayName": "Redundant DirectCast to the equals value type",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42309",
          "displayName": "XML comment has a tag with a 'cref' attribute that could not be resolved",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42304",
          "displayName": "Syntax error in XML comment",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42016",
          "displayName": "Runtime errors might occur when converting X to Y",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/56k670kt.aspx)"
        },
        {
          "shortName": "VBWarnings__BC42025",
          "displayName": "Access of shared member through an instance",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/y6t76186.aspx)"
        },
        {
          "shortName": "VBWarnings__BC42104",
          "displayName": "Variable is used before it has been assigned a value",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/3fdk625a.aspx)"
        },
        {
          "shortName": "VBWarnings__WME006",
          "displayName": "Namespace should be default namespace of this project",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC42105,BC42106,BC42107",
          "displayName": "Function doesn't return a reference type value on all code paths",
          "enabled": true,
          "description": "[Learn more...](https://www.jetbrains.com/help/rider/VBWarnings_BC42105_BC42106_BC42107.html)"
        },
        {
          "shortName": "VBWarnings__BC40056",
          "displayName": "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms234657.aspx)"
        },
        {
          "shortName": "VBWarnings__BC40000",
          "displayName": "Use obsolete member",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "VBWarnings__BC40008",
          "displayName": "Use obsolete member (without message)",
          "enabled": true,
          "description": "[Learn more...](https://msdn.microsoft.com/en-us/library/s5f0ewa6.aspx)"
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "Color could be replaced with rgb()",
          "enabled": false,
          "description": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property",
          "enabled": false,
          "description": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Property is incompatible with selected browsers",
          "enabled": false,
          "description": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
        },
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused selector",
          "enabled": false,
          "description": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
        },
        {
          "shortName": "CssDeprecatedValue",
          "displayName": "Deprecated value",
          "enabled": false,
          "description": "Reports a deprecated CSS value. Suggests replacing the deprecated value with valid equivalent."
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "Color could be replaced with #-hex",
          "enabled": false,
          "description": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid function",
          "enabled": false,
          "description": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
        },
        {
          "shortName": "CssInvalidNestedSelector",
          "displayName": "Invalid nested selector",
          "enabled": false,
          "description": "Reports a nested selector starting with an identifier or a functional notation."
        },
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid type selector",
          "enabled": false,
          "description": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Misplaced or incorrect @charset",
          "enabled": false,
          "description": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid pseudo-selector",
          "enabled": false,
          "description": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid media feature",
          "enabled": false,
          "description": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved custom property",
          "enabled": false,
          "description": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown at-rule",
          "enabled": false,
          "description": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative property value",
          "enabled": false,
          "description": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports an incorrect CSS property value."
        },
        {
          "shortName": "CssUnknownUnit",
          "displayName": "Unknown unit",
          "enabled": false,
          "description": "Reports an unknown unit"
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced @import",
          "enabled": false,
          "description": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
        },
        {
          "shortName": "CssUnresolvedClassInComposesRule",
          "displayName": "Unresolved class in 'composes' rule",
          "enabled": false,
          "description": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
        }
      ]
    },
    {
      "name": "Potentially undesirable code constructs",
      "inspections": [
        {
          "shortName": "ContinueStatementJS",
          "displayName": "'continue' statement",
          "enabled": false,
          "description": "Reports a `continue` statement."
        },
        {
          "shortName": "CommaExpressionJS",
          "displayName": "Comma expression",
          "enabled": false,
          "description": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
        },
        {
          "shortName": "BreakStatementWithLabelJS",
          "displayName": "'break' statement with label",
          "enabled": false,
          "description": "Reports a labeled `break` statement."
        },
        {
          "shortName": "AnonymousFunctionJS",
          "displayName": "Anonymous function",
          "enabled": false,
          "description": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
        },
        {
          "shortName": "BreakStatementJS",
          "displayName": "'break' statement",
          "enabled": false,
          "description": "Reports a `break` statements. Ignores `break` statements that end case blocks."
        },
        {
          "shortName": "DebuggerStatementJS",
          "displayName": "'debugger' statement",
          "enabled": false,
          "description": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
        },
        {
          "shortName": "ConditionalExpressionJS",
          "displayName": "Conditional expression",
          "enabled": false,
          "description": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
        },
        {
          "shortName": "VoidExpressionJS",
          "displayName": "'void' expression",
          "enabled": false,
          "description": "Reports a `void` expression."
        },
        {
          "shortName": "ContinueStatementWithLabelJS",
          "displayName": "'continue' statement with label",
          "enabled": false,
          "description": "Reports a labeled `continue` statement."
        },
        {
          "shortName": "LabeledStatementJS",
          "displayName": "Labeled statement",
          "enabled": false,
          "description": "Reports a labeled statement."
        },
        {
          "shortName": "WithStatementJS",
          "displayName": "'with' statement",
          "enabled": false,
          "description": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
        }
      ]
    },
    {
      "name": "Clang Static Analyzer Checks",
      "inspections": [
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusSmartPtrModeling",
          "displayName": "cplusplus.SmartPtrModeling clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.SmartPtrModeling clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxNSOrCFErrorDerefChecker",
          "displayName": "osx.NSOrCFErrorDerefChecker clang static analyzer check",
          "enabled": false,
          "description": "osx.NSOrCFErrorDerefChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinPerformancePadding",
          "displayName": "optin.performance.Padding clang static analyzer check",
          "enabled": false,
          "description": "optin.performance.Padding clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedArraySubscript",
          "displayName": "core.uninitialized.ArraySubscript clang static analyzer check",
          "enabled": false,
          "description": "core.uninitialized.ArraySubscript clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaSelfInit",
          "displayName": "osx.cocoa.SelfInit clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.SelfInit clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingTrustReturnsNonnull",
          "displayName": "apiModeling.TrustReturnsNonnull clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.TrustReturnsNonnull clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedCapturedBlockVariable",
          "displayName": "core.uninitialized.CapturedBlockVariable clang static analyzer check",
          "enabled": false,
          "description": "core.uninitialized.CapturedBlockVariable clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinOsxOSObjectCStyleCast",
          "displayName": "optin.osx.OSObjectCStyleCast clang static analyzer check",
          "enabled": false,
          "description": "optin.osx.OSObjectCStyleCast clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixCstringBadSizeArg",
          "displayName": "unix.cstring.BadSizeArg clang static analyzer check",
          "enabled": false,
          "description": "unix.cstring.BadSizeArg clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullableReturnedFromNonnull",
          "displayName": "nullability.NullableReturnedFromNonnull clang static analyzer check",
          "enabled": false,
          "description": "nullability.NullableReturnedFromNonnull clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerDeadcodeDeadStores",
          "displayName": "deadcode.DeadStores clang static analyzer check",
          "enabled": false,
          "description": "deadcode.DeadStores clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingLlvmCastValue",
          "displayName": "apiModeling.llvm.CastValue clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.llvm.CastValue clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerFuchsiaHandleChecker",
          "displayName": "fuchsia.HandleChecker clang static analyzer check",
          "enabled": false,
          "description": "fuchsia.HandleChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNSAutoreleasePool",
          "displayName": "osx.cocoa.NSAutoreleasePool clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.NSAutoreleasePool clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaDealloc",
          "displayName": "osx.cocoa.Dealloc clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.Dealloc clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedBranch",
          "displayName": "core.uninitialized.Branch clang static analyzer check",
          "enabled": false,
          "description": "core.uninitialized.Branch clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaVariadicMethodTypes",
          "displayName": "osx.cocoa.VariadicMethodTypes clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.VariadicMethodTypes clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedNewArraySize",
          "displayName": "core.uninitialized.NewArraySize clang static analyzer check",
          "enabled": false,
          "description": "core.uninitialized.NewArraySize clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaMissingSuperCall",
          "displayName": "osx.cocoa.MissingSuperCall clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.MissingSuperCall clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusPureVirtualCall",
          "displayName": "cplusplus.PureVirtualCall clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.PureVirtualCall clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaClassRelease",
          "displayName": "osx.cocoa.ClassRelease clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.ClassRelease clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIMktemp",
          "displayName": "security.insecureAPI.mktemp clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.mktemp clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaRetainCount",
          "displayName": "osx.cocoa.RetainCount clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.RetainCount clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIUncheckedReturn",
          "displayName": "security.insecureAPI.UncheckedReturn clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.UncheckedReturn clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreNonnilStringConstants",
          "displayName": "core.NonnilStringConstants clang static analyzer check",
          "enabled": false,
          "description": "core.NonnilStringConstants clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIDeprecatedOrUnsafeBufferHandling",
          "displayName": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIMkstemp",
          "displayName": "security.insecureAPI.mkstemp clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.mkstemp clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixDynamicMemoryModeling",
          "displayName": "unix.DynamicMemoryModeling clang static analyzer check",
          "enabled": false,
          "description": "unix.DynamicMemoryModeling clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaAtSync",
          "displayName": "osx.cocoa.AtSync clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.AtSync clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinMpiMPIChecker",
          "displayName": "optin.mpi.MPI-Checker clang static analyzer check",
          "enabled": false,
          "description": "optin.mpi.MPI-Checker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullReturnedFromNonnull",
          "displayName": "nullability.NullReturnedFromNonnull clang static analyzer check",
          "enabled": false,
          "description": "nullability.NullReturnedFromNonnull clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullabilityBase",
          "displayName": "nullability.NullabilityBase clang static analyzer check",
          "enabled": false,
          "description": "nullability.NullabilityBase clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistValistBase",
          "displayName": "valist.ValistBase clang static analyzer check",
          "enabled": false,
          "description": "valist.ValistBase clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusNewDelete",
          "displayName": "cplusplus.NewDelete clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.NewDelete clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixCstringNullArg",
          "displayName": "unix.cstring.NullArg clang static analyzer check",
          "enabled": false,
          "description": "unix.cstring.NullArg clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinPerformanceGCDAntipattern",
          "displayName": "optin.performance.GCDAntipattern clang static analyzer check",
          "enabled": false,
          "description": "optin.performance.GCDAntipattern clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNonNilReturnValue",
          "displayName": "osx.cocoa.NonNilReturnValue clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.NonNilReturnValue clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxSecKeychainAPI",
          "displayName": "osx.SecKeychainAPI clang static analyzer check",
          "enabled": false,
          "description": "osx.SecKeychainAPI clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxMIG",
          "displayName": "osx.MIG clang static analyzer check",
          "enabled": false,
          "description": "osx.MIG clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIStrcpy",
          "displayName": "security.insecureAPI.strcpy clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.strcpy clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersPointerSizedValues",
          "displayName": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check",
          "enabled": false,
          "description": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBzero",
          "displayName": "security.insecureAPI.bzero clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.bzero clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreDynamicTypePropagation",
          "displayName": "core.DynamicTypePropagation clang static analyzer check",
          "enabled": false,
          "description": "core.DynamicTypePropagation clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersOutOfBounds",
          "displayName": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check",
          "enabled": false,
          "description": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerWebkitRefCntblBaseVirtualDtor",
          "displayName": "webkit.RefCntblBaseVirtualDtor clang static analyzer check",
          "enabled": false,
          "description": "webkit.RefCntblBaseVirtualDtor clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingTrustNonnull",
          "displayName": "apiModeling.TrustNonnull clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.TrustNonnull clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistUninitialized",
          "displayName": "valist.Uninitialized clang static analyzer check",
          "enabled": false,
          "description": "valist.Uninitialized clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusInnerPointer",
          "displayName": "cplusplus.InnerPointer clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.InnerPointer clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedUndefReturn",
          "displayName": "core.uninitialized.UndefReturn clang static analyzer check",
          "enabled": false,
          "description": "core.uninitialized.UndefReturn clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingGoogleGTest",
          "displayName": "apiModeling.google.GTest clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.google.GTest clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIGets",
          "displayName": "security.insecureAPI.gets clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.gets clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullablePassedToNonnull",
          "displayName": "nullability.NullablePassedToNonnull clang static analyzer check",
          "enabled": false,
          "description": "nullability.NullablePassedToNonnull clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIDecodeValueOfObjCType",
          "displayName": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingLlvmReturnValue",
          "displayName": "apiModeling.llvm.ReturnValue clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.llvm.ReturnValue clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusStringChecker",
          "displayName": "cplusplus.StringChecker clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.StringChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreVLASize",
          "displayName": "core.VLASize clang static analyzer check",
          "enabled": false,
          "description": "core.VLASize clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreBuiltinBuiltinFunctions",
          "displayName": "core.builtin.BuiltinFunctions clang static analyzer check",
          "enabled": false,
          "description": "core.builtin.BuiltinFunctions clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityEmptyLocalizationContextChecker",
          "displayName": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check",
          "enabled": false,
          "description": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaRunLoopAutoreleaseLeak",
          "displayName": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinCplusplusUninitializedObject",
          "displayName": "optin.cplusplus.UninitializedObject clang static analyzer check",
          "enabled": false,
          "description": "optin.cplusplus.UninitializedObject clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusPlacementNew",
          "displayName": "cplusplus.PlacementNew clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.PlacementNew clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreStackAddressEscape",
          "displayName": "core.StackAddressEscape clang static analyzer check",
          "enabled": false,
          "description": "core.StackAddressEscape clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusMove",
          "displayName": "cplusplus.Move clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.Move clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusNewDeleteLeaks",
          "displayName": "cplusplus.NewDeleteLeaks clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.NewDeleteLeaks clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxAPI",
          "displayName": "osx.API clang static analyzer check",
          "enabled": false,
          "description": "osx.API clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullableDereferenced",
          "displayName": "nullability.NullableDereferenced clang static analyzer check",
          "enabled": false,
          "description": "nullability.NullableDereferenced clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixCstringCStringModeling",
          "displayName": "unix.cstring.CStringModeling clang static analyzer check",
          "enabled": false,
          "description": "unix.cstring.CStringModeling clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusVirtualCallModeling",
          "displayName": "cplusplus.VirtualCallModeling clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.VirtualCallModeling clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistUnterminated",
          "displayName": "valist.Unterminated clang static analyzer check",
          "enabled": false,
          "description": "valist.Unterminated clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistCopyToSelf",
          "displayName": "valist.CopyToSelf clang static analyzer check",
          "enabled": false,
          "description": "valist.CopyToSelf clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaObjCGenerics",
          "displayName": "osx.cocoa.ObjCGenerics clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.ObjCGenerics clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreStackAddrEscapeBase",
          "displayName": "core.StackAddrEscapeBase clang static analyzer check",
          "enabled": false,
          "description": "core.StackAddrEscapeBase clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreCallAndMessageModeling",
          "displayName": "core.CallAndMessageModeling clang static analyzer check",
          "enabled": false,
          "description": "core.CallAndMessageModeling clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcmp",
          "displayName": "security.insecureAPI.bcmp clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.bcmp clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaRetainCountBase",
          "displayName": "osx.cocoa.RetainCountBase clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.RetainCountBase clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaLoops",
          "displayName": "osx.cocoa.Loops clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.Loops clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxNumberObjectConversion",
          "displayName": "osx.NumberObjectConversion clang static analyzer check",
          "enabled": false,
          "description": "osx.NumberObjectConversion clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityNonLocalizedStringChecker",
          "displayName": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check",
          "enabled": false,
          "description": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixMallocSizeof",
          "displayName": "unix.MallocSizeof clang static analyzer check",
          "enabled": false,
          "description": "unix.MallocSizeof clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFError",
          "displayName": "osx.coreFoundation.CFError clang static analyzer check",
          "enabled": false,
          "description": "osx.coreFoundation.CFError clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIGetpw",
          "displayName": "security.insecureAPI.getpw clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.getpw clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUndefinedBinaryOperatorResult",
          "displayName": "core.UndefinedBinaryOperatorResult clang static analyzer check",
          "enabled": false,
          "description": "core.UndefinedBinaryOperatorResult clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNilArg",
          "displayName": "osx.cocoa.NilArg clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.NilArg clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusSelfAssignment",
          "displayName": "cplusplus.SelfAssignment clang static analyzer check",
          "enabled": false,
          "description": "cplusplus.SelfAssignment clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxOSObjectRetainCount",
          "displayName": "osx.OSObjectRetainCount clang static analyzer check",
          "enabled": false,
          "description": "osx.OSObjectRetainCount clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPISecuritySyntaxChecker",
          "displayName": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingStdCLibraryFunctions",
          "displayName": "apiModeling.StdCLibraryFunctions clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.StdCLibraryFunctions clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIVfork",
          "displayName": "security.insecureAPI.vfork clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.vfork clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFRetainRelease",
          "displayName": "osx.coreFoundation.CFRetainRelease clang static analyzer check",
          "enabled": false,
          "description": "osx.coreFoundation.CFRetainRelease clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityFloatLoopCounter",
          "displayName": "security.FloatLoopCounter clang static analyzer check",
          "enabled": false,
          "description": "security.FloatLoopCounter clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreCallAndMessage",
          "displayName": "core.CallAndMessage clang static analyzer check",
          "enabled": false,
          "description": "core.CallAndMessage clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinCplusplusVirtualCall",
          "displayName": "optin.cplusplus.VirtualCall clang static analyzer check",
          "enabled": false,
          "description": "optin.cplusplus.VirtualCall clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerWebkitUncountedLambdaCapturesChecker",
          "displayName": "webkit.UncountedLambdaCapturesChecker clang static analyzer check",
          "enabled": false,
          "description": "webkit.UncountedLambdaCapturesChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreDivideZero",
          "displayName": "core.DivideZero clang static analyzer check",
          "enabled": false,
          "description": "core.DivideZero clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixAPI",
          "displayName": "unix.API clang static analyzer check",
          "enabled": false,
          "description": "unix.API clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreNonNullParamChecker",
          "displayName": "core.NonNullParamChecker clang static analyzer check",
          "enabled": false,
          "description": "core.NonNullParamChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedAssign",
          "displayName": "core.uninitialized.Assign clang static analyzer check",
          "enabled": false,
          "description": "core.uninitialized.Assign clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinPortabilityUnixAPI",
          "displayName": "optin.portability.UnixAPI clang static analyzer check",
          "enabled": false,
          "description": "optin.portability.UnixAPI clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFNumber",
          "displayName": "osx.coreFoundation.CFNumber clang static analyzer check",
          "enabled": false,
          "description": "osx.coreFoundation.CFNumber clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingErrno",
          "displayName": "apiModeling.Errno clang static analyzer check",
          "enabled": false,
          "description": "apiModeling.Errno clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcopy",
          "displayName": "security.insecureAPI.bcopy clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.bcopy clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreBuiltinNoReturnFunctions",
          "displayName": "core.builtin.NoReturnFunctions clang static analyzer check",
          "enabled": false,
          "description": "core.builtin.NoReturnFunctions clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaIncompatibleMethodTypes",
          "displayName": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIRand",
          "displayName": "security.insecureAPI.rand clang static analyzer check",
          "enabled": false,
          "description": "security.insecureAPI.rand clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerWebkitNoUncountedMemberChecker",
          "displayName": "webkit.NoUncountedMemberChecker clang static analyzer check",
          "enabled": false,
          "description": "webkit.NoUncountedMemberChecker clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNSError",
          "displayName": "osx.cocoa.NSError clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.NSError clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixVfork",
          "displayName": "unix.Vfork clang static analyzer check",
          "enabled": false,
          "description": "unix.Vfork clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixMismatchedDeallocator",
          "displayName": "unix.MismatchedDeallocator clang static analyzer check",
          "enabled": false,
          "description": "unix.MismatchedDeallocator clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreNullDereference",
          "displayName": "core.NullDereference clang static analyzer check",
          "enabled": false,
          "description": "core.NullDereference clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaSuperDealloc",
          "displayName": "osx.cocoa.SuperDealloc clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.SuperDealloc clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaUnusedIvars",
          "displayName": "osx.cocoa.UnusedIvars clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.UnusedIvars clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaAutoreleaseWrite",
          "displayName": "osx.cocoa.AutoreleaseWrite clang static analyzer check",
          "enabled": false,
          "description": "osx.cocoa.AutoreleaseWrite clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullPassedToNonnull",
          "displayName": "nullability.NullPassedToNonnull clang static analyzer check",
          "enabled": false,
          "description": "nullability.NullPassedToNonnull clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixMalloc",
          "displayName": "unix.Malloc clang static analyzer check",
          "enabled": false,
          "description": "unix.Malloc clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxObjCProperty",
          "displayName": "osx.ObjCProperty clang static analyzer check",
          "enabled": false,
          "description": "osx.ObjCProperty clang static analyzer check · [Learn more](https://clang-analyzer.llvm.org/available_checks.html)"
        }
      ]
    },
    {
      "name": "Redundancies in Symbol Declarations",
      "inspections": [
        {
          "shortName": "UnusedTupleComponentInReturnValue",
          "displayName": "Component of the tuple is never used",
          "enabled": true,
          "description": "Component of the tuple is never used"
        },
        {
          "shortName": "MeaninglessDefaultParameterValue",
          "displayName": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'",
          "enabled": true,
          "description": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'"
        },
        {
          "shortName": "RedundantExtendsListEntry",
          "displayName": "Redundant class or interface specification in base types list",
          "enabled": true,
          "description": "Type is either mentioned in the base types list of other part or it is an interface and appears as other type's base and contains no explicit implementations [Learn more...](https://www.jetbrains.com/help/rider/RedundantExtendsListEntry.html)"
        },
        {
          "shortName": "RedundantDefaultMemberInitializer",
          "displayName": "Redundant member initializer",
          "enabled": true,
          "description": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)"
        },
        {
          "shortName": "UnusedLabel",
          "displayName": "Unused label",
          "enabled": true,
          "description": "Label is never referenced"
        },
        {
          "shortName": "UnusedMethodReturnValue.Global",
          "displayName": "Method return value is never used (non-private accessibility)",
          "enabled": true,
          "description": "Method return value is never used"
        },
        {
          "shortName": "UnusedMemberHierarchy.Local",
          "displayName": "Type member is only used in overrides (private accessibility)",
          "enabled": true,
          "description": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call"
        },
        {
          "shortName": "ClassWithVirtualMembersNeverInherited.Local",
          "displayName": "Class with virtual (overridable) members never inherited (private accessibility)",
          "enabled": true,
          "description": "Non-abstract class has virtual (overridable) members but has no inheritors"
        },
        {
          "shortName": "EmptyConstructor",
          "displayName": "Empty constructor",
          "enabled": true,
          "description": "Empty public constructor declaration with no parameters is redundant. The compiler generates the same by default. [Learn more...](https://www.jetbrains.com/help/rider/EmptyConstructor.html)"
        },
        {
          "shortName": "PartialTypeWithSinglePart",
          "displayName": "Redundant 'partial' modifier on type declaration",
          "enabled": true,
          "description": "Class is declared as 'partial', but has only one part [Learn more...](https://www.jetbrains.com/help/rider/PartialTypeWithSinglePart.html)"
        },
        {
          "shortName": "ClassWithVirtualMembersNeverInherited.Global",
          "displayName": "Class with virtual (overridable) members never inherited (non-private accessibility)",
          "enabled": true,
          "description": "Non-abstract class has virtual (overridable) members but has no inheritors"
        },
        {
          "shortName": "UnusedParameter.Local",
          "displayName": "Unused parameter (private accessibility)",
          "enabled": true,
          "description": "Parameter is never used"
        },
        {
          "shortName": "EnumUnderlyingTypeIsInt",
          "displayName": "Underlying type of enum is 'int'",
          "enabled": true,
          "description": "'int' is default underlying type of enum, so it is not necessary to specify it explicitly [Learn more...](https://www.jetbrains.com/help/rider/EnumUnderlyingTypeIsInt.html)"
        },
        {
          "shortName": "UnusedLocalFunctionReturnValue",
          "displayName": "Local function return value is never used",
          "enabled": true,
          "description": "Local function return value is never used"
        },
        {
          "shortName": "UnusedMemberHierarchy.Global",
          "displayName": "Type member is only used in overrides (non-private accessibility)",
          "enabled": true,
          "description": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call"
        },
        {
          "shortName": "UnusedLocalFunction.Compiler",
          "displayName": "Local function is never used",
          "enabled": true,
          "description": "Local function is never used (compiler warning)"
        },
        {
          "shortName": "NotAccessedVariable",
          "displayName": "Non-accessed local variable",
          "enabled": true,
          "description": "Local variable is assigned but its value is never used"
        },
        {
          "shortName": "OutParameterValueIsAlwaysDiscarded.Local",
          "displayName": "Parameter output value is always discarded (private accessibility)",
          "enabled": true,
          "description": "The resulting value of output parameter is always discarded [Learn more...](https://www.jetbrains.com/help/rider/OutParameterValueIsAlwaysDiscarded.Local.html)"
        },
        {
          "shortName": "OutParameterValueIsAlwaysDiscarded.Global",
          "displayName": "Parameter output value is always discarded (non-private accessibility)",
          "enabled": true,
          "description": "The resulting value of output parameter is always discarded [Learn more...](https://www.jetbrains.com/help/rider/OutParameterValueIsAlwaysDiscarded.Global.html)"
        },
        {
          "shortName": "RedundantOverload.Global",
          "displayName": "Redundant method overload (non-private accessibility)",
          "enabled": true,
          "description": "Redundant method overload. Use another method with optional parameters."
        },
        {
          "shortName": "UnusedParameterInPartialMethod",
          "displayName": "Unused parameter in partial method",
          "enabled": true,
          "description": "Parameter of partial method is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedParameterInPartialMethod.html)"
        },
        {
          "shortName": "UnusedMember.Local",
          "displayName": "Type member is never used (private accessibility)",
          "enabled": true,
          "description": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)"
        },
        {
          "shortName": "ParameterOnlyUsedForPreconditionCheck.Global",
          "displayName": "Parameter is only used for precondition check (non-private accessibility)",
          "enabled": true,
          "description": "Parameter is only used for precondition check"
        },
        {
          "shortName": "NotAccessedPrimaryConstructorParameterCompiler",
          "displayName": "Not accessed primary constructor parameter",
          "enabled": true,
          "description": "Parameter of the primary constructor is declared but never used"
        },
        {
          "shortName": "PartialMethodWithSinglePart",
          "displayName": "Redundant 'partial' modifier on method declaration",
          "enabled": true,
          "description": "Method is declared as 'partial' but has only single part [Learn more...](https://www.jetbrains.com/help/rider/PartialMethodWithSinglePart.html)"
        },
        {
          "shortName": "UnusedMethodReturnValue.Local",
          "displayName": "Method return value is never used (private accessibility)",
          "enabled": true,
          "description": "Method return value is never used"
        },
        {
          "shortName": "VirtualMemberNeverOverridden.Local",
          "displayName": "Virtual (overridable) member is never overridden (private accessibility)",
          "enabled": true,
          "description": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Local.html)"
        },
        {
          "shortName": "EntityNameCapturedOnly.Local",
          "displayName": "Entity is only used to capture its name (private accessibility)",
          "enabled": true,
          "description": "Local variable/parameter is only used to capture its name via 'nameof' expression"
        },
        {
          "shortName": "UnusedParameter.Global",
          "displayName": "Unused parameter (non-private accessibility)",
          "enabled": true,
          "description": "Parameter is never used"
        },
        {
          "shortName": "SealedMemberInSealedClass",
          "displayName": "Sealed member in sealed class",
          "enabled": true,
          "description": "'sealed' modifier for member in a sealed class is redundant [Learn more...](https://www.jetbrains.com/help/rider/SealedMemberInSealedClass.html)"
        },
        {
          "shortName": "UnusedVariable",
          "displayName": "Unused local variable",
          "enabled": true,
          "description": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)"
        },
        {
          "shortName": "UnusedTypeParameter",
          "displayName": "Unused type parameter",
          "enabled": true,
          "description": "Type parameter is never used"
        },
        {
          "shortName": "UnusedType.Global",
          "displayName": "Type is never used (non-private accessibility)",
          "enabled": true,
          "description": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)"
        },
        {
          "shortName": "VirtualMemberNeverOverridden.Global",
          "displayName": "Virtual (overridable) member is never overridden (non-private accessibility)",
          "enabled": true,
          "description": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Global.html)"
        },
        {
          "shortName": "UnusedMember.Global",
          "displayName": "Type member is never used (non-private accessibility)",
          "enabled": true,
          "description": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)"
        },
        {
          "shortName": "EmptyDestructor",
          "displayName": "Empty destructor",
          "enabled": true,
          "description": "Empty finalizer declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyDestructor.html)"
        },
        {
          "shortName": "UnusedLocalFunction",
          "displayName": "Local function is never used",
          "enabled": true,
          "description": "Local function is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedLocalFunction.html)"
        },
        {
          "shortName": "UnusedMemberInSuper.Global",
          "displayName": "Type member is never accessed via base type (non-private accessibility)",
          "enabled": true,
          "description": "Type member is never used with base type or interface, it is always accessed via more specific type"
        },
        {
          "shortName": "UnusedMemberInSuper.Local",
          "displayName": "Type member is never accessed via base type (private accessibility)",
          "enabled": true,
          "description": "Type member is never used with base type or interface, it is always accessed via more specific type"
        },
        {
          "shortName": "NotAccessedOutParameterVariable",
          "displayName": "Non-accessed local variable only used to discard the 'out' parameter value",
          "enabled": true,
          "description": "Non-accessed local variable only used to discard the 'out' parameter value"
        },
        {
          "shortName": "RedundantParams",
          "displayName": "'params' modifier is always ignored on overrides",
          "enabled": true,
          "description": "'params' modifier is always ignored on overrides"
        },
        {
          "shortName": "RedundantOverload.Local",
          "displayName": "Redundant method overload (private accessibility)",
          "enabled": true,
          "description": "Redundant method overload. Use another method with optional parameters."
        },
        {
          "shortName": "RedundantBaseConstructorCall",
          "displayName": "Redundant base constructor call",
          "enabled": true,
          "description": "Explicit call to the base class constructor with no arguments. It is generated by the compiler by default and can be omitted."
        },
        {
          "shortName": "EntityNameCapturedOnly.Global",
          "displayName": "Entity is only used to capture its name (non-private accessibility)",
          "enabled": true,
          "description": "Local variable/parameter is only used to capture its name via 'nameof' expression"
        },
        {
          "shortName": "RedundantOverriddenMember",
          "displayName": "Redundant member override",
          "enabled": true,
          "description": "Override of a virtual member is redundant because it consists of only a call to the base member [Learn more...](https://www.jetbrains.com/help/rider/RedundantOverriddenMember.html)"
        },
        {
          "shortName": "ParameterOnlyUsedForPreconditionCheck.Local",
          "displayName": "Parameter is only used for precondition check (private accessibility)",
          "enabled": true,
          "description": "Parameter is only used for precondition check"
        },
        {
          "shortName": "UnusedPositionalParameterCompiler",
          "displayName": "Unused positional parameter",
          "enabled": true,
          "description": "Parameter of the primary constructor is declared but never used"
        },
        {
          "shortName": "EmptyNamespace",
          "displayName": "Empty namespace declaration",
          "enabled": true,
          "description": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)"
        },
        {
          "shortName": "UnusedType.Local",
          "displayName": "Type is never used (private accessibility)",
          "enabled": true,
          "description": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Local.html)"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UseEllipsisInPropertyInspection",
          "displayName": "Three dot characters instead of the ellipsis",
          "enabled": false,
          "description": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties file or resource bundle is alphabetically unsorted",
          "enabled": false,
          "description": "Reports alphabetically unsorted resource bundles or .properties files."
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused property",
          "enabled": false,
          "description": "Reports properties that are not referenced outside of the .properties file they are contained in."
        },
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing spaces in property",
          "enabled": false,
          "description": "Reports properties whose keys or values end with a whitespace."
        },
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn't match code style settings",
          "enabled": false,
          "description": "Reports properties in which key or value delimiters do not match code style settings."
        },
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate property",
          "enabled": false,
          "description": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
        }
      ]
    },
    {
      "name": "XSLT",
      "inspections": [
        {
          "shortName": "XsltUnusedDeclaration",
          "displayName": "Unused variable or parameter",
          "enabled": false,
          "description": "Reports local variables and parameters that are never used."
        },
        {
          "shortName": "XsltDeclarations",
          "displayName": "Incorrect declaration",
          "enabled": false,
          "description": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:"
        },
        {
          "shortName": "XsltTemplateInvocation",
          "displayName": "Incorrect template invocation",
          "enabled": false,
          "description": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations.\n\n\nParameters declared with a default value are optional and will not be reported as missing."
        },
        {
          "shortName": "XsltVariableShadowing",
          "displayName": "Shadowed variable",
          "enabled": false,
          "description": "Reports shadowed XSLT variables."
        }
      ]
    },
    {
      "name": "Code Notification",
      "inspections": [
        {
          "shortName": "RouteTemplates.ParameterConstraintCanBeSpecified",
          "displayName": "Route parameter constraint can be added due to type of method argument",
          "enabled": true,
          "description": "Route parameter constraint can be added due to type of method argument"
        },
        {
          "shortName": "RouteTemplates.ParameterTypeAndConstraintsMismatch",
          "displayName": "Type of parameter doesn't satisfy constraints declared in route template",
          "enabled": true,
          "description": "Type of parameter doesn't satisfy constraints declared in route template"
        },
        {
          "shortName": "RouteTemplates.SyntaxError",
          "displayName": "Syntax error",
          "enabled": true,
          "description": "Syntax error"
        },
        {
          "shortName": "RouteTemplates.ActionRoutePrefixCanBeExtractedToControllerRoute",
          "displayName": "Action's route prefix can be extracted to controller's route",
          "enabled": true,
          "description": "When all controller's actions' route templates have same prefixes, it's possible to extract their common prefix to controller's route template"
        },
        {
          "shortName": "RouteTemplates.RouteParameterConstraintNotResolved",
          "displayName": "Route parameter constraint not resolved",
          "enabled": true,
          "description": "Route parameter constraint not resolved"
        },
        {
          "shortName": "RouteTemplates.AmbiguousMatchingConstraintConstructor",
          "displayName": "More than one parameter constraint's constructor matched",
          "enabled": true,
          "description": "More than one parameter constraint's constructor matched"
        },
        {
          "shortName": "RouteTemplates.ConstraintArgumentCannotBeConverted",
          "displayName": "Route parameter constraint argument cannot be converted to target type",
          "enabled": true,
          "description": "Route parameter constraint argument cannot be converted to target type"
        },
        {
          "shortName": "RouteTemplates.MatchingConstraintConstructorNotResolved",
          "displayName": "Matching parameter constraint's constructor not found",
          "enabled": true,
          "description": "Matching parameter constraint's constructor not found"
        },
        {
          "shortName": "RouteTemplates.OptionalParameterCanBePrecededOnlyBySinglePeriod",
          "displayName": "Optional parameter can be preceded only by single period ('.') in the segment",
          "enabled": true,
          "description": "Optional parameter can be preceded only by single period ('.') in the segment"
        },
        {
          "shortName": "RouteTemplates.MethodMissingRouteParameters",
          "displayName": "Not all route parameters are passed to method",
          "enabled": true,
          "description": "Not all route parameters are passed to method"
        },
        {
          "shortName": "RouteTemplates.RouteParameterIsNotPassedToMethod",
          "displayName": "Route parameter can be passed to method",
          "enabled": true,
          "description": "Route parameter can be passed to method"
        },
        {
          "shortName": "RouteTemplates.OptionalParameterMustBeAtTheEndOfSegment",
          "displayName": "Optional parameter must be at the end of the segment",
          "enabled": true,
          "description": "Optional parameter must be at the end of the segment"
        },
        {
          "shortName": "RouteTemplates.DuplicatedParameter",
          "displayName": "Parameter declared in route more than once",
          "enabled": true,
          "description": "Parameter declared in route more than once"
        },
        {
          "shortName": "RouteTemplates.ParameterTypeCanBeMadeStricter",
          "displayName": "Parameter's type can be made stricter due to applied constraints",
          "enabled": true,
          "description": "Parameter's type can be made stricter due to applied constraints"
        },
        {
          "shortName": "RouteTemplates.SymbolNotResolved",
          "displayName": "Symbol not resolved",
          "enabled": true,
          "description": "Symbol not resolved"
        },
        {
          "shortName": "RouteTemplates.ControllerRouteParameterIsNotPassedToMethods",
          "displayName": "Controller's route parameter can be passed to methods",
          "enabled": true,
          "description": "Controller's route parameter can be passed to methods"
        },
        {
          "shortName": "RouteTemplates.RouteTokenNotResolved",
          "displayName": "Route token not resolved",
          "enabled": true,
          "description": "Route token not resolved"
        },
        {
          "shortName": "Xaml.EmptyGridLengthDefinition",
          "displayName": "Grid length definition must not be empty",
          "enabled": true,
          "description": "Grid length definition must not be empty"
        },
        {
          "shortName": "Xaml.BindingWithContextNotResolved",
          "displayName": "Unresolved binding path when DataContext is known",
          "enabled": true,
          "description": "Unresolved binding path when DataContext for data binding is specified, but symbol cannot be found"
        },
        {
          "shortName": "Xaml.ResourceFilePathCaseMismatch",
          "displayName": "Path to resource is case-sensitive",
          "enabled": true,
          "description": "Path to resource is case-sensitive"
        },
        {
          "shortName": "Xaml.CompiledBindingMissingDataTypeErrorHighlighting",
          "displayName": "x:DataType not specified for CompiledBinding",
          "enabled": true,
          "description": "x:DataType not specified for CompiledBinding"
        },
        {
          "shortName": "Xaml.IgnoredPathHighlighting",
          "displayName": "Ignored path",
          "enabled": false,
          "description": "Path is ignored in project settings"
        },
        {
          "shortName": "Xaml.ElementNameReferenceNotResolved",
          "displayName": "Element name reference is not resolved",
          "enabled": true,
          "description": "Element name reference is not resolved to any of the named elements in scope"
        },
        {
          "shortName": "Xaml.ConstructorWarning",
          "displayName": "Constructor not resolved",
          "enabled": true,
          "description": "Constructor not resolved"
        },
        {
          "shortName": "Xaml.InvalidResourceTargetType",
          "displayName": "XAML style of invalid target type",
          "enabled": true,
          "description": "XAML style of invalid target type"
        },
        {
          "shortName": "Xaml.DependencyPropertyResolveError",
          "displayName": "Dependency property descriptor field missing",
          "enabled": true,
          "description": "Dependency property descriptor field missing or implementation does not comply with Microsoft style guide"
        },
        {
          "shortName": "Xaml.BindingWithoutContextNotResolved",
          "displayName": "Unresolved binding path when DataContext is unknown",
          "enabled": true,
          "description": "Unresolved binding path when DataContext for data binding is not specified"
        },
        {
          "shortName": "Xaml.RoutedEventResolveError",
          "displayName": "Routed event descriptor field missing",
          "enabled": true,
          "description": "Routed event descriptor field missing or implementation does not comply with Microsoft style guide"
        },
        {
          "shortName": "Xaml.GridDefinitionsCanBeConvertedToAttribute",
          "displayName": "Grid columns/rows definitions can be converted to attribute",
          "enabled": true,
          "description": "Grid columns/rows definitions can be converted to attribute"
        },
        {
          "shortName": "Xaml.DecimalParsingIsCultureDependent",
          "displayName": "Decimal numbers parsed depending on current machine culture",
          "enabled": true,
          "description": "Decimal numbers parsed depending on current machine culture"
        },
        {
          "shortName": "Xaml.InvalidType",
          "displayName": "Object/markup extension of invalid type",
          "enabled": true,
          "description": "Object/markup extension of invalid type"
        },
        {
          "shortName": "Xaml.OverloadsCollision",
          "displayName": "Multiple overloads with same arguments count found",
          "enabled": true,
          "description": "Multiple overloads with same arguments count found"
        },
        {
          "shortName": "Xaml.StaticResourceNotResolved",
          "displayName": "Static resource not resolved",
          "enabled": true,
          "description": "Static resource not resolved"
        },
        {
          "shortName": "Xaml.AvaloniaWrongBindingModeForStreamBindingOperator",
          "displayName": "Using stream binding operator in TwoWay or OneWayToSource binding modes",
          "enabled": true,
          "description": "Using stream binding operator in TwoWay or OneWayToSource binding modes may cause runtime errors"
        },
        {
          "shortName": "Xaml.InvalidMemberType",
          "displayName": "Member of invalid type",
          "enabled": true,
          "description": "Member of invalid type"
        },
        {
          "shortName": "Xaml.StyleClassNotFound",
          "displayName": "Style class not found",
          "enabled": true,
          "description": "Style class not found"
        },
        {
          "shortName": "Xaml.MappedPathHighlighting",
          "displayName": "Mapped path",
          "enabled": true,
          "description": "Path is mapped to a different path in project settings"
        },
        {
          "shortName": "Xaml.FieldModifierRequiresNameAttribute",
          "displayName": "x:FieldModifier attribute requires x:Name attribute",
          "enabled": true,
          "description": "x:FieldModifier attribute requires x:Name attribute"
        },
        {
          "shortName": "Xaml.InvalidResourceType",
          "displayName": "XAML resource of invalid type",
          "enabled": true,
          "description": "XAML resource of invalid type"
        },
        {
          "shortName": "Xaml.MethodArgumentsWillBeIgnored",
          "displayName": "Method arguments will be replaced by event's arguments in generated code",
          "enabled": true,
          "description": "Method arguments will be replaced by event's arguments in generated code"
        },
        {
          "shortName": "Xaml.ParentIsOutOfCurrentComponentTree",
          "displayName": "Parent is outside the current component tree",
          "enabled": true,
          "description": "Parent is outside the current component tree"
        },
        {
          "shortName": "Xaml.DynamicResourceError",
          "displayName": "{DynamicResource} can only be used with dependency property",
          "enabled": true,
          "description": "{DynamicResource} can only be used with DependencyProperty of a DependencyObject"
        },
        {
          "shortName": "Web.MappedPath",
          "displayName": "Mapped path",
          "enabled": true,
          "description": "Path is mapped to a different path in project settings"
        },
        {
          "shortName": "Web.IgnoredPath",
          "displayName": "Ignored path",
          "enabled": false,
          "description": "Path is ignored in project settings"
        },
        {
          "shortName": "NonParsableElement",
          "displayName": "Part of the code cannot be parsed",
          "enabled": true,
          "description": "Part of the code cannot be parsed because of deep nesting"
        },
        {
          "shortName": "InvocationIsSkipped",
          "displayName": "Method invocation is skipped",
          "enabled": true,
          "description": "Method invocation is skipped. Compiler will not generate method invocation because the method is conditional, or it is a partial method without implementation. [Learn more...](https://www.jetbrains.com/help/rider/InvocationIsSkipped.html)"
        },
        {
          "shortName": "InactivePreprocessorBranch",
          "displayName": "Inactive preprocessor branch",
          "enabled": true,
          "description": "Inactive preprocessor branch"
        }
      ]
    },
    {
      "name": "ES2015 migration aids",
      "inspections": [
        {
          "shortName": "ES6ConvertModuleExportToExport",
          "displayName": "'module.exports' is used instead of 'export'",
          "enabled": false,
          "description": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
        },
        {
          "shortName": "ES6ConvertIndexedForToForOf",
          "displayName": "Indexed 'for' is used instead of 'for..of'",
          "enabled": false,
          "description": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
        },
        {
          "shortName": "ES6ConvertVarToLetConst",
          "displayName": "'var' is used instead of 'let' or 'const'",
          "enabled": false,
          "description": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
        },
        {
          "shortName": "ES6ConvertLetToConst",
          "displayName": "'let' is used instead of 'const'",
          "enabled": false,
          "description": "Reports a `let` declaration that can be made `const`.  "
        },
        {
          "shortName": "ES6ConvertRequireIntoImport",
          "displayName": "'require()' is used instead of 'import'",
          "enabled": false,
          "description": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
        },
        {
          "shortName": "JSFunctionExpressionToArrowFunction",
          "displayName": "Function expression is used instead of arrow function",
          "enabled": false,
          "description": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
        },
        {
          "shortName": "JSStringConcatenationToES6Template",
          "displayName": "String concatenation is used instead of template literal",
          "enabled": false,
          "description": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
        },
        {
          "shortName": "ES6ConvertToForOf",
          "displayName": "'for..in' is used instead of 'for..of'",
          "enabled": false,
          "description": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
        }
      ]
    },
    {
      "name": "DOM issues",
      "inspections": [
        {
          "shortName": "DocumentWriteJS",
          "displayName": "Call to 'document.write()'",
          "enabled": false,
          "description": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
        },
        {
          "shortName": "InnerHTMLJS",
          "displayName": "Use of 'innerHTML' property",
          "enabled": false,
          "description": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
        },
        {
          "shortName": "XHTMLIncompatabilitiesJS",
          "displayName": "Incompatible XHTML usages",
          "enabled": false,
          "description": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
        },
        {
          "shortName": "PlatformDetectionJS",
          "displayName": "Inaccurate platform detection",
          "enabled": false,
          "description": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
        }
      ]
    },
    {
      "name": "Code Coverage",
      "inspections": [
        {
          "shortName": "JsCoverageInspection",
          "displayName": "Check JavaScript and TypeScript source code coverage",
          "enabled": false,
          "description": "Reports methods, classes and files whose coverage is below a certain threshold."
        }
      ]
    },
    {
      "name": "TypeScript",
      "inspections": [
        {
          "shortName": "TypeScriptValidateGenericTypes",
          "displayName": "Incorrect generic type argument",
          "enabled": false,
          "description": "Reports an invalid type argument in a function, interface, or class declaration."
        },
        {
          "shortName": "TypeScriptUMDGlobal",
          "displayName": "Referenced UMD global variable",
          "enabled": false,
          "description": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
        },
        {
          "shortName": "TypeScriptFieldCanBeMadeReadonly",
          "displayName": "Field can be readonly",
          "enabled": false,
          "description": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
        },
        {
          "shortName": "TypeScriptUnresolvedReference",
          "displayName": "Unresolved TypeScript reference",
          "enabled": false,
          "description": "Reports an unresolved reference in TypeScript code."
        },
        {
          "shortName": "TypeScriptConfig",
          "displayName": "Inconsistent tsconfig.json properties",
          "enabled": false,
          "description": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
        },
        {
          "shortName": "TypeScriptValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "Reports a parameter, return value, or assigned expression of incorrect type."
        },
        {
          "shortName": "TypeScriptSmartCast",
          "displayName": "Narrowed type",
          "enabled": false,
          "description": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
        },
        {
          "shortName": "TypeScriptJSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "enabled": false,
          "description": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
        },
        {
          "shortName": "TypeScriptCheckImport",
          "displayName": "Unresolved imported name",
          "enabled": false,
          "description": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
        },
        {
          "shortName": "TypeScriptRedundantGenericType",
          "displayName": "Redundant type arguments",
          "enabled": false,
          "description": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n\n    type Foo<T=number> = T;\n    let z: Foo<number>;\n"
        },
        {
          "shortName": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
          "displayName": "Abstract class constructor can be made protected",
          "enabled": false,
          "description": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
        },
        {
          "shortName": "TypeScriptValidateJSTypes",
          "displayName": "Type mismatch in 'any' type",
          "enabled": false,
          "description": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the `any` type.\n\n```\ndeclare var test: any;\ntest.hasOwnProperty(true); //reports 'true'\n```"
        },
        {
          "shortName": "TypeScriptExplicitMemberType",
          "displayName": "Explicit types",
          "enabled": false,
          "description": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n        var pi: number = 3.14\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
        },
        {
          "shortName": "TypeScriptDuplicateUnionOrIntersectionType",
          "displayName": "Duplicate union or intersection type component",
          "enabled": false,
          "description": "Reports a duplicate type inside a union or intersection."
        },
        {
          "shortName": "TypeScriptMissingConfigOption",
          "displayName": "Missing tsconfig.json option ",
          "enabled": false,
          "description": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
        },
        {
          "shortName": "TypeScriptLibrary",
          "displayName": "Missing global library",
          "enabled": false,
          "description": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
        },
        {
          "shortName": "TypeScriptMissingAugmentationImport",
          "displayName": "Missing augmentation import",
          "enabled": false,
          "description": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion.TS",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
        },
        {
          "shortName": "TypeScriptSuspiciousConstructorParameterAssignment",
          "displayName": "Assigned constructor field parameter",
          "enabled": false,
          "description": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n\n    class Foo {\n      constructor(private p: number) {\n        p = 1; //must be this.p = 1;\n      }\n    }\n"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "Failed external validation",
          "enabled": false,
          "description": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused schema declaration",
          "enabled": false,
          "description": "Reports an unused namespace declaration or location hint in XML."
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "enabled": false,
          "description": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "Empty element content",
          "enabled": false,
          "description": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "enabled": false,
          "description": "Reports a root tag name different from the name specified in the `<doctype>` tag."
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate 'id' attribute",
          "enabled": false,
          "description": "Reports a duplicate `id` attribute in XML."
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound namespace prefix",
          "enabled": false,
          "description": "Reports an unbound namespace prefix in XML."
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference in XML."
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant attribute with default value",
          "enabled": false,
          "description": "Reports a redundant assignment of the default value to an XML attribute."
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved 'id' reference",
          "enabled": false,
          "description": "Reports an unresolved `id` reference in XML."
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "enabled": false,
          "description": "Reports XML validation problems in the results of a batch code inspection."
        }
      ]
    },
    {
      "name": "Unity Burst Compiler Warnings",
      "inspections": [
        {
          "shortName": "Unity.BurstAccessingManagedMethod",
          "displayName": "Accessing managed methods is not supported",
          "enabled": true,
          "description": "Accessing managed methods is not supported"
        },
        {
          "shortName": "Unity.BurstCreatingManagedType",
          "displayName": "Creating a managed type is not supported",
          "enabled": true,
          "description": "Creating a managed type is not supported"
        },
        {
          "shortName": "Unity.BurstStringFormatInvalidArgument",
          "displayName": "Burst: String.Format(format, ...) invalid argument type",
          "enabled": true,
          "description": "Burst: String.Format(format, ...) invalid argument type"
        },
        {
          "shortName": "Unity.BurstFunctionSignatureContainsManagedTypes",
          "displayName": "Function signature cannot contain managed types",
          "enabled": true,
          "description": "Function signature cannot contain managed types"
        },
        {
          "shortName": "Unity.BurstTryNotSupported",
          "displayName": "Try statement is not supported",
          "enabled": true,
          "description": "Try statement is not supported"
        },
        {
          "shortName": "Unity.SharedStaticUnmanagedType",
          "displayName": "Shared static type parameter requires the unmanaged constraint",
          "enabled": true,
          "description": "Shared static type parameter requires the unmanaged constraint"
        },
        {
          "shortName": "Unity.BurstLoadingManagedType",
          "displayName": "Loading managed type is not supported",
          "enabled": true,
          "description": "Loading managed type is not supported"
        },
        {
          "shortName": "Unity.BurstBoxingNotSupported",
          "displayName": "Boxing is not supported",
          "enabled": true,
          "description": "Boxing is not supported"
        },
        {
          "shortName": "Unity.BurstWriteStaticField",
          "displayName": "Writing to a static field is not supported",
          "enabled": true,
          "description": "Writing to a static field is not supported"
        },
        {
          "shortName": "Unity.BurstLoadingStaticNotReadonly",
          "displayName": "Loading from a non-readonly static field is not supported",
          "enabled": true,
          "description": "Loading from a non-readonly static field is not supported"
        },
        {
          "shortName": "Unity.BurstForeachNotSupported",
          "displayName": "The 'foreach' construction is not supported",
          "enabled": true,
          "description": "The 'foreach' construction is not supported"
        },
        {
          "shortName": "Unity.BurstTypeofExpression",
          "displayName": "Typeof is prohibited in Burst",
          "enabled": true,
          "description": "Typeof is prohibited in Burst"
        },
        {
          "shortName": "Unity.BurstAccessingManagedIndexer",
          "displayName": "Accessing managed indexers is not supported",
          "enabled": true,
          "description": "Accessing managed indexers is not supported"
        },
        {
          "shortName": "Unity.BurstLocalStringVariableDeclaration",
          "displayName": "Burst: The variable resolves to System.String, which may result in invalid managed method calls at the Burst-compiled call stack",
          "enabled": true,
          "description": "Burst: The variable resolves to System.String, which may result in invalid managed method calls at the Burst-compiled call stack"
        },
        {
          "shortName": "Unity.BurstSharedStaticCreate",
          "displayName": "Some SharedStatic`1.GetOrCreate overloads cause compiler errors",
          "enabled": true,
          "description": "Some SharedStatic\\`1.GetOrCreate overloads cause compiler errors"
        },
        {
          "shortName": "Unity.BurstStringFormatInvalidFormat",
          "displayName": "String.Format(format, ...) only accepts string literals and const strings",
          "enabled": true,
          "description": "String.Format(format, ...) only accepts string literals and const strings"
        },
        {
          "shortName": "Unity.BurstDebugLogInvalidArgument",
          "displayName": "Debug logging functions only accept strings",
          "enabled": true,
          "description": "Debug logging functions only accept strings"
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "enabled": false,
          "description": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpUnnecessaryNonCapturingGroup",
          "displayName": "Unnecessary non-capturing group",
          "enabled": true,
          "description": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
        },
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "enabled": true,
          "description": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "enabled": true,
          "description": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "enabled": true,
          "description": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "enabled": false,
          "description": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "enabled": true,
          "description": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
        },
        {
          "shortName": "CustomRegExpInspection",
          "displayName": "Custom RegExp inspection",
          "enabled": true,
          "description": "Custom Regex Inspection"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "enabled": true,
          "description": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
        },
        {
          "shortName": "RegExpSimplifiable",
          "displayName": "Regular expression can be simplified",
          "enabled": true,
          "description": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "enabled": true,
          "description": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpSuspiciousBackref",
          "displayName": "Suspicious back reference",
          "enabled": true,
          "description": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "enabled": false,
          "description": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "enabled": true,
          "description": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "enabled": true,
          "description": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
        },
        {
          "shortName": "RegExpRedundantClassElement",
          "displayName": "Redundant '\\d', '[:digit:]', or '\\D' class elements",
          "enabled": true,
          "description": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "NestedFunctionJS",
          "displayName": "Nested function",
          "enabled": false,
          "description": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
        },
        {
          "shortName": "DynamicallyGeneratedCodeJS",
          "displayName": "Execution of dynamically generated code",
          "enabled": false,
          "description": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
        },
        {
          "shortName": "NegatedIfStatementJS",
          "displayName": "Negated 'if' statement",
          "enabled": false,
          "description": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
        },
        {
          "shortName": "CallerJS",
          "displayName": "Use of 'caller' property",
          "enabled": false,
          "description": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
        },
        {
          "shortName": "NestedConditionalExpressionJS",
          "displayName": "Nested conditional expression",
          "enabled": false,
          "description": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
        },
        {
          "shortName": "IncrementDecrementResultUsedJS",
          "displayName": "Result of increment or decrement used",
          "enabled": false,
          "description": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
        },
        {
          "shortName": "ConfusingPlusesOrMinusesJS",
          "displayName": "Confusing sequence of '+' or '-'",
          "enabled": false,
          "description": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
        },
        {
          "shortName": "OverlyComplexBooleanExpressionJS",
          "displayName": "Overly complex boolean expression",
          "enabled": false,
          "description": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
        },
        {
          "shortName": "OverlyComplexArithmeticExpressionJS",
          "displayName": "Overly complex arithmetic expression",
          "enabled": false,
          "description": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
        },
        {
          "shortName": "PointlessArithmeticExpressionJS",
          "displayName": "Pointless arithmetic expression",
          "enabled": false,
          "description": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
        },
        {
          "shortName": "ConfusingFloatingPointLiteralJS",
          "displayName": "Confusing floating point literal",
          "enabled": false,
          "description": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
        },
        {
          "shortName": "BlockStatementJS",
          "displayName": "Unnecessary block statement",
          "enabled": false,
          "description": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
        },
        {
          "shortName": "NegatedConditionalExpressionJS",
          "displayName": "Negated conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
        },
        {
          "shortName": "MagicNumberJS",
          "displayName": "Magic number",
          "enabled": false,
          "description": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
        },
        {
          "shortName": "EmptyStatementBodyJS",
          "displayName": "Statement with empty body",
          "enabled": false,
          "description": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "UnnecessaryReturnJS",
          "displayName": "Unnecessary 'return' statement",
          "enabled": false,
          "description": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
        },
        {
          "shortName": "IfStatementWithIdenticalBranchesJS",
          "displayName": "'if' statement with identical branches",
          "enabled": false,
          "description": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
        },
        {
          "shortName": "UnnecessaryContinueJS",
          "displayName": "Unnecessary 'continue' statement",
          "enabled": false,
          "description": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranchesJS",
          "displayName": "Conditional expression with identical branches",
          "enabled": false,
          "description": "Reports a ternary conditional expression with identical `then` and `else` branches."
        },
        {
          "shortName": "SuspiciousTypeOfGuard",
          "displayName": "Unsound type guard check",
          "enabled": false,
          "description": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\n<br />\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
        },
        {
          "shortName": "LoopStatementThatDoesntLoopJS",
          "displayName": "Loop statement that doesn't loop",
          "enabled": false,
          "description": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
        },
        {
          "shortName": "TailRecursionJS",
          "displayName": "Tail recursion",
          "enabled": false,
          "description": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
        },
        {
          "shortName": "DuplicateConditionJS",
          "displayName": "Duplicate condition in 'if' statement",
          "enabled": false,
          "description": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
        },
        {
          "shortName": "UnnecessaryLabelJS",
          "displayName": "Unnecessary label",
          "enabled": false,
          "description": "Reports an unused label."
        },
        {
          "shortName": "ForLoopReplaceableByWhileJS",
          "displayName": "'for' loop may be replaced by 'while' loop",
          "enabled": false,
          "description": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
        },
        {
          "shortName": "ConstantConditionalExpressionJS",
          "displayName": "Constant conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
        },
        {
          "shortName": "JSObjectNullOrUndefined",
          "displayName": "Object is 'null' or 'undefined'",
          "enabled": false,
          "description": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
        },
        {
          "shortName": "TrivialIfJS",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
        },
        {
          "shortName": "TrivialConditionalJS",
          "displayName": "Redundant conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
        },
        {
          "shortName": "IfStatementWithTooManyBranchesJS",
          "displayName": "'if' statement with too many branches",
          "enabled": false,
          "description": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
        },
        {
          "shortName": "PointlessBooleanExpressionJS",
          "displayName": "Pointless statement or boolean expression",
          "enabled": false,
          "description": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatementJS",
          "displayName": "Unnecessary label on 'continue' statement",
          "enabled": false,
          "description": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatementJS",
          "displayName": "Unnecessary label on 'break' statement",
          "enabled": false,
          "description": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
        },
        {
          "shortName": "UnreachableCodeJS",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "Reports code that can never be executed, which almost certainly indicates an error"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "StandardJS",
          "displayName": "Standard code style",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
        },
        {
          "shortName": "JSHint",
          "displayName": "JSHint",
          "enabled": false,
          "description": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
        },
        {
          "shortName": "Eslint",
          "displayName": "ESLint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
        },
        {
          "shortName": "TsLint",
          "displayName": "TSLint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules."
        },
        {
          "shortName": "Stylelint",
          "displayName": "Stylelint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule."
        },
        {
          "shortName": "W3CssValidation",
          "displayName": "W3C CSS validator",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [W3C CSS Validator](https://jigsaw.w3.org/css-validator/)."
        }
      ]
    },
    {
      "name": "Pug/Jade",
      "inspections": [
        {
          "shortName": "JadeTabsAndSpaces",
          "displayName": "Tabs and spaces both used",
          "enabled": false,
          "description": "Reports use of spaces and tabs for indentation in a Pug file."
        }
      ]
    },
    {
      "name": "Function metrics",
      "inspections": [
        {
          "shortName": "FunctionWithMultipleReturnPointsJS",
          "displayName": "Function with multiple return points",
          "enabled": false,
          "description": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
        },
        {
          "shortName": "ParametersPerFunctionJS",
          "displayName": "Function with too many parameters",
          "enabled": false,
          "description": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
        },
        {
          "shortName": "FunctionWithMultipleLoopsJS",
          "displayName": "Function with multiple loops",
          "enabled": false,
          "description": "Reports a function with multiple loop statements."
        },
        {
          "shortName": "CyclomaticComplexityJS",
          "displayName": "Overly complex function",
          "enabled": false,
          "description": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
        },
        {
          "shortName": "ThreeNegationsPerFunctionJS",
          "displayName": "Function with more than three negations",
          "enabled": false,
          "description": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
        },
        {
          "shortName": "StatementsPerFunctionJS",
          "displayName": "Overly long function",
          "enabled": false,
          "description": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
        },
        {
          "shortName": "NestingDepthJS",
          "displayName": "Overly nested function",
          "enabled": false,
          "description": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "JSRemoveUnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "enabled": false,
          "description": "Reports redundant parentheses.\n\nIn expressions:\n\n    var x = ((1) + 2) + 3\n\nIn arrow function argument lists:\n\n    var incrementer = (x) => x + 1\n\nIn TypeScript and Flow type declarations:\n\n    type Card = (Suit & Rank) | (Suit & Number)\n"
        },
        {
          "shortName": "JSDeclarationsAtScopeStart",
          "displayName": "'var' declared not at the beginning of a function",
          "enabled": false,
          "description": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
        },
        {
          "shortName": "ChainedFunctionCallJS",
          "displayName": "Chained function call",
          "enabled": false,
          "description": "Reports a function call whose target is another function call, for example, `foo().bar()`"
        },
        {
          "shortName": "ConstantOnLHSOfComparisonJS",
          "displayName": "Constant on left side of comparison",
          "enabled": false,
          "description": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
        },
        {
          "shortName": "NonBlockStatementBodyJS",
          "displayName": "Statement body without braces",
          "enabled": false,
          "description": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
        },
        {
          "shortName": "ConstantOnRHSOfComparisonJS",
          "displayName": "Constant on right side of comparison",
          "enabled": false,
          "description": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
        },
        {
          "shortName": "UnterminatedStatementJS",
          "displayName": "Unterminated statement",
          "enabled": false,
          "description": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
        },
        {
          "shortName": "NestedFunctionCallJS",
          "displayName": "Nested function call",
          "enabled": false,
          "description": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
        },
        {
          "shortName": "ChainedEqualityJS",
          "displayName": "Chained equality",
          "enabled": false,
          "description": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
        },
        {
          "shortName": "JSArrowFunctionBracesCanBeRemoved",
          "displayName": "Redundant braces around arrow function body",
          "enabled": false,
          "description": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n        let incrementer = (x) => {return x + 1};\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n        let incrementer = (x) => x + 1;\n"
        },
        {
          "shortName": "JSUndefinedPropertyAssignment",
          "displayName": "Undefined property assignment",
          "enabled": false,
          "description": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
        },
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "enabled": false,
          "description": "Reports a missing semicolon at the end of a declaration."
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "enabled": false,
          "description": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
        }
      ]
    },
    {
      "name": "Constraints Violations",
      "inspections": [
        {
          "shortName": "AssignNullToNotNullAttribute",
          "displayName": "Possible 'null' assignment to non-nullable entity",
          "enabled": true,
          "description": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)"
        },
        {
          "shortName": "NotNullOrRequiredMemberIsNotInitialized",
          "displayName": "Non-nullable or required member is not initialized at constructor exit",
          "enabled": true,
          "description": "Non-nullable or required type member is not initialized in any execution path of the constructor"
        },
        {
          "shortName": "ContractAnnotationNotParsed",
          "displayName": "Problem in contract annotation definition",
          "enabled": true,
          "description": "Input string in ContractAnnotation attribute could not be parsed [Learn more...](https://www.jetbrains.com/help/rider/ContractAnnotationNotParsed.html)"
        },
        {
          "shortName": "RequiredBaseTypesConflict",
          "displayName": "Required base type conflicting another type",
          "enabled": true,
          "description": "Type required by some attribute (marked with BaseTypeRequired) conflicting type from another attribute"
        },
        {
          "shortName": "UnsupportedRequiredBaseType",
          "displayName": "BaseTypeRequired attribute supports only classes and interfaces",
          "enabled": true,
          "description": "Invalid type specified in '\\[BaseTypeRequired\\]' attribute usage. Only classes and interfaces are supported. [Learn more...](https://www.jetbrains.com/help/rider/UnsupportedRequiredBaseType.html)"
        },
        {
          "shortName": "RequiredBaseTypesIsNotInherited",
          "displayName": "Base type is required",
          "enabled": true,
          "description": "Concrete base type is required by '\\[BaseTypeRequired\\]' attribute [Learn more...](https://www.jetbrains.com/help/rider/RequiredBaseTypesIsNotInherited.html)"
        },
        {
          "shortName": "RequiredBaseTypesDirectConflict",
          "displayName": "Type specified in '[BaseTypeRequired]' attribute conflicts another type",
          "enabled": true,
          "description": "Type specified in '\\[BaseTypeRequired\\]' attribute conflicts with another type"
        },
        {
          "shortName": "InconsistentNaming",
          "displayName": "Inconsistent Naming",
          "enabled": false,
          "description": "Name doesn't match naming style defined for this kind of symbol [Learn more...](https://www.jetbrains.com/help/rider/InconsistentNaming.html)"
        },
        {
          "shortName": "CheckNamespace",
          "displayName": "Namespace does not correspond to file location",
          "enabled": false,
          "description": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)"
        },
        {
          "shortName": "CannotApplyEqualityOperatorToType",
          "displayName": "Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'",
          "enabled": true,
          "description": "Type is marked by 'CannotApplyEqualityOperatorAttribute' attribute but it is compared using '==' or '!=' operators [Learn more...](https://www.jetbrains.com/help/rider/CannotApplyEqualityOperatorToType.html)"
        },
        {
          "shortName": "ValueRangeAttributeViolation",
          "displayName": "Possible violation of 'ValueRange'/'NonNegativeValue' attribute",
          "enabled": true,
          "description": "Integer value assigned to this entity doesn't lie in the interval specified in the attribute"
        },
        {
          "shortName": "CppInconsistentNaming",
          "displayName": "Inconsistent Naming",
          "enabled": false,
          "description": "Name doesn't match naming style defined for this kind of symbol"
        },
        {
          "shortName": "Xaml.AssignNullToNotNullAttribute",
          "displayName": "Possible 'null' assignment to non-nullable entity",
          "enabled": true,
          "description": "An expression which can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute."
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "enabled": false,
          "description": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
        },
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "enabled": false,
          "description": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
        },
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "enabled": false,
          "description": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "enabled": false,
          "description": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "enabled": false,
          "description": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "enabled": false,
          "description": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "enabled": false,
          "description": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
        },
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "enabled": false,
          "description": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "enabled": false,
          "description": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "enabled": false,
          "description": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "enabled": false,
          "description": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "enabled": false,
          "description": "Reports a duplicate key in an object literal."
        }
      ]
    },
    {
      "name": "XPath",
      "inspections": [
        {
          "shortName": "RedundantTypeConversion",
          "displayName": "Redundant type conversion",
          "enabled": false,
          "description": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a `string()`, `number()`, or `boolean()` function is already the same as the function's return type or if the expected expression type is `any`. Suggests removing the unnecessary conversion."
        },
        {
          "shortName": "CheckNodeTest",
          "displayName": "Unknown element or attribute name",
          "enabled": false,
          "description": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime.\n\n**Example:**\n\n\n      <xsl:template match=\"h:txtarea\" />\n\n\nIf the `h` is bound to the XHTML namespace, the inspection will report this part of the `match` expression as an\nunknown element name because the correct name of the element is \"textarea\"."
        },
        {
          "shortName": "HardwiredNamespacePrefix",
          "displayName": "Hardcoded namespace prefix",
          "enabled": false,
          "description": "Reports comparisons of the `name()` function with a string that contains a colon (`:`). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace.\n\n**Example:**\n\n\n      <xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>\n"
        },
        {
          "shortName": "ImplicitTypeConversion",
          "displayName": "Implicit type conversion",
          "enabled": false,
          "description": "Reports implicit conversions between the predefined XPath-types `STRING`, `NUMBER`, `BOOLEAN`, and `NODESET`. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n\n**Example:**\n\n\n      <xsl:if test=\"foo\" />\n\nis not the same as\n\n\n      <xsl:if test=\"string(foo)\" />\n\n\nThe first test checks whether the element \"foo\" exists (`count(foo) > 0)`; the latter one however is only\ntrue if the element actually contains any text (`string-length(foo) > 0`). Suggests making\nthe type conversion more explicit.\n\n\nUse the following options to configure the inspection:\n\n* Enable or disable implicit conversions between certain types\n* Always report explicit conversions that do not result in the actually expected type, for example, `<xsl:if test=\"number(foo)\" />`\n* Ignore conversion from `NODESET` to `BOOLEAN` by using the `string()` function as a shortcut for writing `string-length() > 0`."
        },
        {
          "shortName": "IndexZeroUsage",
          "displayName": "XPath predicate with index 0",
          "enabled": false,
          "description": "Reports usages of `0` in a predicate index or in a comparison with the function `position()`. Such usage is almost always a bug because in XPath, the index starts at `1`, *not* at `0`.\n\n**Example:**\n\n\n      //someelement[position() = 0] or //something[0]\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "ES6BindWithArrowFunction",
          "displayName": "Suspicious usage of 'bind' with arrow function",
          "enabled": false,
          "description": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
        },
        {
          "shortName": "JSConsecutiveCommasInArrayLiteral",
          "displayName": "Consecutive commas in array literal",
          "enabled": false,
          "description": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfClassThis",
          "displayName": "Potentially invalid reference to 'this' of a class from closure",
          "enabled": false,
          "description": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfThis",
          "displayName": "Potentially invalid reference to 'this' from closure",
          "enabled": false,
          "description": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
        },
        {
          "shortName": "JSIncompatibleTypesComparison",
          "displayName": "Comparison of expressions having incompatible types",
          "enabled": false,
          "description": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
        },
        {
          "shortName": "JSSuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "enabled": false,
          "description": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nHere the inspection guesses that `x` and `y` are mixed up.\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
        },
        {
          "shortName": "ObjectAllocationIgnoredJS",
          "displayName": "Result of object allocation ignored",
          "enabled": false,
          "description": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
        },
        {
          "shortName": "JSSuspiciousEqPlus",
          "displayName": "Suspicious '=+' assignment",
          "enabled": false,
          "description": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
        },
        {
          "shortName": "InfiniteRecursionJS",
          "displayName": "Infinite recursion",
          "enabled": false,
          "description": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
        },
        {
          "shortName": "ForLoopThatDoesntUseLoopVariableJS",
          "displayName": "'for' loop where update or condition does not use loop variable",
          "enabled": false,
          "description": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
        },
        {
          "shortName": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
          "displayName": "Possibly incorrect target of indexed property access",
          "enabled": false,
          "description": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
        },
        {
          "shortName": "JSTypeOfValues",
          "displayName": "'typeof' comparison with non-standard value",
          "enabled": false,
          "description": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
        },
        {
          "shortName": "DivideByZeroJS",
          "displayName": "Division by zero",
          "enabled": false,
          "description": "Reports division by zero or a remainder by zero."
        },
        {
          "shortName": "JSComparisonWithNaN",
          "displayName": "Comparison with NaN",
          "enabled": false,
          "description": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
        },
        {
          "shortName": "JSConstructorReturnsPrimitive",
          "displayName": "Constructor returns primitive value",
          "enabled": false,
          "description": "Reports a constructor function that returns a primitive value. When called with `new`, this value will be lost and an object will be returned instead. To avoid warnings, use the `@return` tag to specify the return of the function."
        },
        {
          "shortName": "JSVoidFunctionReturnValueUsed",
          "displayName": "Void function return value used",
          "enabled": false,
          "description": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\n<br />\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
        },
        {
          "shortName": "JSPotentiallyInvalidConstructorUsage",
          "displayName": "Potentially invalid constructor usage",
          "enabled": false,
          "description": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
        },
        {
          "shortName": "InfiniteLoopJS",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
        },
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma in selector list",
          "enabled": false,
          "description": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
        },
        {
          "shortName": "CssNonIntegerLengthInPixels",
          "displayName": "Non-integer length in pixels",
          "enabled": false,
          "description": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font family name",
          "enabled": false,
          "description": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
        }
      ]
    },
    {
      "name": "Vue",
      "inspections": [
        {
          "shortName": "VueMissingComponentImportInspection",
          "displayName": "Missing component import",
          "enabled": false,
          "description": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import."
        },
        {
          "shortName": "VueDeprecatedSymbol",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated Vue symbol."
        },
        {
          "shortName": "VueUnrecognizedDirective",
          "displayName": "Unrecognized directive",
          "enabled": false,
          "description": "Reports an unrecognized Vue directive."
        },
        {
          "shortName": "VueDuplicateTag",
          "displayName": "Duplicate template/script tag",
          "enabled": false,
          "description": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time."
        },
        {
          "shortName": "VueDataFunction",
          "displayName": "Data function",
          "enabled": false,
          "description": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data."
        },
        {
          "shortName": "VueUnrecognizedSlot",
          "displayName": "Unrecognized slot",
          "enabled": false,
          "description": "Reports an unrecognized Vue slot."
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
        },
        {
          "shortName": "MongoJSExtDeprecationInspection",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSDeprecationInspection",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "Reports unresolved references in MongoDB and JavaScript code."
        }
      ]
    },
    {
      "name": "Spelling Issues",
      "inspections": [
        {
          "shortName": "MarkupAttributeTypo",
          "displayName": "Typo in markup attribute value",
          "enabled": false,
          "description": "Typo in markup attribute value [Learn more...](https://www.jetbrains.com/help/rider/MarkupAttributeTypo.html)"
        },
        {
          "shortName": "MarkupTextTypo",
          "displayName": "Typo in markup text",
          "enabled": false,
          "description": "Typo in markup text [Learn more...](https://www.jetbrains.com/help/rider/MarkupTextTypo.html)"
        },
        {
          "shortName": "CommentTypo",
          "displayName": "Typo in comment",
          "enabled": false,
          "description": "Typo in comment [Learn more...](https://www.jetbrains.com/help/rider/CommentTypo.html)"
        },
        {
          "shortName": "StringLiteralTypo",
          "displayName": "Typo in string literal",
          "enabled": false,
          "description": "Typo in string literal [Learn more...](https://www.jetbrains.com/help/rider/StringLiteralTypo.html)"
        },
        {
          "shortName": "IdentifierTypo",
          "displayName": "Typo in identifier",
          "enabled": false,
          "description": "Typo in identifier [Learn more...](https://www.jetbrains.com/help/rider/IdentifierTypo.html)"
        }
      ]
    },
    {
      "name": "YAML",
      "inspections": [
        {
          "shortName": "YAMLIncompatibleTypes",
          "displayName": "Suspicious type mismatch",
          "enabled": false,
          "description": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n"
        },
        {
          "shortName": "YAMLUnresolvedAlias",
          "displayName": "Unresolved alias",
          "enabled": false,
          "description": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
        },
        {
          "shortName": "YAMLDuplicatedKeys",
          "displayName": "Duplicated YAML keys",
          "enabled": false,
          "description": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
        },
        {
          "shortName": "YAMLSchemaValidation",
          "displayName": "Validation by JSON Schema",
          "enabled": false,
          "description": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
        },
        {
          "shortName": "YAMLSchemaDeprecation",
          "displayName": "Deprecated YAML key",
          "enabled": false,
          "description": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
        },
        {
          "shortName": "YAMLRecursiveAlias",
          "displayName": "Recursive alias",
          "enabled": false,
          "description": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
        },
        {
          "shortName": "YAMLUnusedAnchor",
          "displayName": "Unused anchor",
          "enabled": false,
          "description": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
        }
      ]
    },
    {
      "name": "Try statement issues",
      "inspections": [
        {
          "shortName": "UnusedCatchParameterJS",
          "displayName": "Unused 'catch' parameter",
          "enabled": false,
          "description": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
        },
        {
          "shortName": "EmptyCatchBlockJS",
          "displayName": "Empty 'catch' block",
          "enabled": false,
          "description": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
        },
        {
          "shortName": "ThrowFromFinallyBlockJS",
          "displayName": "'throw' inside 'finally' block",
          "enabled": false,
          "description": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
        },
        {
          "shortName": "ExceptionCaughtLocallyJS",
          "displayName": "Exception used for local control-flow",
          "enabled": false,
          "description": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlockJS",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "enabled": false,
          "description": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
        },
        {
          "shortName": "EmptyFinallyBlockJS",
          "displayName": "Empty 'finally' block",
          "enabled": false,
          "description": "Reports an empty `finally` block, which usually indicates an error."
        },
        {
          "shortName": "EmptyTryBlockJS",
          "displayName": "Empty 'try' block",
          "enabled": false,
          "description": "Reports an empty `try` block, which usually indicates an error."
        },
        {
          "shortName": "ReturnFromFinallyBlockJS",
          "displayName": "'return' inside 'finally' block",
          "enabled": false,
          "description": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
        }
      ]
    },
    {
      "name": "SQL server",
      "inspections": [
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Builtin functions",
          "enabled": false,
          "description": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "ORDER BY in queries",
          "enabled": false,
          "description": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
        }
      ]
    },
    {
      "name": "Async code and promises",
      "inspections": [
        {
          "shortName": "ES6TopLevelAwaitExpression",
          "displayName": "Top-level 'await' expression",
          "enabled": false,
          "description": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
        },
        {
          "shortName": "ES6RedundantAwait",
          "displayName": "Redundant 'await' expression",
          "enabled": false,
          "description": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
        },
        {
          "shortName": "ES6PossiblyAsyncFunction",
          "displayName": "'await' in non-async function",
          "enabled": false,
          "description": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
        },
        {
          "shortName": "ES6MissingAwait",
          "displayName": "Missing await for an async function call",
          "enabled": false,
          "description": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\n<br />\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
        },
        {
          "shortName": "JSIgnoredPromiseFromCall",
          "displayName": "Result of method call returning a promise is ignored",
          "enabled": false,
          "description": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "ParameterNamingConventionJS",
          "displayName": "Function parameter naming convention",
          "enabled": false,
          "description": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
        },
        {
          "shortName": "JSNonASCIINames",
          "displayName": "Identifiers with non-ASCII symbols",
          "enabled": false,
          "description": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
        },
        {
          "shortName": "FunctionNamingConventionJS",
          "displayName": "Function naming convention",
          "enabled": false,
          "description": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
        },
        {
          "shortName": "JSClassNamingConvention",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
        },
        {
          "shortName": "LocalVariableNamingConventionJS",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToFunctionParameterJS",
          "displayName": "Assignment to function parameter",
          "enabled": false,
          "description": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
        },
        {
          "shortName": "JSAssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "enabled": false,
          "description": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
        },
        {
          "shortName": "AssignmentResultUsedJS",
          "displayName": "Result of assignment used",
          "enabled": false,
          "description": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
        },
        {
          "shortName": "SillyAssignmentJS",
          "displayName": "Variable is assigned to itself",
          "enabled": false,
          "description": "Reports an assignment in the form `x = x`."
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignmentJS",
          "displayName": "Assignment could be replaced with operator assignment",
          "enabled": false,
          "description": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
        },
        {
          "shortName": "NestedAssignmentJS",
          "displayName": "Nested assignment",
          "enabled": false,
          "description": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
        },
        {
          "shortName": "AssignmentToForLoopParameterJS",
          "displayName": "Assignment to 'for' loop parameter",
          "enabled": false,
          "description": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
        }
      ]
    },
    {
      "name": "Switch statement issues",
      "inspections": [
        {
          "shortName": "FallThroughInSwitchStatementJS",
          "displayName": "Fallthrough in 'switch' statement",
          "enabled": false,
          "description": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
        },
        {
          "shortName": "JSSwitchVariableDeclarationIssue",
          "displayName": "Variable is declared and being used in different 'case' clauses",
          "enabled": false,
          "description": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
        },
        {
          "shortName": "JSMissingSwitchDefault",
          "displayName": "'switch' statement has no 'default' branch",
          "enabled": false,
          "description": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
        },
        {
          "shortName": "DefaultNotLastCaseInSwitchJS",
          "displayName": "'default' not last case in 'switch'",
          "enabled": false,
          "description": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
        },
        {
          "shortName": "JSUnreachableSwitchBranches",
          "displayName": "Unreachable 'case' branch of a 'switch' statement",
          "enabled": false,
          "description": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
        },
        {
          "shortName": "JSDuplicateCaseLabel",
          "displayName": "Duplicate 'case' label",
          "enabled": false,
          "description": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
        },
        {
          "shortName": "JSRedundantSwitchStatement",
          "displayName": "'switch' statement is redundant and can be replaced",
          "enabled": false,
          "description": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
        },
        {
          "shortName": "TextLabelInSwitchStatementJS",
          "displayName": "Text label in 'switch' statement",
          "enabled": false,
          "description": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
        },
        {
          "shortName": "NestedSwitchStatementJS",
          "displayName": "Nested 'switch' statement",
          "enabled": false,
          "description": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
        },
        {
          "shortName": "JSMissingSwitchBranches",
          "displayName": "'switch' statement has missing branches",
          "enabled": false,
          "description": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
        }
      ]
    },
    {
      "name": "Shell script",
      "inspections": [
        {
          "shortName": "ShellCheck",
          "displayName": "ShellCheck",
          "enabled": false,
          "description": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "ReuseOfLocalVariableJS",
          "displayName": "Reuse of local variable",
          "enabled": false,
          "description": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
        },
        {
          "shortName": "UnnecessaryLocalVariableJS",
          "displayName": "Redundant local variable",
          "enabled": false,
          "description": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
        }
      ]
    },
    {
      "name": "UnrealHeaderTool",
      "inspections": [
        {
          "shortName": "UnrealHeaderToolWarning",
          "displayName": "UnrealHeaderTool warnings",
          "enabled": true,
          "description": "UnrealHeaderTool warnings"
        },
        {
          "shortName": "UnrealHeaderToolError",
          "displayName": "UnrealHeaderTool errors",
          "enabled": true,
          "description": "UnrealHeaderTool errors"
        }
      ]
    },
    {
      "name": "T4",
      "inspections": [
        {
          "shortName": "UnexpectedAttribute",
          "displayName": "The attribute is unknown and will be ignored",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "UnexpectedDirective",
          "displayName": "The directive is unknown and will be ignored",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "IgnoredDirective",
          "displayName": "The directive will be ignored and can be safely removed",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "EscapedKeyword",
          "displayName": "Keyword will be escaped during code generation",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "RedundantInclude",
          "displayName": "Redundant include",
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "NoSupportForVB",
          "displayName": "Visual Basic is not supported yet",
          "enabled": true,
          "description": ""
        }
      ]
    },
    {
      "name": "Unused symbols",
      "inspections": [
        {
          "shortName": "JSUnusedGlobalSymbols",
          "displayName": "Unused global symbol",
          "enabled": false,
          "description": "Reports an unused globally accessible public function, variable, class, or property."
        },
        {
          "shortName": "JSUnusedAssignment",
          "displayName": "Unused assignment",
          "enabled": false,
          "description": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
        },
        {
          "shortName": "JSUnusedLocalSymbols",
          "displayName": "Unused local symbol",
          "enabled": false,
          "description": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
        }
      ]
    },
    {
      "name": "Imports and dependencies",
      "inspections": [
        {
          "shortName": "JSXNamespaceValidation",
          "displayName": "Missing JSX namespace",
          "enabled": false,
          "description": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
        },
        {
          "shortName": "ES6UnusedImports",
          "displayName": "Unused import",
          "enabled": false,
          "description": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
        },
        {
          "shortName": "NpmUsedModulesInstalled",
          "displayName": "Missing module dependency",
          "enabled": false,
          "description": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
        },
        {
          "shortName": "UpdateDependencyToLatestVersion",
          "displayName": "Update package.json dependencies to latest versions",
          "enabled": false,
          "description": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
        },
        {
          "shortName": "JSUrlImportUsage",
          "displayName": "URL import is used",
          "enabled": false,
          "description": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
        },
        {
          "shortName": "PackageJsonMismatchedDependency",
          "displayName": "Mismatched dependencies in package.json",
          "enabled": false,
          "description": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
        }
      ]
    },
    {
      "name": "Less",
      "inspections": [
        {
          "shortName": "LessResolvedByNameOnly",
          "displayName": "Missing import",
          "enabled": false,
          "description": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n"
        },
        {
          "shortName": "LessUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n"
        },
        {
          "shortName": "LessUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n"
        }
      ]
    },
    {
      "name": "Entity Framework",
      "inspections": [
        {
          "shortName": "EntityFramework.NPlusOne.IncompleteDataUsage",
          "displayName": "Usage of navigational property can return incomplete data",
          "enabled": true,
          "description": "Highlights usages of navigational properties that can return incomplete data [Learn more...](https://www.jetbrains.com/help/rider/EntityFramework.NPlusOne.IncompleteDataUsage.html)"
        },
        {
          "shortName": "EntityFramework.NPlusOne.IncompleteDataQuery",
          "displayName": "Query can return incomplete data for related entities",
          "enabled": true,
          "description": "Highlights problematic Entity Framework queries where navigational properties of the original entity can return incomplete data [Learn more...](https://www.jetbrains.com/help/rider/EntityFramework.NPlusOne.IncompleteDataQuery.html)"
        },
        {
          "shortName": "EntityFramework.NPlusOne.Query",
          "displayName": "Possible multiple queries to the database for related entities (N+1 problem)",
          "enabled": true,
          "description": "Highlights problematic Entity Framework queries where navigational properties of the original entity can cause unnecessary multiple SQL queries to the database (N+1 problem) [Learn more...](https://www.jetbrains.com/help/rider/EntityFramework.NPlusOne.Query.html)"
        },
        {
          "shortName": "EntityFramework.NPlusOne.Usage",
          "displayName": "Possible multiple queries to the database (N+1 problem)",
          "enabled": true,
          "description": "Highlights usages of navigational properties that can cause unnecessary multiple SQL queries to the database (N+1 problem) [Learn more...](https://www.jetbrains.com/help/rider/EntityFramework.NPlusOne.Usage.html)"
        }
      ]
    },
    {
      "name": "Oracle",
      "inspections": [
        {
          "shortName": "OraMissingBodyInspection",
          "displayName": "Missing body for package/object type specification",
          "enabled": false,
          "description": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
        },
        {
          "shortName": "OraUnmatchedForwardDeclarationInspection",
          "displayName": "Forward declaration without definition",
          "enabled": false,
          "description": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
        },
        {
          "shortName": "OraOverloadInspection",
          "displayName": "Overloading errors",
          "enabled": false,
          "description": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "enabled": false,
          "description": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
        },
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "enabled": false,
          "description": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
        }
      ]
    },
    {
      "name": "Unity Performance Inspections",
      "inspections": [
        {
          "shortName": "Unity.PerformanceCriticalCodeInvocation",
          "displayName": "Expensive method invocation",
          "enabled": true,
          "description": "This method call is inefficient when called inside a performance critical context. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Performance-critical-context-and-costly-methods)"
        },
        {
          "shortName": "Unity.InefficientMultiplicationOrder",
          "displayName": "Order of multiplication operations is inefficient",
          "enabled": true,
          "description": "Reordering multiplication operations will improve performance [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Order-of-multiplication-operations-is-inefficient)"
        },
        {
          "shortName": "Unity.InefficientMultidimensionalArrayUsage",
          "displayName": "Use jagged or one-dimensional array instead of multidimensional array",
          "enabled": true,
          "description": "Multidimensional array element access is converted to a method call. It is more efficient to use a jagged or one-dimensional array. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Accessing-multidimensional-arrays-is-inefficient)"
        },
        {
          "shortName": "Unity.PerformanceCriticalCodeNullComparison",
          "displayName": "Expensive null comparison",
          "enabled": true,
          "description": "Equality operations on objects deriving from 'UnityEngine.Object' will also check that the underlying native object has not been destroyed. This requires a call into native code and can have a performance impact when used inside frequently called methods. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-null-comparisons-against-UnityEngine.Object-subclasses)"
        },
        {
          "shortName": "Unity.PerformanceCriticalCodeCameraMain",
          "displayName": "'Camera.main' is expensive",
          "enabled": true,
          "description": "'Camera.main' is slow and does not cache its result. Using 'Camera.main' in frequently called methods is very inefficient. Prefer caching the result in 'Start()' or 'Awake()'. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Camera.main-is-inefficient-in-frequently-called-methods)"
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "enabled": false,
          "description": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
        },
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
        }
      ]
    },
    {
      "name": "Unit testing",
      "inspections": [
        {
          "shortName": "JSTestFailedLine",
          "displayName": "Highlight failure line in test code",
          "enabled": false,
          "description": "Reports a failed method call or an assertion in a test."
        },
        {
          "shortName": "KarmaConfigFile",
          "displayName": "Invalid Karma configuration file",
          "enabled": false,
          "description": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`."
        }
      ]
    },
    {
      "name": "Unreal Build System",
      "inspections": [
        {
          "shortName": "CSharpMissingPluginDependency",
          "displayName": "Dependency for the plugin is missing in the project file",
          "enabled": true,
          "description": "Dependency for the plugin is missing in the project file"
        },
        {
          "shortName": "CSharpBuildCSInvalidModuleName",
          "displayName": "Module with this name does not exist",
          "enabled": true,
          "description": "Module with this name does not exist"
        }
      ]
    },
    {
      "name": "MySQL",
      "inspections": [
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "enabled": false,
          "description": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
        },
        {
          "shortName": "MysqlSpaceAfterFunctionNameInspection",
          "displayName": "Whitespace between the function name and the open parenthesis",
          "enabled": false,
          "description": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "Unsupported syntax in pre-8.0 versions",
          "enabled": false,
          "description": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
        }
      ]
    },
    {
      "name": ".NET Core",
      "inspections": [
        {
          "shortName": "CppThisArgMemberFuncDelegateCtorIsUnsuportedByDotNetCore",
          "displayName": "Delegate constructors with a member pointer parameter are unsupported by .NET Core",
          "enabled": false,
          "description": "Delegate constructors with a member pointer parameter are unsupported by .NET Core. Use a pointer to e.g. static function instead."
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "enabled": false,
          "description": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
        }
      ]
    },
    {
      "name": "Ini files",
      "inspections": [
        {
          "shortName": "DuplicateSectionInFile",
          "displayName": "Duplicate section in file",
          "enabled": false,
          "description": "Reports duplicate sections in the `ini` file."
        },
        {
          "shortName": "DuplicateKeyInSection",
          "displayName": "Duplicate directive in section",
          "enabled": false,
          "description": "Reports duplicate properties in the `ini` file section."
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "enabled": false,
          "description": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n"
        }
      ]
    },
    {
      "name": "PostgreSQL",
      "inspections": [
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "enabled": false,
          "description": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
        }
      ]
    },
    {
      "name": "Qodana",
      "inspections": [
        {
          "shortName": "QodanaSanity",
          "displayName": "Sanity",
          "enabled": false,
          "description": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc..."
        }
      ]
    },
    {
      "name": "File Watchers",
      "inspections": [
        {
          "shortName": "TaskProblemsInspection",
          "displayName": "File watcher problems",
          "enabled": false,
          "description": "Reports an error detected by the output filters from a File Watcher.\n\n\nA File Watcher tracks changes in files and executes the configured command when a change is detected."
        }
      ]
    },
    {
      "name": "React",
      "inspections": [
        {
          "shortName": "JSXDomNesting",
          "displayName": "Invalid DOM element nesting",
          "enabled": false,
          "description": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
        }
      ]
    },
    {
      "name": "MSBuild",
      "inspections": [
        {
          "shortName": "MsbuildTargetFrameworkTagInspection",
          "displayName": "TargetFramework tag checks",
          "enabled": false,
          "description": "[RIDER-83136](https://youtrack.jetbrains.com/issue/RIDER-83136/)"
        }
      ]
    },
    {
      "name": "Handlebars/Mustache",
      "inspections": [
        {
          "shortName": "HbEmptyBlock",
          "displayName": "Missing block helper argument",
          "enabled": false,
          "description": "Reports an `if`, `each`, or `with` block helper without an argument."
        }
      ]
    },
    {
      "name": "Node.js",
      "inspections": [
        {
          "shortName": "NodeCoreCodingAssistance",
          "displayName": "Unresolved Node.js APIs",
          "enabled": false,
          "description": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
        }
      ]
    },
    {
      "name": "Xunit",
      "inspections": [
        {
          "shortName": "Xunit.XunitTestWithConsoleOutput",
          "displayName": "Console output in Xunit tests",
          "enabled": true,
          "description": "Xunit tests should use ITestOutputHelper instead of System.Console. [Learn more...](https://www.jetbrains.com/help/rider/Xunit.XunitTestWithConsoleOutput.html)"
        }
      ]
    }
  ]
}